<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
<description>
    <title-info>
        <genre>antique</genre>
        <author><first-name></first-name><last-name>Unknown</last-name></author>
        <book-title>Unknown</book-title>
        <coverpage><image l:href="#img_0"/></coverpage>
        <lang>ru</lang>
    </title-info>
    <document-info>
        <author><first-name></first-name><last-name>Unknown</last-name></author>
        <program-used>calibre 4.99.5</program-used>
        <date>5.10.2022</date>
        <id>40352616-ae31-4f77-9e9a-e9b317f2db0b</id>
        <version>1.0</version>
    </document-info>
    <publish-info>
    </publish-info>
</description>
<body>
<section>
<empty-line/><empty-line/><empty-line/>
<p><strong>Авторы:</strong> Peter Jay Salzman, Michael Burian, Ori Pomerantz, Bob Mottram, Jim Huang</p>
<empty-line/>
<p><strong>Ссылка на оригинал:</strong> <a l:href="https://sysprog21.github.io/lkmpg/">The Linux Kernel Module Programming Guide</a></p>
<empty-line/>
<p><strong>Перевод:</strong> команда <a l:href="https://habr.com/ru/company/ruvds/blog/">RUVDS.com</a></p>
<p>ОГЛАВЛЕНИЕ</p>
<p>ОГЛАВЛЕНИЕ      2</p>
<p><strong>1. Вступление</strong>      <strong>4</strong></p>
<p>▍ 1.1 Авторство      5</p>
<p>▍ 1.2 Благодарности      5</p>
<p>▍ 1.3 Что такое модуль ядра?      6</p>
<p>▍ 1.4 Пакеты модулей ядра      6</p>
<p>▍ 1.5 Какие модули содержатся в моём ядре?      6</p>
<p>▍ 1.6 Нужно ли скачивать и компилировать ядро?      7</p>
<p>▍ 1.7 Перед началом      7</p>
<p><strong>2. Заголовочные файлы</strong>      <strong>8</strong></p>
<p><strong>3. Примеры</strong>      <strong>8</strong></p>
<p><strong>4. Hello World</strong>      <strong>8</strong></p>
<p>▍ 4.1 Простейший модуль      8</p>
<p>▍ 4.2 Hello и Goodbye      14</p>
<p>▍ 4.3 Макросы __init и __exit      15</p>
<p>▍ 4.4 Лицензирование и документирование модулей      16</p>
<p>▍ 4.5 Передача в модуль аргументов командной строки      17</p>
<p>▍ 4.6 Модули, состоящие из нескольких файлов      20</p>
<p>▍ 4.7 Сборка модулей для скомпилированного ядра      22</p>
<p><strong>5. Общие сведения</strong>      <strong>25</strong></p>
<p>▍ 5.1 Начало и завершение модулей      25</p>
<p>▍ 5.2 Функции, доступные модулям      25</p>
<p>▍ 5.3 Пользовательское пространство и пространство ядра      27</p>
<p>▍ 5.4 Пространство имён      27</p>
<p>▍ 5.5 Кодовое пространство      28</p>
<p>▍ 5.6 Драйверы устройств      28</p>
<p><strong>6. Драйверы символьных устройств</strong>      <strong>31</strong></p>
<p>▍ 6.1 Структура file_operations      31</p>
<p>▍ 6.2 Структура file      33</p>
<p>▍ 6.3 Регистрация устройства      33</p>
<p>▍ 6.4 Отмена регистрации устройства      35</p>
<p>▍ 6.5 chardev.c      36</p>
<p>▍ 6.6 Создание модулей для нескольких версий ядра      40</p>
<p><strong>7. Файловая система /proc</strong>      <strong>41</strong></p>
<p>▍ 7.1 Структура proc_ops      44</p>
<p>▍ 7.2 Считывание и запись файла /proc      44</p>
<p>▍ 7.3 Управление файлом /proc с помощью стандартной файловой системы      47</p>
<p>▍ 7.4 Управление файлом /proc с помощью seq_file      50</p>
<p><strong>8 sysfs: взаимодействие с модулем</strong>      <strong>54</strong></p>
<p><strong>9. Взаимодействие с файлами устройств</strong>      <strong>58</strong></p>
<p><strong>10. Системные вызовы</strong>      <strong>71</strong></p>
<p><strong>11. Блокировка процессов и потоков</strong>      <strong>81</strong></p>
<p>▍ 11.1 Ожидание      81</p>
<p>▍ 11.2 Завершение потоков      89</p>
<p><strong>12. Избегание коллизий и взаимных блокировок</strong>      <strong>91</strong></p>
<p>▍ 12.1 Мьютексы      92</p>
<p>▍ 12.2 Спин-блокировки      93</p>
<p>▍ 12.3 Блокировки для чтения и записи      94</p>
<p>▍ 12.4 Атомарные операции      96</p>
<p><strong>13. Замена макроса Print</strong>      <strong>98</strong></p>
<p>▍ 13.1 Замена      98</p>
<p>▍ 13.2 Мигание светодиодами клавиатуры      100</p>
<p><strong>14. Планирование задач</strong>      <strong>104</strong></p>
<p>▍ 14.1 Тасклеты      104</p>
<p>▍ 14.2 Очереди заданий      106</p>
<p><strong>15. Обработка прерываний</strong>      <strong>107</strong></p>
<p>▍ 15.1 Обработчики прерываний      107</p>
<p>▍ 15.2 Обнаружение нажатий клавиш      109</p>
<p>▍ 15.3 Нижняя половина      112</p>
<p><strong>16. Криптография</strong>      <strong>116</strong></p>
<p>▍ 16.1 Хеш-функции      116</p>
<p>▍ 16.2 Шифрование с симметричным ключом      118</p>
<p><strong>17. Драйвер виртуального устройства ввода</strong>      <strong>122</strong></p>
<p><strong>18. Стандартизация интерфейсов: модель устройства</strong>      <strong>137</strong></p>
<p><strong>19. Оптимизации</strong>      <strong>139</strong></p>
<p>▍ 19.1 Условия likely и unlikely      139</p>
<p><strong>20. Важные нюансы</strong>      <strong>140</strong></p>
<p>▍ 20.1 Использование стандартных библиотек      140</p>
<p>▍ 20.2 Отключение прерываний      140</p>
<p><strong>21. Дальнейшие шаги</strong>      <strong>140</strong></p>
<p><strong>Эпилог</strong>      <strong>141</strong></p>
<p>Особая благодарность в подготовке электронной версии и перевода:      141</p>
<p><strong>1. Вступление</strong></p>
<empty-line/>
<p>Эта книга задумана для распространения в качестве полезного подручного материала, но не предоставляет никаких гарантий, в том числе гарантий соответствия ожиданиям читателя или пригодности для конкретной цели. Её автор призывает к активному распространению этого материала для личного и коммерческого использования при условии соответствия вышеуказанной лицензии. Проще говоря, вы можете копировать и распространять эту книгу как бесплатно, так и за деньги. Делать это можно и в электронном, и в физическом формате, не спрашивая дополнительного разрешения у автора.</p>
<empty-line/>
<p>Производные работы и переводы этого документа должны также публиковаться под лицензией Open Software License с упоминанием оригинального источника. Если вы внесёте в книгу новый материал, то сделайте этот материал и исходный код доступными для своих ревизий. Ревизии и обновления должны быть доступны непосредственно мейнтейнеру документа, Джиму Хуангу &lt;jserv@ccns.ncku.edu.tw&gt;. Это позволит делать мерджи обновлений и предоставлять согласованные ревизии сообществу Linux.</p>
<empty-line/>
<p>Если вы будете публиковать или распространять книгу в коммерческих целях, то автор и <a l:href="https://tldp.org/">проект документирования Linux</a> (LDP) будут весьма признательны за пожертвования, роялти-отчисления и предоставление печатных версий. Участие в общем деле таким образом показывает вашу поддержку бесплатного ПО и LDP. По всем вопросам можете писать на приведённый выше адрес.</p>
<empty-line/>
<p>▍ 1.1 Авторство</p>
<empty-line/>
<p>Первое «Руководство по программированию модулей ядра» написал Ори Померанц для ядер версии 2.2. В конечном итоге у Ори не стало времени для поддержания актуальности этого документа, что не удивительно, ведь ядро очень динамично в своём развитии. После этого поддержку руководства взял на себя Питер Джей Зальцман, который обновил его под версию 2.4. Но в итоге и Питеру стало не хватать времени, чтобы довести пособие до соответствия ядру 2.6. В этой ситуации на выручку пришёл Майкл Буриан, который помог его обновить. Следующим был Боб Моттрам, доработавший примеры под ядро 3.8+. Последним же на данный момент является Джим Хуанг, который довёл руководство до соответствия последним версиям ядра 5.х и скорректировал документ LaTeX.</p>
<empty-line/>
<p>▍ 1.2 Благодарности</p>
<empty-line/>
<p>Ниже перечислены сторонние участники, которые вносили изменения и давали полезные рекомендации:</p>
<empty-line/>
<p> 2011eric, 25077667, Arush Sharma, asas1asas200, Benno Bielmeier, Bob Lee, Brad Baker, ccs100203, Chih-Yu Chen, Ching-Hua (Vivian) Lin, ChinYikMing, Cyril Brulebois, Daniele Paolo Scarpazza, David Porter, demonsome, Dimo Velev, Ekang Monyet, fennecJ, Francois Audeon, gagachang, Gilad Reti, Horst Schirmeier, Hsin-Hsiang Peng, Ignacio Martin, JianXing Wu, linD026, lyctw, manbing, Marconi Jiang, mengxinayan, RinHizakura, Roman Lakeev, Stacy Prowell, Steven Lung, Tristan Lelong, Tucker Polomik, VxTeemo, Wei-Lun Tsai, xatier, Ylowy.</p>
<empty-line/>
<p>▍ 1.3 Что такое модуль ядра?</p>
<empty-line/>
<p>Итак, вы хотите написать модуль для ядра. Вы знаете Си, уже написали несколько неплохих программ для выполнения в качестве процессов, и теперь вам захотелось попасть на территорию реального экшена, где единственный недействительный указатель может стереть всю вашу файловую систему, а дамп памяти означает перезагрузку.</p>
<empty-line/>
<p>Что же конкретно такое модуль ядра? Модули – это элементы кода, которые по необходимости можно загружать в ядро и выгружать. Они расширяют его функциональность, не требуя перезагрузки системы. К примеру, одним из типов модулей является драйвер устройств, который позволяет ядру обращаться к подключённому аппаратному обеспечению.</p>
<empty-line/>
<p>Не имея модулей, нам бы пришлось строить монолитные ядра и добавлять новую функциональность непосредственно в их образы. И мало того что это привело бы к увеличению размеров ядра, но ещё и вынудило бы нас пересобирать и перезагружать его при каждом добавлении новой функциональности.</p>
<empty-line/>
<p>▍ 1.4 Пакеты модулей ядра</p>
<empty-line/>
<p>В дистрибутивах Linux для работы с пакетами модулей есть команды modprobe, insmod и depmod.</p>
<empty-line/>
<p>В Ubuntu/Debian:</p>
<empty-line/>
<p><strong>sudo apt-get install build-essential kmod</strong></p>
<empty-line/>
<p>В Arch Linux:</p>
<empty-line/>
<p><strong>sudo pacman -S gcc kmod</strong></p>
<empty-line/>
<p>▍ 1.5 Какие модули содержатся в моём ядре?</p>
<empty-line/>
<p>Узнать, какие модули загружены в ядро, можно командой lsmod:</p>
<empty-line/>
<p><strong>sudo lsmod</strong></p>
<empty-line/>
<p>Хранятся модули по пути <emphasis>/proc/modules</emphasis>, значит, их также можно просмотреть с помощью:</p>
<empty-line/>
<p><strong>sudo cat /proc/modules</strong></p>
<p>Список может оказаться длинным, и вам потребуется искать что-то конкретное. Вот пример поиска модуля fat:</p>
<empty-line/>
<p><strong>sudo lsmod | grep fat</strong></p>
<empty-line/>
<p>▍ 1.6 Нужно ли скачивать и компилировать ядро?</p>
<empty-line/>
<p>Для целей, связанных с этим руководством, это делать не обязательно. Однако будет мудрым решением выполнять примеры в тестовом дистрибутиве на виртуальной машине, чтобы избежать возможного нарушения работы системы.</p>
<empty-line/>
<p>▍ 1.7 Перед началом</p>
<empty-line/>
<p>Прежде чем переходить к коду, нужно разобрать кое-какие нюансы. Поскольку у каждого своя система и свои настройки, иногда компиляция и корректная загрузка вашей программы могут вызывать сложности.</p>
<empty-line/>
<p>Но будьте уверены, после первого разрешения всех возможных трудностей, дальнейший полёт будет гладким.</p>
<empty-line/>
<p><strong><emphasis>Версионирование модулей</emphasis></strong><strong>.</strong> Модуль, скомпилированный для одного ядра, не загрузится для другого, если не включить в этом ядре CONFIG_MODVERSIONS. Подробнее о версионировании мы ещё поговорим позднее. Если в вашем ядре версионирование включено, то поначалу, пока мы не разберём эту тему подробнее, примеры могут у вас не работать. Правда, включено оно обычно в большинстве базовых дистрибутивов, и если из-за этого у вас возникнут проблемы с загрузкой модулей, скомпилируйте ядро, отключив их версионирование.</p>
<p><strong><emphasis>Использование X Window System</emphasis></strong><strong>.</strong> Настоятельно рекомендуем извлекать, компилировать и загружать все приводимые в руководстве примеры из консоли. Работать с ними в X Window System не стоит.</p>
<empty-line/>
<p>Модули не могут выводить информацию на экран подобно printf(). При этом они могут логировать информацию и предупреждения, которые в итоге на экран выводятся, но только в консоли. Если вы вставите модуль (insmod) из xterm, то информация и предупреждения залогируются, но только в системный журнал.</p>
<empty-line/>
<p>То есть увидеть вы все эти данные сможете лишь через journalctl. Подробности описаны в разделе 4. Для получения прямого доступа ко всей этой информации, выполняйте все действия в консоли.</p>
<p><strong>2. Заголовочные файлы</strong></p>
<empty-line/>
<p>Прежде чем вы сможете что-либо создавать, вам нужно установить для ядра заголовочные файлы.</p>
<empty-line/>
<p>в Ubuntu/Debian:</p>
<empty-line/>
<p><strong>sudo apt-get update</strong></p>
<p><strong>apt-cache search linux-headers-`uname -r`</strong></p>
<empty-line/>
<p>в Arch Linux:</p>
<empty-line/>
<p><strong>sudo pacman -S linux-headers</strong></p>
<empty-line/>
<p>Так вы узнаете, какие заголовочные файлы ядра доступны. Затем можно выполнить, например:</p>
<empty-line/>
<p><strong>sudo apt-get install kmod linux-headers-5.4.0-80-generic</strong></p>
<empty-line/>
<p><strong>3. Примеры</strong></p>
<empty-line/>
<p>Все примеры этого документа доступны в подкаталоге <a l:href="https://github.com/sysprog21/lkmpg/tree/master/examples"><emphasis>examples</emphasis></a>. Если возникнут ошибки компиляции, причиной может быть то, что у вас установлена более свежая версия ядра, или же просто недостаёт необходимых заголовочных файлов.</p>
<empty-line/>
<p><strong>4. Hello World</strong></p>
<empty-line/>
<p>▍ 4.1 Простейший модуль</p>
<empty-line/>
<p>Большинство людей, изучающих программирование, начинают с какого-нибудь примера «Hello world». Не знаю, что бывает с теми, кто от этой традиции отходит, но, думаю, лучше и не знать. Мы начнём с серии программ «Hello world», которые продемонстрируют различные основы написания модуля ядра.Ниже описан простейший пример модуля.</p>
<empty-line/>
<p>Создайте тестовый каталог:</p>
<empty-line/>
<p><strong>mkdir -p ~/develop/kernel/hello-1</strong></p>
<p><strong>cd</strong><strong> ~/develop/kernel/hello-1</strong></p>
<empty-line/>
<p>Вставьте следующий код в редактор и сохраните как <emphasis>hello-1.c</emphasis>:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * hello-1.c – простейший модуль ядра.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* необходим для pr_info() */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* необходим для всех модулей */</strong></p>
<p><strong>int</strong> <strong>init_module</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello world 1.\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Если вернётся не 0, значит, init_module провалилась; модули загрузить не получится. */</emphasis></strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>void</strong> <strong>cleanup_module</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Goodbye world 1.\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Теперь вам потребуется Makefile.</p>
<empty-line/>
<p>Если вы будете копировать следующий код, то сделайте отступы табами, не пробелами:</p>
<empty-line/>
<p><strong>obj-m += hello</strong><strong>-1.</strong><strong>o</strong></p>
<p><strong>PWD := $(CURDIR)</strong></p>
<p><strong>all:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</strong></p>
<p><strong>clean:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</strong></p>
<empty-line/>
<p>В Makefile инструкция $(CURDIR) может быть установлена на абсолютный путь текущего рабочего каталога (затем идёт обработка всех опций -С, если таковые присутствуют).</p>
<empty-line/>
<p>Подробнее о CURDIR читайте в <a l:href="https://www.gnu.org/software/make/manual/make.html">мануале GNU make</a>.</p>
<empty-line/>
<p>В завершении просто выполните make.</p>
<empty-line/>
<p><strong>make</strong></p>
<empty-line/>
<p>Если в Makefile не будет инструкции PWD := $(CURDIR), он может не скомпилироваться корректно с помощью sudo make. Поскольку некоторые переменные среды регулируются политикой безопасности, наследоваться они не могут. По умолчанию эта политика определяется файлом <emphasis>sudoers</emphasis>. В нём изначально включена опция env_reset, которая запрещает переменные среды.</p>
<empty-line/>
<p>В частности, переменные PATH из пользовательской среды не сохраняются, а устанавливаются на значения по умолчанию (подробнее можно почитать в мануале по sudoers).</p>
<empty-line/>
<p>Установки для переменных среды можно посмотреть так:</p>
<empty-line/>
<p><strong>$ sudo -s</strong></p>
<p><strong><emphasis># sudo -V</emphasis></strong></p>
<empty-line/>
<p>Вот пример простого Makefile, демонстрирующий описанную выше проблему:</p>
<empty-line/>
<p><strong>all:</strong></p>
<p>    <strong>echo</strong><strong> $(PWD)</strong></p>
<empty-line/>
<p>Далее можно использовать флаг –p для вывода всех значений переменных среды из Makefile:</p>
<empty-line/>
<p><strong>$ make -p | grep PWD</strong></p>
<p><strong>PWD = /home/ubuntu/temp</strong></p>
<p><strong>OLDPWD = /home/ubuntu</strong></p>
<p>    <strong>echo</strong><strong> $(PWD)</strong></p>
<empty-line/>
<p>Переменная PWD при выполнении sudo унаследована не будет.</p>
<empty-line/>
<p><strong>$ sudo make -p | grep PWD</strong></p>
<p>    <strong>echo</strong><strong> $(PWD)</strong></p>
<empty-line/>
<p>Тем не менее эту проблему можно решить тремя способами:</p>
<empty-line/>
<p><strong>1.</strong> Использовать флаг -E для их временного сохранения:</p>
<empty-line/>
<p><strong>$ sudo -E make -p | grep PWD</strong></p>
<p><strong>    PWD = /home/ubuntu/temp</strong></p>
<p><strong>    OLDPWD = /home/ubuntu</strong></p>
<p>    <strong>echo</strong><strong> $(PWD)</strong></p>
<empty-line/>
<p><strong>2. </strong>Отключить env_reset, отредактировав <emphasis>/etc/sudoers</emphasis> из-под рут-пользователя с помощью visudo:</p>
<empty-line/>
<p><strong><emphasis>## файл sudoers.</emphasis></strong></p>
<p>  <strong><emphasis>##</emphasis></strong></p>
<p><strong>  ...</strong></p>
<p><strong>  Defaults env_reset</strong></p>
<p>  <strong><emphasis>## В предыдущей строке измените env_reset на !env_reset, чтобы сохранить все переменные среды.</emphasis></strong></p>
<empty-line/>
<p>Затем выполните env и sudo env по отдельности:</p>
<empty-line/>
<p><strong><emphasis># отключить env_reset</emphasis></strong></p>
<p>    <strong>echo</strong> <strong>"user:"</strong><strong> &gt; non-env_reset.log; env &gt;&gt; non-env_reset.log</strong></p>
<p>    <strong>echo</strong> <strong>"root:"</strong><strong> &gt;&gt; non-env_reset.log; sudo env &gt;&gt; non-env_reset.log</strong></p>
<p>    <strong><emphasis># включить env_reset</emphasis></strong></p>
<p>    <strong>echo</strong> <strong>"user:"</strong><strong> &gt; env_reset.log; env &gt;&gt; env_reset.log</strong></p>
<p>    <strong>echo</strong> <strong>"root:"</strong><strong> &gt;&gt; env_reset.log; sudo env &gt;&gt; env_reset.log</strong></p>
<empty-line/>
<p>Можете просмотреть и сравнить эти логи, чтобы понять отличия между env_reset и !env_reset.</p>
<empty-line/>
<p><strong>3.</strong> Сохранить переменные среды, добавив их в env_keep в <emphasis>/etc/sudoers</emphasis>.</p>
<empty-line/>
<p><strong> Defaults env_keep += </strong><strong>"PWD"</strong></p>
<empty-line/>
<p>После применения этого изменения можете проверить установки переменных сред с помощью:</p>
<empty-line/>
<p><strong>        $ sudo -s</strong></p>
<p>         <strong><emphasis># sudo -V</emphasis></strong></p>
<empty-line/>
<p>Если всё пройдёт гладко, вы получите скомпилированный модуль <emphasis>hello-1.ko</emphasis>.</p>
<empty-line/>
<p>Информацию о нём можно вывести командой:</p>
<empty-line/>
<p><strong>modinfo hello-1.ko</strong></p>
<empty-line/>
<p>На этом этапе команда:</p>
<empty-line/>
<p><strong>sudo lsmod | grep hello</strong></p>
<empty-line/>
<p>не должна ничего возвращать. Можете попробовать загрузить свой новоиспечённый модуль с помощью:</p>
<empty-line/>
<p><strong>sudo insmod hello-1.ko</strong></p>
<empty-line/>
<p>При этом символ тире превратится в нижнее подчёркивание. Теперь, когда вы снова выполните:</p>
<empty-line/>
<p><strong>sudo lsmod | grep hello</strong></p>
<empty-line/>
<p>то увидите загруженный модуль. Удалить его можно с помощью:</p>
<empty-line/>
<p><strong>sudo rmmod hello_1</strong></p>
<empty-line/>
<p>Обратите внимание — тире было заменено нижним подчёркиванием. Чтобы увидеть произошедшее в логах, выполните:</p>
<empty-line/>
<p><strong>sudo journalctl --since </strong><strong>"1 hour ago"</strong><strong> | grep kernel</strong></p>
<empty-line/>
<p>Теперь вам известны основы создания, компиляции, установки и удаления модулей. Далее мы подробнее разберём, как они работают.</p>
<empty-line/>
<p>Модули ядра должны иметь не менее двух функций:</p>
<empty-line/>
<p><strong>● </strong><strong>стартовую </strong>(инициализация), которая называется init_module() и вызывается при внедрении (insmod) модуля в ядро;</p>
<p><strong>● </strong><strong>завершающую </strong>(очистка), которая зовётся cleanup_module() и вызывается непосредственно перед извлечением модуля из ядра.</p>
<empty-line/>
<p>В действительности же с версии 2.3.13 произошли кое-какие изменения. Теперь стартовую и завершающую функцию модулей можно называть на своё усмотрение, и об этом будет подробнее сказано в разделе 4.2. На деле этот новый метод даже предпочтительней, хотя многие по прежнему используют названия init_module() и cleanup_module().</p>
<empty-line/>
<p>Как правило, init_module() или регистрирует обработчик чего-либо с помощью ядра, или заменяет одну из функций ядра собственным кодом (обычно кодом, который выполняет определённые действия и вызывает исходную функцию). Что касается cleanup_module(), то она должна отменять всё, что сделала init_module(), чтобы безопасно выгрузить модуль.</p>
<empty-line/>
<p>Наконец, каждый модуль ядра должен включать &lt;linux/module.h&gt;. Нам нужно было включить &lt;linux/kernel.h&gt; только для расширения макроса уровня журнала pr_alert(), о чём подробнее сказано в пункте 2.</p>
<empty-line/>
<p><strong><emphasis>Примечание о стиле написания кода</emphasis></strong><strong>.</strong> Есть нюанс, который может не быть очевиден тем, кто только начинает заниматься программированием ядра. Имеется в виду то, что отступы в коде должны делаться с помощью табов, а не пробелов. Это одно из общих соглашений. Оно вам может не нравиться, но придётся привыкать, если вы соберётесь отправлять патч в основную ветку ядра.</p>
<p><strong><emphasis>Добавление макросов вывода</emphasis></strong><strong>.</strong> Изначально использовалась функция printk, обычно сопровождаемая приоритетом уровня журнала KERN_DEBUG или KERN_INFO. Недавно же появилась возможность выражать это в сокращённой форме с помощью макросов вывода pr_info и pr_debug. Такой подход просто избавляет от лишних нажатий клавиш и выглядит более лаконично. Найти эти макросы можно в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/printk.h"><emphasis>include/linux/printk.h</emphasis></a>. Рекомендую уделить время и прочесть о доступных макросах приоритетов.</p>
<p><strong><emphasis>Насчёт компиляции</emphasis></strong><strong>.</strong> Модули ядра нужно компилировать несколько иначе, нежели обычные приложения пространства пользователя. Прежние версии ядра требовали от нас особого внимания к этим настройкам, которые обычно хранились в Makefile. И несмотря на иерархическую организованность, в make-файлах нижнего уровня скапливалось множество лишних настроек, что делало эти файлы большими и усложняло их обслуживание. К счастью, появился новый способ делать всё это, который называется kbuild, и процесс сборки для внешних загружаемых модулей теперь полностью интегрирован в стандартный механизм сборки ядра. Подробнее о компиляции модулей, не являющихся частью официального ядра (таких как примеры в этом руководства), читайте в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/kbuild/modules.rst"><emphasis>Documentation/kbuild/modules.rst</emphasis></a>.</p>
<empty-line/>
<p>Дополнительные подробности о make-файлах для модулей ядра доступны в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/kbuild/makefiles.rst"><emphasis>Documentation/kbuild/makefiles.rst</emphasis></a>. Обязательно прочтите эту документацию и изучите связанные с ней файлы – это наверняка избавит вас от большого объёма лишней работы.</p>
<empty-line/>
<p>А вот вам одно бонусное упражнение. Видите комментарий над инструкцией return в init_module()? Измените возвращаемое значение на отрицательное, после чего перекомпилируйте и заново загрузите модуль. Что произойдёт?</p>
<empty-line/>
<p>▍ 4.2 Hello и Goodbye</p>
<empty-line/>
<p>В ранних версиях ядра вам нужно было использовать функции init_module и cleanup_module, как в нашем первом примере «Hello world», но сегодня их уже можно именовать на своё усмотрение с помощью макросов module_init и module_exit, которые определены в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h"><emphasis>include/linux/module.h</emphasis></a>. Единственное требование – это чтобы функции инициализации и очистки были определены до вызова этих макросов, в противном случае возникнут ошибки компиляции.</p>
<empty-line/>
<p>Вот пример:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * hello-2.c – демонстрация макросов module_init() и module_exit().</emphasis></strong></p>
<p><strong><emphasis> * Этот вариант предпочтительнее использования init_module() и cleanup_module().</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; /* Необходим для макросов */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Необходим для pr_info() */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Необходим всем модулям */</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>hello_2_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello, world 2\n"</strong><strong>);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>hello_2_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Goodbye, world 2\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(hello_2_init);</strong></p>
<p><strong>module_exit(hello_2_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Теперь у нас есть уже два реальных модуля ядра. Добавить ещё один будет совсем несложно:</p>
<empty-line/>
<p><strong>obj-m += hello</strong><strong>-1.</strong><strong>o</strong></p>
<p><strong>obj-m += hello</strong><strong>-2.</strong><strong>o</strong></p>
<p><strong>PWD := $(CURDIR)</strong></p>
<p><strong>all:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</strong></p>
<p><strong>clean:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</strong></p>
<empty-line/>
<p>Загляните в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/drivers/char/Makefile"><emphasis>drivers/char/Makefile</emphasis></a>, чтобы увидеть реальный пример. Как видите, некоторые элементы включаются в ядро жёстко (obj-y), но куда делись все obj-m? Те, кто знаком со скриптами оболочки, смогут без проблем их обнаружить.</p>
<empty-line/>
<p>Для остальных подскажу, что записи obj-$(CONFIG_FOO), которые вы видите повсюду, расширяются на obj-y или obj-m в зависимости от того, на какое значение была установлена переменная CONFIG_FOO — y или m.</p>
<empty-line/>
<p>Попутно отмечу, что именно эти переменные вы установили в файле <emphasis>.config</emphasis> в каталоге верхнего уровня дерева исходного кода в последний раз, когда выполнили make menuconfig или что-то в том духе.</p>
<empty-line/>
<p>▍ 4.3 Макросы __init и __exit</p>
<empty-line/>
<p>Макрос __init приводит к отбрасыванию функции инициализации и освобождению занятой ей памяти по завершении её выполнения для встроенных драйверов, но не загружаемых модулей. И это вполне разумно, если учесть, когда эта функция вызывается.</p>
<empty-line/>
<p>Также есть __initdata, которая работает аналогично __init, но для переменных инициализации, а не для функций.</p>
<empty-line/>
<p>Макрос __exit приводит к пропуску функции, если модуль встроен в ядро, то есть аналогично __init не влияет на загружаемые модули.</p>
<empty-line/>
<p>Опять же, если учесть, когда выполняется функция очистки, то это полностью оправданно. Встроенным драйверам не требуется очистка, а вот загружаемым модулям как раз да.</p>
<empty-line/>
<p>Эти макросы определены в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/init.h"><emphasis>include/linux/init.h</emphasis></a> и используются для освобождения памяти ядра.</p>
<empty-line/>
<p>Если при его загрузке вы видите сообщение вроде Freeing unused kernel memory: 236k freed, то знайте – это тот самый процесс.</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * hello-3.c – демонстрация макросов __init, __initdata и __exit.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; /* Необходим для макросов */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Необходим для pr_info() */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Необходим для всех модулей */</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> hello3_data __initdata = </strong><strong>3</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>hello_3_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello, world %d\n"</strong><strong>, hello3_data);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>hello_3_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Goodbye, world 3\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(hello_3_init);</strong></p>
<p><strong>module_exit(hello_3_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 4.4 Лицензирование и документирование модулей</p>
<empty-line/>
<p>Даже не знаю, кто вообще загружает или вообще задумывается об использовании проприетарных модулей? Если вы из числа таких людей, то наверняка видели нечто подобное:</p>
<empty-line/>
<p><strong>$ sudo insmod xxxxxx.ko</strong></p>
<p><strong>loading out-of-tree module taints kernel.</strong></p>
<p><strong>module license </strong><strong>'unspecified'</strong><strong> taints kernel.</strong></p>
<empty-line/>
<p>Для обозначения лицензии вашего модуля вы можете использовать ряд макросов, например: «GPL», «GPL v2», «GPL and additional rights», «Dual BSD/GPL», «Dual MIT/GPL», «Dual MPL/GPL» и «Proprietary».</p>
<empty-line/>
<p>Определены они в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h"><emphasis>include/linux/module.h</emphasis></a>. Для указания используемой лицензии существует макрос MODULE_LICENSE.</p>
<p>Он и ещё пара макросов, описывающих модуль, приведены в примере ниже:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * hello-4.c – Демонстрирует документирование модуля.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; /* Необходим для макросов */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Необходим для pr_info() */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Необходим для всех модулей */</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_AUTHOR(</strong><strong>"LKMPG"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"A sample driver"</strong><strong>);</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>init_hello_4</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello, world 4\n"</strong><strong>);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>cleanup_hello_4</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Goodbye, world 4\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(init_hello_4);</strong></p>
<p><strong>module_exit(cleanup_hello_4);</strong></p>
<empty-line/>
<p>▍ 4.5 Передача в модуль аргументов командной строки</p>
<empty-line/>
<p>Модулям можно передавать аргументы командной строки, но не через argc/argv, к которым вы, возможно, привыкли.</p>
<empty-line/>
<p>Чтобы получить такую возможность, нужно объявить переменные, которые будут принимать значения аргументов командной строки как глобальные и затем использовать макрос module_param() (определяемый в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/moduleparam.h"><emphasis>include/linux/moduleparam.h</emphasis></a>) для настройки этого механизма. Во время выполнения insmod будет заполнять эти переменные получаемыми аргументами, например, insmod mymodule.ko myvariable=5.</p>
<empty-line/>
<p>Для большей ясности объявления переменных и макросов необходимо размещать в начале модулей. Более наглядно всё это продемонстрировано в примере кода.</p>
<empty-line/>
<p>Макрос module_param() получает 3 аргумента: имя переменной, её тип и разрешения для соответствующего файла в sysfs. Целочисленные типы могут быть знаковыми, как обычно, или беззнаковыми. Если вы хотите использовать массивы целых чисел или строк, к вашим услугам module_param_array() и module_param_string().</p>
<empty-line/>
<p><strong>int</strong><strong> myint = </strong><strong>3</strong><strong>;</strong></p>
<p><strong>module_param(myint, </strong><strong>int</strong><strong>, </strong><strong>0</strong><strong>);</strong></p>
<empty-line/>
<p>Массивы тоже поддерживаются, но в современных версиях работает это несколько иначе, нежели раньше. Для отслеживания количества параметров необходимо передать указатель на число переменных в качестве третьего аргумента.</p>
<empty-line/>
<p>При желании вы можете вообще проигнорировать подсчёт и передать NULL. Вот пример обоих вариантов:</p>
<empty-line/>
<p><strong>int</strong><strong> myintarray[</strong><strong>2</strong><strong>];</strong></p>
<p><strong>module_param_array(myintarray, </strong><strong>int</strong><strong>, </strong><strong>NULL</strong><strong>, </strong><strong>0</strong><strong>); </strong><strong><emphasis>/* если подсчёт не интересует */</emphasis></strong></p>
<p><strong>short</strong><strong> myshortarray[</strong><strong>4</strong><strong>];</strong></p>
<p><strong>int</strong><strong> count;</strong></p>
<p><strong>module_param_array(myshortarray, </strong><strong>short</strong><strong>, &amp;count, </strong><strong>0</strong><strong>); </strong><strong><emphasis>/* подсчёт происходит в переменной "count" */</emphasis></strong></p>
<empty-line/>
<p>Хорошим применением для этого варианта будет предустановка значений переменных модуля, таких как порт или адрес ввода-вывода. Если переменные содержат предустановленные значения, выполнять автообнаружение. В противном случае оставлять текущее значение. Позже об этом будет сказано подробнее.</p>
<empty-line/>
<p>Наконец, есть ещё макрос MODULE_PARM_DESC(), используемый для документирования аргументов, которые может принять модуль. Он получает два параметра: имя переменной и строку в свободной форме, эту переменную описывающую.</p>
<empty-line/>
<p>Пример передачи аргументов командной строки в модуль:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * hello-5.c – демонстрирует передачу аргументов командной строки в модуль.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/moduleparam.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/stat.h&gt;</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>static</strong> <strong>short</strong> <strong>int</strong><strong> myshort = </strong><strong>1</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> myint = </strong><strong>420</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>long</strong> <strong>int</strong><strong> mylong = </strong><strong>9999</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>char</strong><strong> *mystring = </strong><strong>"blah"</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> myintarray[</strong><strong>2</strong><strong>] = { </strong><strong>420</strong><strong>, </strong><strong>420</strong><strong> };</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> arr_argc = </strong><strong>0</strong><strong>;</strong></p>
<p><strong><emphasis>/* module_param(foo, int, 0000)</emphasis></strong></p>
<p><strong><emphasis> * Первым аргументом указывается имя параметра.</emphasis></strong></p>
<p><strong><emphasis> * Вторым указывается его тип.</emphasis></strong></p>
<p><strong><emphasis> * Третьим указываются биты разрешений</emphasis></strong></p>
<p><strong><emphasis> * для представления параметров в sysfs (если не нуль) позднее.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>module_param(myshort, </strong><strong>short</strong><strong>, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);</strong></p>
<p><strong>MODULE_PARM_DESC(myshort, </strong><strong>"A short integer"</strong><strong>);</strong></p>
<p><strong>module_param(myint, </strong><strong>int</strong><strong>, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);</strong></p>
<p><strong>MODULE_PARM_DESC(myint, </strong><strong>"An integer"</strong><strong>);</strong></p>
<p><strong>module_param(mylong, </strong><strong>long</strong><strong>, S_IRUSR);</strong></p>
<p><strong>MODULE_PARM_DESC(mylong, </strong><strong>"A long integer"</strong><strong>);</strong></p>
<p><strong>module_param(mystring, charp, </strong><strong>0000</strong><strong>);</strong></p>
<p><strong>MODULE_PARM_DESC(mystring, </strong><strong>"A character string"</strong><strong>);</strong></p>
<p><strong><emphasis>/* module_param_array(name, type, num, perm);</emphasis></strong></p>
<p><strong><emphasis> * Первым аргументом идёт имя параметра (в данном случае массива).</emphasis></strong></p>
<p><strong><emphasis> * Второй аргумент – это тип элементов массива.</emphasis></strong></p>
<p><strong><emphasis> * Третий – это указатель на переменную, которая будет хранить количество элементов массива, инициализированных пользователем при загрузке модуля.</emphasis></strong></p>
<p><strong><emphasis> * Четвёртый аргумент – это биты разрешения.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>module_param_array(myintarray, </strong><strong>int</strong><strong>, &amp;arr_argc, </strong><strong>0000</strong><strong>);</strong></p>
<p><strong>MODULE_PARM_DESC(myintarray, </strong><strong>"An array of integers"</strong><strong>);</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>hello_5_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello, world 5\n=============\n"</strong><strong>);</strong></p>
<p><strong>    pr_info(</strong><strong>"myshort is a short integer: %hd\n"</strong><strong>, myshort);</strong></p>
<p><strong>    pr_info(</strong><strong>"myint is an integer: %d\n"</strong><strong>, myint);</strong></p>
<p><strong>    pr_info(</strong><strong>"mylong is a long integer: %ld\n"</strong><strong>, mylong);</strong></p>
<p><strong>    pr_info(</strong><strong>"mystring is a string: %s\n"</strong><strong>, mystring);</strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; ARRAY_SIZE(myintarray); i++)</strong></p>
<p><strong>        pr_info(</strong><strong>"myintarray[%d] = %d\n"</strong><strong>, i, myintarray[i]);</strong></p>
<p><strong>    pr_info(</strong><strong>"got %d arguments for myintarray.\n"</strong><strong>, arr_argc);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>hello_5_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Goodbye, world 5\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(hello_5_init);</strong></p>
<p><strong>module_exit(hello_5_exit);</strong></p>
<p>Рекомендую поэкспериментировать со следующим кодом:</p>
<empty-line/>
<p><strong>$ sudo insmod hello</strong><strong>-5.</strong><strong>ko mystring=</strong><strong>"bebop"</strong><strong> myintarray=</strong><strong>-1</strong></p>
<p><strong>$ sudo dmesg -t | tail </strong><strong>-7</strong></p>
<p><strong>myshort is a </strong><strong>short</strong><strong> integer: </strong><strong>1</strong></p>
<p><strong>myint is an integer: </strong><strong>420</strong></p>
<p><strong>mylong is a </strong><strong>long</strong><strong> integer: </strong><strong>9999</strong></p>
<p><strong>mystring is a </strong><strong>string</strong><strong>: bebop</strong></p>
<p><strong>myintarray[</strong><strong>0</strong><strong>] = </strong><strong>-1</strong></p>
<p><strong>myintarray[</strong><strong>1</strong><strong>] = </strong><strong>420</strong></p>
<p><strong>got </strong><strong>1</strong><strong> arguments </strong><strong>for</strong><strong> myintarray.</strong></p>
<p><strong>$ sudo rmmod hello</strong><strong>-5</strong></p>
<p><strong>$ sudo dmesg -t | tail </strong><strong>-1</strong></p>
<p><strong>Goodbye, world </strong><strong>5</strong></p>
<p><strong>$ sudo insmod hello</strong><strong>-5.</strong><strong>ko mystring=</strong><strong>"supercalifragilisticexpialidocious"</strong><strong> myintarray=</strong><strong>-1</strong><strong>,</strong><strong>-1</strong></p>
<p><strong>$ sudo dmesg -t | tail </strong><strong>-7</strong></p>
<p><strong>myshort is a </strong><strong>short</strong><strong> integer: </strong><strong>1</strong></p>
<p><strong>myint is an integer: </strong><strong>420</strong></p>
<p><strong>mylong is a </strong><strong>long</strong><strong> integer: </strong><strong>9999</strong></p>
<p><strong>mystring is a </strong><strong>string</strong><strong>: supercalifragilisticexpialidocious</strong></p>
<p><strong>myintarray[</strong><strong>0</strong><strong>] = </strong><strong>-1</strong></p>
<p><strong>myintarray[</strong><strong>1</strong><strong>] = </strong><strong>-1</strong></p>
<p><strong>got </strong><strong>2</strong><strong> arguments </strong><strong>for</strong><strong> myintarray.</strong></p>
<p><strong>$ sudo rmmod hello</strong><strong>-5</strong></p>
<p><strong>$ sudo dmesg -t | tail </strong><strong>-1</strong></p>
<p><strong>Goodbye, world </strong><strong>5</strong></p>
<p><strong>$ sudo insmod hello</strong><strong>-5.</strong><strong>ko mylong=hello</strong></p>
<p><strong>insmod: ERROR: could </strong><strong>not</strong><strong> insert </strong><strong>module</strong><strong> hello</strong><strong>-5.</strong><strong>ko: Invalid parameters</strong></p>
<empty-line/>
<p>▍ 4.6 Модули, состоящие из нескольких файлов</p>
<empty-line/>
<p>Иногда есть смысл поделить модуль на несколько файлов.</p>
<p>Вот пример такого модуля:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * start.c – пример модулей, состоящих из нескольких файлов.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Выполнение работы ядра. */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* В частности, модуля. */</strong></p>
<p><strong>int</strong> <strong>init_module</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Hello, world - this is the kernel speaking\n"</strong><strong>);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Второй файл:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * stop.c – пример модулей, состоящих из нескольких файлов.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Выполнение работы ядра. */</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* В частности, модуля. */</strong></p>
<p><strong>void</strong> <strong>cleanup_module</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Short is the life of a kernel module\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>И, наконец, Makefile:</p>
<empty-line/>
<p><strong>obj-m += hello</strong><strong>-1.</strong><strong>o</strong></p>
<p><strong>obj-m += hello</strong><strong>-2.</strong><strong>o</strong></p>
<p><strong>obj-m += hello</strong><strong>-3.</strong><strong>o</strong></p>
<p><strong>obj-m += hello</strong><strong>-4.</strong><strong>o</strong></p>
<p><strong>obj-m += hello</strong><strong>-5.</strong><strong>o</strong></p>
<p><strong>obj-m += startstop.o</strong></p>
<p><strong>startstop-objs := start.o stop.o</strong></p>
<p><strong>PWD := $(CURDIR)</strong></p>
<p><strong>all:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</strong></p>
<p><strong>clean:</strong></p>
<p><strong>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</strong></p>
<empty-line/>
<p>Это полный Makefile для всех примеров, которые мы успели рассмотреть. Первые пять строчек не представляют ничего особенного, но для последнего примера нам потребуется две строки. В первой мы придумываем имя объекта для нашего комбинированного модуля, а во второй сообщаем make, какие объектные файлы являются его частью.</p>
<empty-line/>
<p>▍ 4.7 Сборка модулей для скомпилированного ядра</p>
<empty-line/>
<p>Естественно, мы настоятельно рекомендуем вам перекомпилировать ядро, чтобы иметь возможность активировать ряд полезных функций отладки, таких как принудительная выгрузка модулей ( MODULE_FORCE_UNLOAD ): когда эта опция включена, можно с помощью команды sudo rmmod -f module принудить ядро выгрузить модуль, даже если оно сочтёт это небезопасным.</p>
<empty-line/>
<p>В процессе разработки модуля эта опция может сэкономить вам много времени и избавить от лишних перезагрузок. Если вы не хотите перекомпилировать ядро, то рассмотрите вариант выполнения примеров внутри тестового дистрибутива на виртуальной машине. В таком случае при нарушении работоспособности вы сможете легко перезагрузиться или восстановить VM.</p>
<empty-line/>
<p>Существует ряд случаев, в которых вам может потребоваться загрузить модуль в уже скомпилированное работающее ядро. Как вариант, это может быть типичный дистрибутив Linux или ядро, которое вы сами скомпилировали ранее. Бывает, что загрузить модуль нужно в работающее ядро, перекомпилировать которое нет возможности, или на машину, перезагружать которую нежелательно.</p>
<empty-line/>
<p>Если вам сложно представить случай, который может вынудить вас использовать модули для уже скомпилированного ядра, то просто пропустите этот раздел и расценивайте оставшуюся часть главы как большое примечание.</p>
<empty-line/>
<p>Итак, если вы просто установите дерево исходного кода, используете его для компиляции модуля и попытаетесь внедрить этот модуль в ядро, то в большинстве случаев получите ошибку:</p>
<empty-line/>
<p><strong>insmod: ERROR: could not insert module poet.ko: Invalid module format</strong></p>
<empty-line/>
<p>Более понятная информация логируется в системный журнал:</p>
<empty-line/>
<p><strong>kernel: poet: disagrees about version of symbol module_layout</strong></p>
<empty-line/>
<p>Иными словами, ваше ядро отказывается принимать модуль, потому что строки версии (точнее, <emphasis>vermagic</emphasis>, см. <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/vermagic.h"><emphasis>include/linux/vermagic.h</emphasis></a>) не совпадают. К слову, строки версии хранятся в объекте модуля в виде статической строки, начинающейся с vermagic:.</p>
<empty-line/>
<p>Данные версии вставляются в модуль, когда он линкуется с файлом <emphasis>kernel/module.o</emphasis>. Для просмотра сигнатуры версии и прочих строк, хранящихся в конкретном модуле, выполните команду modinfo module.ko:</p>
<empty-line/>
<p><strong>$ modinfo hello-4.ko</strong></p>
<p><strong>description:    A sample driver</strong></p>
<p><strong>author:         LKMPG</strong></p>
<p><strong>license:        GPL</strong></p>
<p><strong>srcversion:     B2AA7FBFCC2C39AED665382</strong></p>
<p><strong>depends:</strong></p>
<p><strong>retpoline:      Y</strong></p>
<p><strong>name:           hello_4</strong></p>
<p><strong>vermagic:       5.4.0-70-generic SMP mod_unload modversions</strong></p>
<empty-line/>
<p>Для преодоления этой проблемы можно задействовать опцию --force-vermagic, но такое решение не гарантирует безопасность и однозначно будет неприемлемым в создании модулей. Следовательно, модуль нужно скомпилировать в среде, которая была идентична той, где создано наше скомпилированное ядро. Этому и будет посвящён остаток текущей главы.</p>
<empty-line/>
<p>Во-первых, убедитесь, что дерево исходного кода ядра вам доступно и имеет одинаковую версию с вашим текущим ядром. Далее найдите файл конфигурации, который использовался для компиляции ядра.</p>
<empty-line/>
<p>Обычно он доступен в текущем каталоге <emphasis>boot</emphasis> под именем вроде <emphasis>config-5.14.x</emphasis>. Его будет достаточно скопировать в дерево исходного кода вашего ядра:</p>
<empty-line/>
<p><strong>cp /boot/config-`uname -r` .config</strong></p>
<empty-line/>
<p>Далее мы ещё раз сосредоточимся на предыдущем сообщении об ошибке: более пристальное рассмотрение строк версий говорит о том, что даже в случае двух абсолютно одинаковых файлов конфигурации небольшое отличие в версии всё же возможно, и будет достаточно исключить внедрение модуля в ядро.</p>
<empty-line/>
<p>Это небольшое отличие, а именно пользовательская строка, которая присутствует в версии модуля, но отсутствует в версии ядра, вызвано изменением относительно оригинала в Makefile, который содержат некоторые дистрибутивы.</p>
<empty-line/>
<p>Далее вам нужно просмотреть собственный Makefile и обеспечить, чтобы представленная информация версии в точности соответствовала той, что указана в текущем ядре.</p>
<empty-line/>
<p>Например, ваш Makefile может начинаться так:</p>
<empty-line/>
<p><strong>VERSION = 5</strong></p>
<p><strong>PATCHLEVEL = 14</strong></p>
<p><strong>SUBLEVEL = 0</strong></p>
<p><strong>EXTRAVERSION = -rc2</strong></p>
<empty-line/>
<p>В этом случае необходимо восстановить значение символа EXTRAVERSION на -rc2. Мы рекомендуем держать резервную копию Makefile, используемого для компиляции ядра, в <emphasis>/lib/modules/5.14.0-rc2/build</emphasis>. Для этого будет достаточно выполнить:</p>
<empty-line/>
<p><strong>cp /lib/modules/`uname -r`/build/Makefile linux-`uname -r`</strong></p>
<empty-line/>
<p>Здесь linux-`uname -r` — это исходный код ядра, которое вы собираетесь собрать.</p>
<empty-line/>
<p>Теперь выполните make для обновления конфигурации вместе с заголовками версии и объектами:</p>
<empty-line/>
<p><strong>$ make</strong></p>
<p><strong>  SYNC    include/config/auto.conf.cmd</strong></p>
<p><strong>  HOSTCC  scripts/basic/fixdep</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/conf.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/confdata.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/expr.o</strong></p>
<p><strong>  LEX     scripts/kconfig/lexer.lex.c</strong></p>
<p><strong>  YACC    scripts/kconfig/parser.tab.[ch]</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/preprocess.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/symbol.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/util.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/lexer.lex.o</strong></p>
<p><strong>  HOSTCC  scripts/kconfig/parser.tab.o</strong></p>
<p><strong>  HOSTLD  scripts/kconfig/conf</strong></p>
<empty-line/>
<p>Если же вы не хотите фактически компилировать ядро, то можете прервать процесс сборки (CTRL-C) сразу же после строки SPLIT, поскольку в этот момент необходимые вам файлы уже готовы.</p>
<empty-line/>
<p>Теперь можно вернуться в каталог модуля и скомпилировать его: он будет собран в точном соответствии с настройками текущего ядра и загрузится в него без каких-либо ошибок.</p>
<empty-line/>
<p><strong>5. Общие сведения</strong></p>
<empty-line/>
<p>▍ 5.1 Начало и завершение модулей</p>
<empty-line/>
<p>Программа обычно начинается с функции main(), выполняет ряд инструкций, после чего завершается. А вот модули ядра работают несколько иначе. Модуль всегда начинается либо с init_module, либо с функции, которую мы указываем вызовом module_init. У модулей это функция входа, которая сообщает ядру, какую функциональность модуль несёт, и настраивает ядро на выполнение этой функциональности при необходимости. По завершении функции входа, модуль переходит в состояние бездействия, пока ядру не потребуется от него некая функциональность для работы с кодом.</p>
<empty-line/>
<p>Заканчиваются все модули вызовом либо cleanup_module, либо функции, указываемой вызовом module_exit. У модулей это функция выхода. Она отменяет всё, что до этого сделала функция входа, и отменяет регистрацию всей ранее введённой ей функциональности.</p>
<empty-line/>
<p>Обе описанные функции входа и выхода должны присутствовать в каждом модуле. А поскольку для их определения существует не один способ, я постараюсь использовать общие термины «функция входа» и «функция выхода», но если вдруг по недосмотру назову их init_module и cleanup_module, то, думаю, вы поймёте, что я имею в виду.</p>
<empty-line/>
<p>▍ 5.2 Функции, доступные модулям</p>
<empty-line/>
<p>Программисты используют функции, не требующие постоянного переопределения. Хорошим примером этого является printf(). Это лишь одна из функций, предоставляемых стандартной библиотекой libc. Фактически их определения не попадают в программу до этапа линковки, который гарантирует доступность кода (например, для printf()) и направляет на этот код инструкцию вызова.</p>
<empty-line/>
<p>Здесь модули ядра тоже отличаются. В примере “Hello world” вы могли заметить, что мы использовали функцию pr_info, но не включали стандартную библиотеку ввода-вывода. Причина в том, что модули – это объектные файлы, чьи символы разрешаются при выполнении insmod или modprobe.</p>
<empty-line/>
<p> Определение для символов поступает из самого ядра. Единственными внешними функциями, которые можно использовать, являются те, что предоставляет ядро. Если вам интересно узнать, какие символы ваше ядро экспортировало, загляните в /proc/kallsyms.</p>
<empty-line/>
<p>При всём при этом нужно помнить о различии между библиотечными функциями и системными вызовами. Библиотечные функции работают на более высоком уровне, выполняясь полностью в пользовательском пространстве и предоставляя программисту более удобный интерфейс для доступа к функциям, которые и совершают реальную работу – системным вызовам. Эти вызовы, в свою очередь, выполняются в режиме ядра от имени пользователя и предоставляются самим ядром.</p>
<empty-line/>
<p>Библиотечная функция printf() может выглядеть как обобщённая функция вывода, но на деле она лишь форматирует данные в строки и записывает эти строчные данные с помощью низкоуровневого системного вызова write, который затем отправляет их в стандартный вывод.</p>
<empty-line/>
<p>Хотите увидеть, какие системные вызовы совершает printf()? Легко! Скомпилируйте следующую программу с помощью gcc -Wall -o hello hello.c:</p>
<empty-line/>
<p><strong>#include </strong><strong>&lt;stdio.h&gt;</strong></p>
<p><strong>int</strong> <strong>main</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>printf</strong><strong>(</strong><strong>"hello"</strong><strong>);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<empty-line/>
<p>Запустите исполняемый файл командой strace ./hello. Впечатлены? Каждая строка, которую вы видите, соответствует системному вызову. <a l:href="https://strace.io/"><emphasis>strace</emphasis></a> – это удобная утилита, сообщающая подробности о том, какие системные вызовы совершает программа, включая то, какие аргументы эти вызовы содержат и какие результаты возвращают.</p>
<empty-line/>
<p>Это невероятно ценный инструмент, позволяющий выяснять, к каким файлам обращается программа. Ближе к концу вы увидите строку вроде write(1, "hello", 5hello). Вот оно – лицо, скрытое за маской printf().</p>
<empty-line/>
<p>Вы можете быть незнакомы с write(), поскольку большинство людей для файлового ввода-вывода используют библиотечные функции (например, fopen, fputs, fclose).</p>
<empty-line/>
<p>Если так и есть, то рекомендую заглянуть в мануал, man 2 write. Второй раздел в нём посвящён системным вызовам (вроде kill() и read()). Третий раздел описывает библиотечные вызовы (вроде cosh() и random()), с которыми вы наверняка уже более знакомы.</p>
<empty-line/>
<p>Вы даже можете писать модули на замену системных вызовов ядра, чем мы вскоре и займёмся. Взломщики зачастую используют подобные приёмы для бэкдоров или троянов, но вы можете создавать собственные модули из более доброжелательных побуждений, например, чтобы ядро писало “Tee hee, that tickles!” (Хи-хи, щекотно!) каждый раз, когда кто-то пытается удалить в системе файл.</p>
<empty-line/>
<p>▍ 5.3 Пользовательское пространство и пространство ядра</p>
<empty-line/>
<p>Ядро (по своей сути), регулирует доступ к ресурсам, будь то видеокарта, жёсткий диск или память. При этом программы зачастую соперничают за право использовать один и тот же ресурс. Как только я сохранил документ, updatedb начала обновлять локальную базу данных. Мой сеанс VIM и updatedb используют жёсткий диск конкурентно. Ядру необходимо сохранять во всём этом порядок, а не давать пользователям доступ к ресурсам в любой момент, когда им вздумается.</p>
<empty-line/>
<p>В связи с этим ЦПУ может работать в нескольких режимах. Каждый режим даёт определённый уровень свободы действий в системе. В архитектуре 80386 есть 4 таких режима, называемых кольцами защиты. В Unix используется только два таких кольца: внутреннее (кольцо 0, также известное как «режим супервизора», в котором допустимы все действия) и внешнее, называемое «режим пользователя».</p>
<empty-line/>
<p>Вспомним разговор о библиотечных и системных вызовах. Обычно мы используем библиотечную функцию в режиме пользователя. Эта библиотечная функция, в свою очередь, совершает один или более системных вызовов, которые выполняют от её имени действия, но делают это уже в режиме супервизора, поскольку являются частью самого ядра. Как только системный вызов завершает задачу, он делает возврат, и выполнение передаётся обратно в режим пользователя.</p>
<empty-line/>
<p>▍ 5.4 Пространство имён</p>
<empty-line/>
<p>Когда вы пишете небольшую программу Си, то используете удобные переменные, которые будут иметь смысл для пользователя. Если же, напротив, вы пишете подпрограммы, которые станут частью более крупной задачи, то любые используемые глобальные переменные являются частью коллекции глобальных переменных других людей, в связи с чем иногда могут возникать коллизии между их имён. Когда в программе используется множество глобальных переменных, которые недостаточно значительны, чтобы проводить между ними различие, у нас получается загрязнение пространства имён. В крупных проектах необходимо стремиться запоминать зарезервированные имена и вырабатывать схему для именования уникальных переменных и символов.</p>
<empty-line/>
<p>При написании кода ядра даже малейший модуль будет залинкован со всем ядром, так что это определённо важно. Проще всего в таком случае объявлять все переменные статическими и использовать для символов грамотные префиксы. По соглашению все префиксы в ядре пишутся в нижнем регистре. Если же вы не хотите объявлять что-либо статично, то другой вариант – объявить таблицу символов и зарегистрировать её с помощью ядра. Чуть позже мы об этом поговорим.</p>
<empty-line/>
<p>В файле <emphasis>/proc/kallsyms</emphasis> хранятся все символы, о которых ядро знает, и которые, благодаря этому, являются доступными для модулей, поскольку находятся в едином пространстве кода ядра.</p>
<empty-line/>
<p>▍ 5.5 Кодовое пространство</p>
<empty-line/>
<p>Управление памятью является очень сложной темой, и большая часть книги <a l:href="https://www.oreilly.com/library/view/understanding-the-linux/0596005652/">Understanding The Linux Kernel</a> издательства O’Reilly посвящено именно ей. Мы не ставим задачу стать экспертами в этой области, но для того, чтобы даже задуматься над написанием реальных модулей нам необходимо знать пару фактов.</p>
<empty-line/>
<p>Если вы ещё не думали о том, что в самом деле значит segfault (ошибка сегментации), то можете удивиться, услышав, что в действительности указатели не указывают на области памяти, по крайней мере, на реальные. При создании процесса ядро выделяет часть реальной физической памяти и передаёт её этому процессу для размещения в ней выполняемого кода, переменных, стека, кучи и прочих вещей, о которых должен знать специалист по информатике.</p>
<empty-line/>
<p>Эта память начинается с 0х00000000 и простирается до необходимых значений. Поскольку область памяти для любых двух процессов не пересекается, все процессы, которые могут обращаться к адресу памяти, скажем 0xbffff978, будут обращаться к разным областям реальной физической памяти. Они будут обращаться к индексу 0xbffff978, указывающему на некое смещение в области памяти, выделенной конкретно для этого процесса. В большинстве случаев процесс вроде нашей программы “Hello World” не может получить доступ к пространству другого процесса, хотя для этого есть определённые способы, о которых мы поговорим позже.</p>
<empty-line/>
<p>У ядра также есть собственная область памяти. Поскольку модуль является кодом, который может внедряться в ядро и извлекаться из него (в противоположность полуавтономному объекту), он использует кодовое пространство ядра, не имея собственного. Следовательно, если ваш модуль допускает ошибку сегментации, то и с ядром происходит то же самое. И если вы начнёте производить запись поверх данных в результате ошибки смещения на единицу, то происходить это будет поверх данных (или кода) ядра. На деле это даже хуже, чем звучит, так что будьте очень осторожны.</p>
<empty-line/>
<p>Кстати, хочу отметить, что описанное выше касается любой операционной системы, использующей монолитное ядро. Это не совсем то же, что «встраивание всех модулей в ядро», хотя суть аналогична. Существует такое понятие, как микроядра, которые имеют модули, получающие собственное кодовое пространство. Примерами таких микроядер являются <a l:href="https://www.gnu.org/software/hurd/">GNU Hurd</a> и <a l:href="https://fuchsia.dev/fuchsia-src/concepts/kernel">Zircon</a>.</p>
<empty-line/>
<p>▍ 5.6 Драйверы устройств</p>
<empty-line/>
<p>Одним из классов модулей являются драйверы устройств, которые предоставляют функциональность для оборудования вроде последовательных портов. В Unix каждый элемент оборудования представлен файлом устройства, расположенным в <emphasis>/dev</emphasis> и предоставляющим средства для связи с этим оборудованием. Драйвер устройства обеспечивает связь со стороны пользовательской программы. Например, драйвер звуковой карты <emphasis>es1370.ko</emphasis> может подключать файл устройства <emphasis>/dev/sound</emphasis> к звуковой карте Ensoniq IS1370. В результате программа в пользовательском пространстве, например, <emphasis>mp3blaster</emphasis>, может использовать <emphasis>/dev/sound</emphasis>, даже не зная, какая именно звуковая карта установлена.</p>
<p>Рассмотрим некоторые файлы устройств. Ниже приведены их примеры, которые представляют первые три раздела на ведущем HDD:</p>
<empty-line/>
<p><strong>$ ls -l /dev/hda[1-3]</strong></p>
<p><strong>brw-rw----  1 root  disk  3, 1 Jul  5  2000 /dev/hda1</strong></p>
<p><strong>brw-rw----  1 root  disk  3, 2 Jul  5  2000 /dev/hda2</strong></p>
<p><strong>brw-rw----  1 root  disk  3, 3 Jul  5  2000 /dev/hda3</strong></p>
<empty-line/>
<p>Обратите внимание на числа, отделённые запятой. Первое называется старшим (major) номером устройства, а второе младшим (minor). Старший номер сообщает, какой драйвер используется для доступа к оборудованию. Каждому драйверу присваивается уникальный старший номер.</p>
<empty-line/>
<p>Все файлы устройств с одинаковым старшим номером управляются одним драйвером. Выше мы видим в качестве таких номеров три 3, поскольку всеми этими устройствами управляет один драйвер.</p>
<empty-line/>
<p>При этом по младшим номерам драйвер отличает один управляемый им компонент оборудования от другого. В примере выше, несмотря на то что все три устройства управляются одним драйвером, их младшие номера отличаются, поскольку этот драйвер видит их как разные компоненты оборудования.</p>
<empty-line/>
<p>Устройства делятся на два типа: блочные и символьные. Отличие между ними в том, что блочные имеют буфер для запросов, благодаря чему могут выбирать наилучший порядок, в котором на эти запросы отвечать.</p>
<empty-line/>
<p>Это важно в случае устройств хранения, когда получается быстрее считывать/записывать близкорасположенные сектора, нежели те, что удалены друг от друга.</p>
<empty-line/>
<p>Ещё одним отличием является то, что блочные устройства могут получать вход и возвращать выход только блоками (чей размер может отличаться в зависимости от устройства), а символьным дозволено использовать любое необходимое им количество байтов. Большинство устройств являются именно символьными, поскольку им не требуется подобная буферизация, и они не работают с фиксированным размером блоков.</p>
<empty-line/>
<p>Понять, для какого устройства используется файл устройства – блочного или символьного – можно по первому символу вывода команды ls -l. Если это b, значит — устройство блочное, а если c, значит — символьное. Приведённые выше устройства все являются блочными, а вот несколько символьных (последовательные порты):</p>
<empty-line/>
<p><strong>crw-rw----  1 root  dial 4, 64 Feb 18 23:34 /dev/ttyS0</strong></p>
<p><strong>crw-r-----  1 root  dial 4, 65 Nov 17 10:26 /dev/ttyS1</strong></p>
<p><strong>crw-rw----  1 root  dial 4, 66 Jul  5  2000 /dev/ttyS2</strong></p>
<p><strong>crw-rw----  1 root  dial 4, 67 Jul  5  2000 /dev/ttyS3</strong></p>
<empty-line/>
<p>Если хотите увидеть, какие устройствам были присвоены старшие номера, можете заглянуть в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/admin-guide/devices.txt">Documentation/admin-guide/devices.txt</a>.</p>
<empty-line/>
<p>При установке системы все эти файлы устройств создавались командой mknod. Для создания нового символьного устройства под именем coffee со старшим/младшим номерам 12/2 просто выполните mknod /dev/coffee c 12 2.</p>
<empty-line/>
<p>Вам не обязательно помещать файлы устройств в <emphasis>/dev</emphasis>, но того требует соглашение. Линукс размещает эти файлы в <emphasis>/dev</emphasis>, и вам стоит делать так же. Однако при создании файла устройства для тестирования вполне допустимо разместить его в рабочем каталоге, где вы компилируете модуль ядра. Только не забудьте перенести его в нужное место, когда закончите написание драйвера.</p>
<empty-line/>
<p>Напоследок хочу дополнительно прояснить момент, который может быть неочевиден из пояснения выше. Когда происходит обращение к файлу устройства, ядро по его старшему номеру определяет, какой драйвер нужно использовать для обработки этого обращения. То есть ядру не обязательно использовать, или даже знать, младший номер. Этот номер интересует лишь драйвер устройства, который использует его для различения отдельных компонент оборудования.</p>
<empty-line/>
<p>Кстати, когда я говорю «оборудование», то подразумеваю несколько более абстрактное понятие, нежели какая-нибудь PCI-карта, которую вы держите в руках. Взгляните на эти два файла устройств:</p>
<empty-line/>
<p><strong>$ ls -l /dev/sda /dev/sdb</strong></p>
<p><strong>brw-rw---- 1 root disk 8,  0 Jan  3 09:02 /dev/sda</strong></p>
<p><strong>brw-rw---- 1 root disk 8, 16 Jan  3 09:02 /dev/sdb</strong></p>
<empty-line/>
<p>Теперь, глядя на них, вы можете сходу понять, что они являются блочными устройствами и обрабатываются одним драйвером. Иногда два файла устройств с одним старшим, но разными младшими номерами на деле могут представлять один и тот же компонент оборудования.</p>
<empty-line/>
<p>Так что имейте в виду, что слово «оборудование» в этом пособии может иметь весьма абстрактное значение.</p>
<empty-line/>
<p><strong>6. Драйверы символьных устройств</strong></p>
<empty-line/>
<p>▍ 6.1 Структура file_operations</p>
<empty-line/>
<p>Структура file_operations находится в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h"><emphasis>include/linux/fs.h</emphasis></a> и содержит указатели на определённые драйвером функции, которые выполняют различные действия с устройством. Каждое поле этой структуры соответствует адресу некой функции, определённой драйвером для обработки операции запроса.</p>
<empty-line/>
<p>Например, каждый символьный драйвер должен определять функцию, считывающую данные с устройства. Структура file_operations содержит адрес функции модуля, которая выполняет эту операцию.</p>
<empty-line/>
<p>Вот как это определение выглядит в ядре 5.4:</p>
<empty-line/>
<p><strong>struct</strong> <strong>file_operations</strong><strong> {</strong></p>
<p>    <strong>struct</strong> <strong>module</strong><strong> *</strong><strong>owner</strong><strong>;</strong></p>
<p>    <strong>loff_t</strong><strong> (*llseek) (struct file *, </strong><strong>loff_t</strong><strong>, </strong><strong>int</strong><strong>);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*read) (struct file *, </strong><strong>char</strong><strong> __user *, </strong><strong>size_t</strong><strong>, </strong><strong>loff_t</strong><strong> *);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*write) (struct file *, </strong><strong>const</strong> <strong>char</strong><strong> __user *, </strong><strong>size_t</strong><strong>, </strong><strong>loff_t</strong><strong> *);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*read_iter) (struct kiocb *, struct iov_iter *);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*write_iter) (struct kiocb *, struct iov_iter *);</strong></p>
<p>    <strong>int</strong><strong> (*iopoll)(struct kiocb *kiocb, </strong><strong>bool</strong><strong> spin);</strong></p>
<p>    <strong>int</strong><strong> (*iterate) (struct file *, struct dir_context *);</strong></p>
<p>    <strong>int</strong><strong> (*iterate_shared) (struct file *, struct dir_context *);</strong></p>
<p>    <strong>__poll_t</strong><strong> (*poll) (struct file *, struct poll_table_struct *);</strong></p>
<p>    <strong>long</strong><strong> (*unlocked_ioctl) (struct file *, </strong><strong>unsigned</strong> <strong>int</strong><strong>, </strong><strong>unsigned</strong> <strong>long</strong><strong>);</strong></p>
<p>    <strong>long</strong><strong> (*compat_ioctl) (struct file *, </strong><strong>unsigned</strong> <strong>int</strong><strong>, </strong><strong>unsigned</strong> <strong>long</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*mmap) (struct file *, struct vm_area_struct *);</strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> mmap_supported_flags;</strong></p>
<p>    <strong>int</strong><strong> (*open) (struct inode *, struct file *);</strong></p>
<p>    <strong>int</strong><strong> (*flush) (struct file *, </strong><strong>fl_owner_t</strong><strong> id);</strong></p>
<p>    <strong>int</strong><strong> (*release) (struct inode *, struct file *);</strong></p>
<p>    <strong>int</strong><strong> (*fsync) (struct file *, </strong><strong>loff_t</strong><strong>, </strong><strong>loff_t</strong><strong>, </strong><strong>int</strong><strong> datasync);</strong></p>
<p>    <strong>int</strong><strong> (*fasync) (</strong><strong>int</strong><strong>, struct file *, </strong><strong>int</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*lock) (struct file *, </strong><strong>int</strong><strong>, struct file_lock *);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*sendpage) (struct file *, struct page *, </strong><strong>int</strong><strong>, </strong><strong>size_t</strong><strong>, </strong><strong>loff_t</strong><strong> *, </strong><strong>int</strong><strong>);</strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> (*get_unmapped_area)(struct file *, </strong><strong>unsigned</strong> <strong>long</strong><strong>, </strong><strong>unsigned</strong> <strong>long</strong><strong>, </strong><strong>unsigned</strong> <strong>long</strong><strong>, </strong><strong>unsigned</strong> <strong>long</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*check_flags)(</strong><strong>int</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*flock) (struct file *, </strong><strong>int</strong><strong>, struct file_lock *);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*splice_write)(struct pipe_inode_info *, struct file *, </strong><strong>loff_t</strong><strong> *, </strong><strong>size_t</strong><strong>, </strong><strong>unsigned</strong> <strong>int</strong><strong>);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*splice_read)(struct file *, </strong><strong>loff_t</strong><strong> *, struct pipe_inode_info *, </strong><strong>size_t</strong><strong>, </strong><strong>unsigned</strong> <strong>int</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*setlease)(struct file *, </strong><strong>long</strong><strong>, struct file_lock **, </strong><strong>void</strong><strong> **);</strong></p>
<p>    <strong>long</strong><strong> (*fallocate)(struct file *file, </strong><strong>int</strong><strong> mode, </strong><strong>loff_t</strong><strong> offset,</strong></p>
<p>        <strong>loff_t</strong><strong> len);</strong></p>
<p>    <strong>void</strong><strong> (*show_fdinfo)(struct seq_file *m, struct file *f);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*copy_file_range)(struct file *, </strong><strong>loff_t</strong><strong>, struct file *,</strong></p>
<p>        <strong>loff_t</strong><strong>, </strong><strong>size_t</strong><strong>, </strong><strong>unsigned</strong> <strong>int</strong><strong>);</strong></p>
<p>    <strong>loff_t</strong><strong> (*remap_file_range)(struct file *file_in, </strong><strong>loff_t</strong><strong> pos_in,</strong></p>
<p><strong>             struct file *file_out, </strong><strong>loff_t</strong><strong> pos_out,</strong></p>
<p>             <strong>loff_t</strong><strong> len, </strong><strong>unsigned</strong> <strong>int</strong><strong> remap_flags);</strong></p>
<p>    <strong>int</strong><strong> (*fadvise)(struct file *, </strong><strong>loff_t</strong><strong>, </strong><strong>loff_t</strong><strong>, </strong><strong>int</strong><strong>);</strong></p>
<p><strong>} __randomize_layout;</strong></p>
<empty-line/>
<p>При этом некоторые операции драйвером не реализуются.</p>
<empty-line/>
<p>Например, драйверу, обрабатывающему видеокарту, не требуется выполнять чтение из структуры каталогов. Соответствующие записи в структуре file_operations должны быть установлены на NULL.</p>
<empty-line/>
<p>Для компилятора gcc есть расширение, которое упрощает присваивание значений в этой структуре. В современных драйверах оно встречается довольно часто, так что не удивляйтесь, если его увидите.</p>
<empty-line/>
<p>Так выглядит новый способ присваивания значений в структуре:</p>
<empty-line/>
<p><strong>struct</strong> <strong>file_operations</strong> <strong>fops</strong><strong> = {</strong></p>
<p><strong>    read: device_read,</strong></p>
<p><strong>    write: device_write,</strong></p>
<p><strong>    open: device_open,</strong></p>
<p><strong>    release: device_release</strong></p>
<p><strong>};</strong></p>
<empty-line/>
<p>Однако присваивать элементам структуры значения можно и в соответствии со стандартом С99, с помощью <a l:href="https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html">назначенных инициализаторов</a>. Причём такой способ определённо предпочтительнее, чем применение расширения GNU. Этот синтаксис желательно использовать в случае, когда стоит задача портировать драйвер, так как он обеспечит лучшую совместимость:</p>
<empty-line/>
<p><strong>struct</strong> <strong>file_operations</strong> <strong>fops</strong><strong> = {</strong></p>
<p><strong>    .read = device_read,</strong></p>
<p><strong>    .write = device_write,</strong></p>
<p><strong>    .open = device_open,</strong></p>
<p><strong>    .release = device_release</strong></p>
<p><strong>};</strong></p>
<empty-line/>
<p>Смысл ясен и вам нужно иметь в виду, что любой член структуры, которому вы не присвоите значение явно, gcc инициализирует с NULL.</p>
<p>Экземпляр struct file_operations, содержащий указатели на функции, используемые для реализации системных вызовов read, write, open и так далее, обычно называется fops.</p>
<empty-line/>
<p>Начиная с Linux v3.14, операции чтения, записи и поиска гарантированно потокобезопасны за счёт использования специальной блокировки f_pos, которая превращает обновление позиции файла во взаимное исключение. Благодаря этому, можно безопасно реализовывать подобные операции без излишних блокировок.</p>
<empty-line/>
<p>Начиная с Linux v5.6, была введена структура proc_ops, заменившая использование структуры file_operations при регистрации обработчиков процессов.</p>
<empty-line/>
<p>▍ 6.2 Структура file</p>
<empty-line/>
<p>Каждое устройство представлено в ядре структурой file, которая определяется в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h"><emphasis>include/linux/fs.h</emphasis></a>. Имейте ввиду, что file – это структура уровня ядра, которая никогда не появляется в программе пользовательского пространства. Это не то же самое, что FILE, который определяется glibc и никогда не встречается в функции пространства ядра. Кроме того, само имя структуры может сбивать с толку, так как представляет абстрактный открытый file, а не файл на диске, который представляется структурой inode.</p>
<empty-line/>
<p>Экземпляр структуры file обычно называется filp. Вы также увидите, что порой её называют структурой <emphasis>file object</emphasis> – пусть это не вводит вас в заблуждение.</p>
<empty-line/>
<p>Загляните в определение file. Большинство записей здесь, такие как struct dentry, не используются драйверами устройств, и их можно игнорировать. Причина в том, что драйверы не заполняют file непосредственно, а лишь используют содержащиеся в ней структуры, которые создаются где-то ещё.</p>
<empty-line/>
<p>▍ 6.3 Регистрация устройства</p>
<empty-line/>
<p>Как уже говорилось, обращение к символьным устройствам происходит через файлы устройств, обычно расположенные в <emphasis>/dev</emphasis>.</p>
<empty-line/>
<p>Тем не менее — при написании драйвера вполне допустимо поместить файл устройства в текущий рабочий каталог с тем условием, что по завершении он будет перенесён в <emphasis>/dev</emphasis>.</p>
<empty-line/>
<p>Старший номер сообщает, какой драйвер какой файл устройства обрабатывает.</p>
<empty-line/>
<p>Младший же номер используется только самим драйвером для определения конкретного устройства, с которым он работает.</p>
<empty-line/>
<p>Добавление драйвера в систему означает регистрацию его с помощью ядра. Это аналогично присваиванию ему старшего номера во время инициализации модуля и выполняется с помощью функции register_chrdev, определённой в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h"><emphasis>include/linux/fs.h</emphasis></a>.</p>
<empty-line/>
<p><strong>int</strong> <strong>register_chrdev</strong><strong>(</strong><strong>unsigned</strong> <strong>int</strong><strong> major, </strong><strong>const</strong> <strong>char</strong><strong> *name, struct file_operations *fops);</strong></p>
<p>Здесь unsigned major int является старшим номером, который мы хотим запросить, const char *name – это имя устройства в том виде, в котором оно отобразится в <emphasis>/proc/devices</emphasis>, а struct file_operations *fops – это указатель на таблицу file_operations для вашего драйвера. Отрицательное возвращаемое значение означает, что регистрация провалилась.</p>
<empty-line/>
<p>Заметьте, что мы не передавали в register_chrdev младший номер. Ещё раз напомню, что ядру он не важен, его использует только драйвер.</p>
<empty-line/>
<p>Следующий вопрос в том, как получить старший номер, не взяв случайно тот, что уже используется? Проще всего заглянуть в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/admin-guide/devices.txt">Documentation/admin-guide/devices.txt</a> и выбрать свободный. Но это будет не самый удачный способ, поскольку вы никогда не сможете быть уверены, что выбранный вами номер не окажется присвоен где-то позднее.</p>
<p>Решением будет попросить ядро присвоить динамический старший номер.</p>
<empty-line/>
<p>Если передать в register_chrdev старший номер 0, возвратным значением будет его динамически выделяемое значение. Недостаток такого решения в том, что не получится создать файл устройства наперёд, поскольку вы не будете знать, какой ему будет присвоен старший номер.</p>
<empty-line/>
<p>Выйти из ситуации можно несколькими путями:</p>
<empty-line/>
<p><strong>● </strong>номер может выводить сам драйвер, и мы будем создавать файл устройства вручную.</p>
<p><strong>● </strong>регистрируемое устройство будет иметь запись в <emphasis>/proc/devices</emphasis>, и мы сможем либо сами создать файл устройства, либо написать для этого специальный скрипт оболочки.</p>
<p><strong>● </strong>можно сделать и так, чтобы наш драйвер сам создавал файл устройства, используя функцию device_create после успешной регистрации, и device_destroy во время вызова cleanup_module.</p>
<empty-line/>
<p>Однако register_chrdev() будет занимать ряд младших номеров, связанных с заданным старшим. Поэтому с целью уменьшения лишних затрат при регистрации символьного устройства рекомендуется использовать интерфейс cdev. Этот более свежий интерфейс завершает регистрацию в два раздельных этапа. Во-первых, нам нужно зарегистрировать серию номеров устройств, что можно сделать с помощью register_chrdev_region или alloc_chrdev_region:</p>
<empty-line/>
<p><strong>int</strong> <strong>register_chrdev_region</strong><strong>(</strong><strong>dev_t</strong><strong> from, </strong><strong>unsigned</strong><strong> count, </strong><strong>const</strong> <strong>char</strong><strong> *name);</strong></p>
<p><strong>int</strong> <strong>alloc_chrdev_region</strong><strong>(</strong><strong>dev_t</strong><strong> *dev, </strong><strong>unsigned</strong><strong> baseminor, </strong><strong>unsigned</strong><strong> count, </strong><strong>const</strong> <strong>char</strong><strong> *name);</strong></p>
<p>Выбор одной из этих функций будет зависеть от того, известны ли вам старшие номера вашего устройства. Используйте register_chrdev_region, если знаете их, и alloc_chrdev_region, если хотите сделать их выделение динамическим.</p>
<empty-line/>
<p>Вторым этапом необходимо инициализировать для нашего символьного устройства структуру данных struct cdev и связать её с номерами устройства.</p>
<empty-line/>
<p>Эту инициализацию можно осуществить следующей последовательностью команд:</p>
<empty-line/>
<p><strong>struct</strong> <strong>cdev</strong><strong> *</strong><strong>my_dev</strong><strong> = </strong><strong>cdev_alloc</strong><strong>();</strong></p>
<p><strong>my_cdev-&gt;ops = &amp;my_fops;</strong></p>
<empty-line/>
<p>Тем не менее в стандартном сценарии struct cdev будет встроена в вашу собственную связанную с устройством структуру. В этом случае нам для инициализации необходима cdev_init.</p>
<empty-line/>
<p><strong>void</strong> <strong>cdev_init</strong><strong>(struct cdev *cdev, </strong><strong>const</strong><strong> struct file_operations *fops);</strong></p>
<empty-line/>
<p>По завершении инициализации можно добавить символьное устройства в систему с помощью cdev_add.</p>
<empty-line/>
<p><strong>int</strong> <strong>cdev_add</strong><strong>(struct cdev *p, </strong><strong>dev_t</strong><strong> dev, </strong><strong>unsigned</strong><strong> count);</strong></p>
<empty-line/>
<p>Пример использования этого интерфейса можно найти в <emphasis>ioctl.c</emphasis>, описанном в разделе 9.</p>
<empty-line/>
<p>▍ 6.4 Отмена регистрации устройства</p>
<empty-line/>
<p>Мы не можем позволить рут-пользователю извлекать (rmmod) модуль ядра в любой момент, когда ему это вздумается. Если извлечь модуль в то время, когда файл устройства будет открыт процессом, то использование этого файла приведёт к вызову из области памяти, где ранее находилась нужная функция (чтения/записи).</p>
<empty-line/>
<p>В лучшем случае, если никакой другой код в эту область ещё записан не был, мы просто получим неприятную ошибку. В худшем же в эту память уже мог быть загружен другой модуль, что приведёт к перескакиванию в середину уже иной функции внутри ядра, вызвав непредсказуемый и явно не радужный результат.</p>
<empty-line/>
<p>Как правило, когда вы хотите запретить какое-то действие, то возвращаете код ошибки (отрицательное число) из функции, которая это действие должна была выполнить. В случае с cleanup_module так сделать не получится, поскольку это пустая функция.</p>
<empty-line/>
<p>Тем не менее существует счётчик, который отслеживает, сколько процессов используют ваш модуль. Значение этого счётчика можно увидеть в 3 поле вывода команды cat /proc/modules или sudo lsmod. Если это не нуль, значит, rmmod провалится.</p>
<empty-line/>
<p>Имейте в виду, что проверять счётчик в cleanup_module не нужно, так как эта проверка будет выполнена за вас системным вызовом sys_delete_module, определённым в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/syscalls.h"><emphasis>include/linux/syscalls.h</emphasis></a>.</p>
<empty-line/>
<p>Этот счётчик не требуется использовать непосредственно, но <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/module.h"><emphasis>include/linux/module.h</emphasis></a> содержит функции, которые позволяют вам при необходимости увеличивать, уменьшать и отображать его:</p>
<empty-line/>
<p><strong>● </strong>try_module_get(THIS_MODULE): инкрементирует число активных обращений к текущему модулю;</p>
<p><strong>● </strong>module_put(THIS_MODULE): декрементирует число активных обращений к текущему модулю;</p>
<p><strong>● </strong>module_refcount(THIS_MODULE): возвращает число активных обращений к текущему модулю.</p>
<empty-line/>
<p>Важно поддерживать точное значение счётчика. Если вы вдруг утратите верный счёт, то уже не сможете выгрузить модуль, и останется единственный выход – перезагрузка. В процессе разработки модуля такая ситуация с вами рано или поздно неизбежно случится.</p>
<empty-line/>
<p>▍ 6.5 chardev.c</p>
<empty-line/>
<p>Код ниже создаёт символьный драйвер chardev. Можете сделать дамп его файла устройства.</p>
<empty-line/>
<p><strong>cat /proc/devices</strong></p>
<empty-line/>
<p>(Либо откройте этот файл программой), и драйвер добавит в него значение, указывающее количество раз, которое он был считан. Запись в этот файл (вроде echo "hi" &gt; /dev/hello) мы не поддерживаем, перехватывая такие попытки и сообщая пользователю, что данная операция недопустима.</p>
<empty-line/>
<p>Не беспокойтесь, если не видите, что мы делаем с данными, которые считываем в буфер – они просто считываются, и выводится сообщение, подтверждающее их получение.</p>
<empty-line/>
<p>В многопоточной среде без защиты параллельное обращение к одному участку памяти может привести к состоянию гонки и снизить производительность. В модуле ядра эта проблема может происходить в результате обращения нескольких экземпляров программ к общим ресурсам.</p>
<empty-line/>
<p>Решается она обеспечением индивидуального доступа. Мы используем атомарную инструкцию сравнения с обменом (CAS) для сохранения состояний CDEV_NOT_USED и CDEV_EXCLUSIVE_OPEN, чтобы определять, открыт ли в данный момент файл какой-либо программой. CAS сравнивает содержимое области памяти с ожидаемым значением и только в случае их совпадения изменяет содержимое этой памяти на нужное значение.</p>
<p>Подробнее о конкурентности читайте в разделе 12.</p>
<empty-line/>
<p>Код chardev.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * chardev.c: создаёт символьное устройство, которое сообщает, сколько</emphasis></strong></p>
<p><strong><emphasis> * раз происходило считывание из файла.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/cdev.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/delay.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/device.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/fs.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/irq.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/poll.h&gt;</strong></p>
<p><strong><emphasis>/*  Prototypes – обычно помещается в файл .h */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_open</strong><strong>(struct inode *, struct file *);</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_release</strong><strong>(struct inode *, struct file *);</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_read</strong><strong>(struct file *, </strong><strong>char</strong><strong> __user *, </strong><strong>size_t</strong><strong>, </strong><strong>loff_t</strong><strong> *);</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_write</strong><strong>(struct file *, </strong><strong>const</strong> <strong>char</strong><strong> __user *, </strong><strong>size_t</strong><strong>,</strong></p>
<p>                            <strong>loff_t</strong><strong> *);</strong></p>
<p><strong>#define SUCCESS 0</strong></p>
<p><strong>#define DEVICE_NAME </strong><strong>"chardev"</strong> <strong><emphasis>/* Имя устройства, как оно показано в /proc/devices   */</emphasis></strong></p>
<p><strong>#define BUF_LEN 80 </strong><strong><emphasis>/* Максимальная длина сообщения устройства. */</emphasis></strong></p>
<p><strong><emphasis>/* Глобальные переменные объявляются как static, поэтому являются глобальными в пределах файла. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong><strong> major; </strong><strong><emphasis>/* Старший номер, присвоенный драйверу устройства */</emphasis></strong></p>
<p><strong>enum</strong><strong> {</strong></p>
<p><strong>    CDEV_NOT_USED = </strong><strong>0</strong><strong>,</strong></p>
<p><strong>    CDEV_EXCLUSIVE_OPEN = </strong><strong>1</strong><strong>,</strong></p>
<p><strong>};</strong></p>
<p><strong><emphasis>/* Устройство открыто? Используется для предотвращения множественных обращений к устройству. */</emphasis></strong></p>
<p><strong>static</strong> <strong>atomic_t</strong><strong> already_open = ATOMIC_INIT(CDEV_NOT_USED);</strong></p>
<p><strong>static</strong> <strong>char</strong><strong> msg[BUF_LEN]; </strong><strong><emphasis>/* msg, которое устройство будет выдавать при запросе. */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>class</strong><strong> *</strong><strong>cls</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>chardev_fops</strong><strong> = {</strong></p>
<p><strong>    .read = device_read,</strong></p>
<p><strong>    .write = device_write,</strong></p>
<p><strong>    .open = device_open,</strong></p>
<p><strong>    .release = device_release,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>chardev_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    major = register_chrdev(</strong><strong>0</strong><strong>, DEVICE_NAME, &amp;chardev_fops);</strong></p>
<p>    <strong>if</strong><strong> (major &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_alert(</strong><strong>"Registering char device failed with %d\n"</strong><strong>, major);</strong></p>
<p>        <strong>return</strong><strong> major;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    pr_info(</strong><strong>"I was assigned major number %d.\n"</strong><strong>, major);</strong></p>
<p><strong>    cls = class_create(THIS_MODULE, DEVICE_NAME);</strong></p>
<p><strong>    device_create(cls, </strong><strong>NULL</strong><strong>, MKDEV(major, </strong><strong>0</strong><strong>), </strong><strong>NULL</strong><strong>, DEVICE_NAME);</strong></p>
<p><strong>    pr_info(</strong><strong>"Device created on /dev/%s\n"</strong><strong>, DEVICE_NAME);</strong></p>
<p>    <strong>return</strong><strong> SUCCESS;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>chardev_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    device_destroy(cls, MKDEV(major, </strong><strong>0</strong><strong>));</strong></p>
<p><strong>    class_destroy(cls);</strong></p>
<p>    <strong><emphasis>/* Отмена регистрации устройства. */</emphasis></strong></p>
<p><strong>    unregister_chrdev(major, DEVICE_NAME);</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Методы. */</emphasis></strong></p>
<p><strong><emphasis>/* Вызывается, когда процесс пытается открыть файл устройства, например</emphasis></strong></p>
<p><strong><emphasis> * "sudo cat /dev/chardev"</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_open</strong><strong>(struct inode *inode, struct file *file)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>static</strong> <strong>int</strong><strong> counter = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>if</strong><strong> (atomic_cmpxchg(&amp;already_open, CDEV_NOT_USED, CDEV_EXCLUSIVE_OPEN))</strong></p>
<p>        <strong>return</strong><strong> -EBUSY;</strong></p>
<p>    <strong>sprintf</strong><strong>(msg, </strong><strong>"I already told you %d times Hello world!\n"</strong><strong>, counter++);</strong></p>
<p><strong>    try_module_get(THIS_MODULE);</strong></p>
<p>    <strong>return</strong><strong> SUCCESS;</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Вызывается, когда процесс закрывает файл устройства. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_release</strong><strong>(struct inode *inode, struct file *file)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Теперь можно принимать следующий вызов. */</emphasis></strong></p>
<p><strong>    atomic_set(&amp;already_open, CDEV_NOT_USED);</strong></p>
<p>    <strong><emphasis>/* Декрементируйте число использований, иначе, открыв файл, вы уже</emphasis></strong></p>
<p><strong><emphasis>     * не сможете извлечь модуль.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    module_put(THIS_MODULE);</strong></p>
<p>    <strong>return</strong><strong> SUCCESS;</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Вызывается, когда процесс, который уже открыл файл устройства,</emphasis></strong></p>
<p><strong><emphasis> * пытается из него считать.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_read</strong><strong>(struct file *filp, </strong><strong><emphasis>/* см. include/linux/fs.h   */</emphasis></strong></p>
<p>                           <strong>char</strong><strong> __user *buffer, </strong><strong><emphasis>/* буфер для данных. */</emphasis></strong></p>
<p>                           <strong>size_t</strong><strong> length, </strong><strong><emphasis>/* длина буфера.   */</emphasis></strong></p>
<p>                           <strong>loff_t</strong><strong> *offset)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Количество байт, обычно записываемых в буфер. */</emphasis></strong></p>
<p>    <strong>int</strong><strong> bytes_read = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>const</strong> <strong>char</strong><strong> *msg_ptr = msg;</strong></p>
<p>    <strong>if</strong><strong> (!*(msg_ptr + *offset)) { </strong><strong><emphasis>/* мы находимся в конце сообщения. */</emphasis></strong></p>
<p><strong>        *offset = </strong><strong>0</strong><strong>; </strong><strong><emphasis>/* сброс смещения. */</emphasis></strong></p>
<p>        <strong>return</strong> <strong>0</strong><strong>; </strong><strong><emphasis>/* обозначение конца файла. */</emphasis></strong></p>
<p><strong>    }</strong></p>
<p><strong>    msg_ptr += *offset;</strong></p>
<p>    <strong><emphasis>/* Помещение данных в буфер. */</emphasis></strong></p>
<p>    <strong>while</strong><strong> (length &amp;&amp; *msg_ptr) {</strong></p>
<p>        <strong><emphasis>/* Буфер находится в пользовательском сегменте данных, а не в</emphasis></strong></p>
<p><strong><emphasis>         * сегменте ядра, поэтому присваивание "*" не сработает. Тут 133         * нужно использовать put_user, которая копирует данные из</emphasis></strong></p>
<p><strong><emphasis>         * сегмента ядра в пользовательский сегмент.</emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        put_user(*(msg_ptr++), buffer++);</strong></p>
<p><strong>        length--;</strong></p>
<p><strong>        bytes_read++;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    *offset += bytes_read;</strong></p>
<p>    <strong><emphasis>/* Большинство функций чтения возвращают количество байт, помещённых в буфер. */</emphasis></strong></p>
<p>    <strong>return</strong><strong> bytes_read;</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Вызывается, когда процесс производит запись в файл устройства: echo "hi" &gt; /dev/hello */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_write</strong><strong>(struct file *filp, </strong><strong>const</strong> <strong>char</strong><strong> __user *buff,</strong></p>
<p>                            <strong>size_t</strong><strong> len, </strong><strong>loff_t</strong><strong> *off)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_alert(</strong><strong>"Sorry, this operation is not supported.\n"</strong><strong>);</strong></p>
<p>    <strong>return</strong><strong> -EINVAL;</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(chardev_init);</strong></p>
<p><strong>module_exit(chardev_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 6.6 Создание модулей для нескольких версий ядра</p>
<empty-line/>
<p>Системные вызовы, являющиеся основным интерфейсом, который ядро раскрывает процессам, обычно среди разных версий сохраняются. Иногда могут добавляться новые системные вызовы, но старые, как правило, продолжают работать по-прежнему. Это необходимо для обратной совместимости – новая версия ядра не должна нарушать работу стандартных процессов. Файлы устройств в большинстве случаев также остаются неизменными. С другой стороны, внутренние интерфейсы ядра между версиями вполне могут меняться.</p>
<empty-line/>
<p>Различные версии ядра определённо имеют между собой отличия, и если вам нужна поддержка нескольких версий, то придётся писать дополнительные директивы компиляции. Делается это путём сопоставления макроса LINUX_VERSION_CODE с макросом KERNEL_VERSION. В версии a.b.c ядра значение этого макроса будет .</p>
<empty-line/>
<p><strong>7. Файловая система /proc</strong></p>
<empty-line/>
<p>В Linux существует дополнительный механизм, позволяющий ядру и модулям отправлять информацию процессам – файловая система /proc. Изначально созданная для реализации удобного доступа к информации о процессах (отсюда и название), теперь она используется каждым элементом ядра, обладающим полезной информацией. Например, /proc/modules предоставляет список модулей, а /proc/meminfo собирает статистику потребления памяти.</p>
<empty-line/>
<p>Способ использования procfs очень схож с использованием драйверов устройств – сперва создается структура со всей информацией, необходимой для файла /proc, включая указатели на любые функции-обработчики (в нашем случае такая всего одна, вызываемая при попытке считывания из файла /proc). Далее init_module регистрирует эту структуру с помощью ядра, а cleanup_module ее регистрацию снимает.</p>
<empty-line/>
<p>Обычные файловые системы располагаются на диске, а не просто в памяти (где находится /proc), и в этом случае номером индексного дескриптора (inode) является указатель на область диска, где располагается inode файла. Этот inode содержит информацию о файле, например разрешения, а также указатель на область или области диска, где находятся данные этого файла.</p>
<empty-line/>
<p>Поскольку при открытии и закрытии файла вызов мы не получаем, в этом модуле нет места, куда можно было бы внести try_module_get и module_put, и если при открытом файле вдруг удалить модуль, то это чревато последствиями.</p>
<empty-line/>
<p>Вот простой пример, демонстрирующий использование файла /proc. Это Hello World для файловой системы /proc. Здесь у нас три части: создание файла /proc/helloworld в функции init_module, возвращение значения (и буфера) /proc/helloworld в функции обратного вызова procfile_read при считывании этого файла и его удаление в функции cleanup_module.</p>
<empty-line/>
<p>Указанный файл создается при загрузке модуля функцией proc_create. Возвращаемым значением здесь окажется struct proc_dir_entry, которое будет использовано для конфигурирования /proc/helloworld (например, указания владельца этого файла). Нулевое возвращаемое значение означает провал создания.</p>
<empty-line/>
<p>При каждом считывании /proc/helloworld вызывается функция procfile_read. У этой функции есть два важных параметра: буфер (второй параметр) и смещение (четвертый). Содержимое буфера будет возвращаться приложению, которое его считывает (например, команде cat).</p>
<p>Смещение – это текущая позиция файла. Если возвращаемое значение функции не нулевое, тогда эта функция вызывается повторно. Так что будьте с ней внимательны – если она никогда не вернет нуль, то будет вызываться бесконечно.</p>
<empty-line/>
<p>Код procfs1.c:</p>
<empty-line/>
<p><strong>$ cat /proc/helloworld</strong></p>
<p><strong>HelloWorld!</strong></p>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * procfs1.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/proc_fs.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 6, 0) </strong></p>
<p><strong>#define HAVE_PROC_OPS </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#define procfs_name </strong><strong>"helloworld"</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>proc_dir_entry</strong><strong> *</strong><strong>our_proc_file</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>procfile_read</strong><strong>(struct file *filePointer, </strong><strong>char</strong><strong> __user *buffer, </strong></p>
<p>                             <strong>size_t</strong><strong> buffer_length, </strong><strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>char</strong><strong> s[</strong><strong>13</strong><strong>] = </strong><strong>"HelloWorld!\n"</strong><strong>; </strong></p>
<p>    <strong>int</strong><strong> len = </strong><strong>sizeof</strong><strong>(s); </strong></p>
<p>    <strong>ssize_t</strong><strong> ret = len; </strong></p>
<p>    <strong>if</strong><strong> (*offset &gt;= len || copy_to_user(buffer, s, len)) { </strong></p>
<p><strong>        pr_info(</strong><strong>"copy_to_user failed\n"</strong><strong>); </strong></p>
<p><strong>        ret = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>    } </strong><strong>else</strong><strong> { </strong></p>
<p><strong>        pr_info(</strong><strong>"procfile read %s\n"</strong><strong>, filePointer-&gt;f_path.dentry-&gt;d_name.name); </strong></p>
<p><strong>        *offset += len; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong><strong> ret; </strong></p>
<p><strong>} </strong></p>
<p><strong>#ifdef HAVE_PROC_OPS </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>proc_ops</strong> <strong>proc_file_fops</strong><strong> = { </strong></p>
<p><strong>    .proc_read = procfile_read, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#else </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>proc_file_fops</strong><strong> = { </strong></p>
<p><strong>    .read = procfile_read, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>procfs1_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    our_proc_file = proc_create(procfs_name, </strong><strong>0644</strong><strong>, </strong><strong>NULL</strong><strong>, &amp;proc_file_fops); </strong></p>
<p>    <strong>if</strong><strong> (</strong><strong>NULL</strong><strong> == our_proc_file) { </strong></p>
<p><strong>        proc_remove(our_proc_file); </strong></p>
<p><strong>        pr_alert(</strong><strong>"Error:Could not initialize /proc/%s\n"</strong><strong>, procfs_name); </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    pr_info(</strong><strong>"/proc/%s created\n"</strong><strong>, procfs_name); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>procfs1_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    proc_remove(our_proc_file); </strong></p>
<p><strong>    pr_info(</strong><strong>"/proc/%s removed\n"</strong><strong>, procfs_name); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(procfs1_init); </strong></p>
<p><strong>module_exit(procfs1_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 7.1 Структура proc_ops</p>
<empty-line/>
<p>В Linux v5.6+ структура proc_ops определена в include/linux/proc_fs.h. В более старых версиях она использовала file_operations для реализации в /proc пользовательских хуков. Однако в ней содержатся некоторые члены, которые в VFS не нужны, и всякий раз, когда VFS расширяет набор file_operations, код /proc раздувается. С другой стороны, этой структурой экономилось не только пространство, но и некоторые операции, что повышало ее быстродействие.</p>
<empty-line/>
<p> Например, файл, который никогда не исчезает в /proc, может устанавливать proc_flag как PROC_ENTRY_PERMANENT, экономя в каждой последовательности открытия/чтения/закрытия 2 атомарных операции: 1 выделение памяти и 1 освобождение.</p>
<empty-line/>
<p>▍ 7.2 Считывание и запись файла /proc</p>
<empty-line/>
<p>Выше был описан очень простой пример использования /proc, в котором мы просто считывали файл /proc/helloworld. При этом в /proc также можно производить запись. Принцип тот же, что и в случае со считыванием – при записи в файл /proc вызывается соответствующая функция.</p>
<empty-line/>
<p>Но здесь есть небольшое отличие – данные поступают от пользователя – значит их нужно импортировать из пользовательского пространства в пространство ядра (с помощью copy_from_user или get_user).</p>
<empty-line/>
<p>Причина использования copy_from_user либо get_user в том, что память Linux сегментирована (на некоторых процессорах с архитектурой Intel это может быть не так).</p>
<empty-line/>
<p>То есть указатель сам по себе ссылается не на уникальную область в памяти, а на область в ее сегменте, и для использования этой памяти необходимо знать, что это за сегмент. Существует один сегмент памяти для ядра и по одному для каждого из процессов.</p>
<empty-line/>
<p>Процессам доступен только их собственный сегмент памяти, поэтому при написании стандартных программ для выполнения в качестве процессов беспокоится о сегментах не приходится.</p>
<empty-line/>
<p>Когда вы создаете модуль ядра, то обычно вам нужно иметь доступ к сегменту памяти ядра, и это обрабатывается системой автоматически.</p>
<empty-line/>
<p>Однако, когда содержимое буфера памяти необходимо передать между выполняющимся процессом и ядром, функция ядра получает указатель на буфер памяти, находящийся в сегменте процесса. К этой памяти позволяют обращаться макросы put_user и get_user, но обрабатывают эти функции только один символ. Для обработки нескольких можно задействовать copy_to_user и copy_from_user.</p>
<empty-line/>
<p>Поскольку буфер (в функции чтения или записи) находится в пространстве ядра, для функции записи данные необходимо импортировать, потому что они поступают из пространства пользователя. Функции чтения это не касается, так как в этом случае данные уже находятся в пространстве ядра.</p>
<empty-line/>
<p>Код procfs2.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * procfs2.c - создание "файла" в /proc </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Для работы с ядром. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Для модулей. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/proc_fs.h&gt; /* Для использования procfs.*/ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; /* Для copy_from_user. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 6, 0) </strong></p>
<p><strong>#define HAVE_PROC_OPS </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#define PROCFS_MAX_SIZE 1024 </strong></p>
<p><strong>#define PROCFS_NAME </strong><strong>"buffer1k"</strong></p>
<p><strong><emphasis>/* Эта структура содержит информацию о файле /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>proc_dir_entry</strong><strong> *</strong><strong>our_proc_file</strong><strong>; </strong></p>
<p><strong><emphasis>/* Этот буфер используется под хранение символа для данного модуля. */</emphasis></strong></p>
<p><strong>static</strong> <strong>char</strong><strong> procfs_buffer[PROCFS_MAX_SIZE]; </strong></p>
<p><strong><emphasis>/* Размер буфера. */</emphasis></strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> procfs_buffer_size = </strong><strong>0</strong><strong>; </strong></p>
<p><strong><emphasis>/* Эта функция вызывается при считывании файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>procfile_read</strong><strong>(struct file *filePointer, </strong><strong>char</strong><strong> __user *buffer, </strong></p>
<p>                             <strong>size_t</strong><strong> buffer_length, </strong><strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>char</strong><strong> s[</strong><strong>13</strong><strong>] = </strong><strong>"HelloWorld!\n"</strong><strong>; </strong></p>
<p>    <strong>int</strong><strong> len = </strong><strong>sizeof</strong><strong>(s); </strong></p>
<p>    <strong>ssize_t</strong><strong> ret = len; </strong></p>
<p>    <strong>if</strong><strong> (*offset &gt;= len || copy_to_user(buffer, s, len)) { </strong></p>
<p><strong>        pr_info(</strong><strong>"copy_to_user failed\n"</strong><strong>); </strong></p>
<p><strong>        ret = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>    } </strong><strong>else</strong><strong> { </strong></p>
<p><strong>        pr_info(</strong><strong>"procfile read %s\n"</strong><strong>, filePointer-&gt;f_path.dentry-&gt;d_name.name); </strong></p>
<p><strong>        *offset += len; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong><strong> ret; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается при записи файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>procfile_write</strong><strong>(struct file *file, </strong><strong>const</strong> <strong>char</strong><strong> __user *buff, </strong></p>
<p>                              <strong>size_t</strong><strong> len, </strong><strong>loff_t</strong><strong> *off) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    procfs_buffer_size = len; </strong></p>
<p>    <strong>if</strong><strong> (procfs_buffer_size &gt; PROCFS_MAX_SIZE) </strong></p>
<p><strong>        procfs_buffer_size = PROCFS_MAX_SIZE; </strong></p>
<p>    <strong>if</strong><strong> (copy_from_user(procfs_buffer, buff, procfs_buffer_size)) </strong></p>
<p>        <strong>return</strong><strong> -EFAULT; </strong></p>
<p><strong>    procfs_buffer[procfs_buffer_size &amp; (PROCFS_MAX_SIZE - </strong><strong>1</strong><strong>)] = </strong><strong>'\0'</strong><strong>; </strong></p>
<p><strong>    pr_info(</strong><strong>"procfile write %s\n"</strong><strong>, procfs_buffer); </strong></p>
<p>    <strong>return</strong><strong> procfs_buffer_size; </strong></p>
<p><strong>} </strong></p>
<p><strong>#ifdef HAVE_PROC_OPS </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>proc_ops</strong> <strong>proc_file_fops</strong><strong> = { </strong></p>
<p><strong>    .proc_read = procfile_read, </strong></p>
<p><strong>    .proc_write = procfile_write, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#else </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>proc_file_fops</strong><strong> = { </strong></p>
<p><strong>    .read = procfile_read, </strong></p>
<p><strong>    .write = procfile_write, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>procfs2_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    our_proc_file = proc_create(PROCFS_NAME, </strong><strong>0644</strong><strong>, </strong><strong>NULL</strong><strong>, &amp;proc_file_fops); </strong></p>
<p>    <strong>if</strong><strong> (</strong><strong>NULL</strong><strong> == our_proc_file) { </strong></p>
<p><strong>        proc_remove(our_proc_file); </strong></p>
<p><strong>        pr_alert(</strong><strong>"Error:Could not initialize /proc/%s\n"</strong><strong>, PROCFS_NAME); </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    pr_info(</strong><strong>"/proc/%s created\n"</strong><strong>, PROCFS_NAME); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>procfs2_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    proc_remove(our_proc_file); </strong></p>
<p><strong>    pr_info(</strong><strong>"/proc/%s removed\n"</strong><strong>, PROCFS_NAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(procfs2_init); </strong></p>
<p><strong>module_exit(procfs2_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 7.3 Управление файлом /proc с помощью стандартной файловой системы</p>
<empty-line/>
<p>Мы уже видели, как считывать и записывать файл в procfs с помощью интерфейса /proc. Но управлять такими файлами также можно и с помощью inode. Основная суть здесь в использовании продвинутых функций, таких как разрешения.</p>
<empty-line/>
<p>В Linux есть стандартный механизм для регистрации файловой системы. Поскольку у каждой такой системы должны быть собственные функции для обработки операций с inode и файлами, существует особая структура для хранения указателей на эти функции, struct inode_operations, которая также включает указатель на struct proc_ops.</p>
<empty-line/>
<p>Отличает операции с inode от операций с файлами то, что последние работают непосредственно с самими файлами, а первые со способами обращения к файлу, например создавая на него ссылки.</p>
<empty-line/>
<p>В /proc при каждой регистрации нового файла мы допустили указание, какая struct inode_operations будет использоваться для доступа к нему. Этот механизм мы и используем — struct inode_operations, которая включает указатель на struct proc_ops, которая, в свою очередь, включает указатели на наши функции procf_read и procfs_write.</p>
<empty-line/>
<p>Еще один интересный момент – это функция module_permission. Она вызывается всякий раз, когда процесс пытается сделать что-то с файлом /proc, и может решать, допускать его к этому файлу или нет.</p>
<empty-line/>
<p>Сейчас она основана лишь на операции и uid текущего пользователя (в текущей ситуации это доступно из указателя на структуру, которая включает информацию о выполняющемся в данный момент процессе), но также может основываться и на чем-то другом, например на том, какие еще процессы работают с тем же файлом, на времени дня или последнем полученном вводе.</p>
<empty-line/>
<p>Здесь важно пояснить, что стандартные роли функций чтения и записи в ядре реверсируются. Первые используются для вывода, а вторые для ввода.</p>
<empty-line/>
<p>Объясняется это тем, что чтение и запись происходят со стороны пользователя – если процесс что-то из ядра считывает, то для ядра это является выводом, а если процесс производит запись в ядро, тогда для ядра это выглядит как ввод.</p>
<empty-line/>
<p>Код procfs3.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * procfs3.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/proc_fs.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/sched.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 6, 0) </strong></p>
<p><strong>#define HAVE_PROC_OPS </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#define PROCFS_MAX_SIZE 2048 </strong></p>
<p><strong>#define PROCFS_ENTRY_FILENAME </strong><strong>"buffer2k"</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>proc_dir_entry</strong><strong> *</strong><strong>our_proc_file</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>char</strong><strong> procfs_buffer[PROCFS_MAX_SIZE]; </strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> procfs_buffer_size = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>procfs_read</strong><strong>(struct file *filp, </strong><strong>char</strong><strong> __user *buffer, </strong></p>
<p>                           <strong>size_t</strong><strong> length, </strong><strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>static</strong> <strong>int</strong><strong> finished = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>if</strong><strong> (finished) { </strong></p>
<p><strong>        pr_debug(</strong><strong>"procfs_read: END\n"</strong><strong>); </strong></p>
<p><strong>        finished = </strong><strong>0</strong><strong>; </strong></p>
<p>        <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    finished = </strong><strong>1</strong><strong>; </strong></p>
<p>    <strong>if</strong><strong> (copy_to_user(buffer, procfs_buffer, procfs_buffer_size)) </strong></p>
<p>        <strong>return</strong><strong> -EFAULT; </strong></p>
<p><strong>    pr_debug(</strong><strong>"procfs_read: read %lu bytes\n"</strong><strong>, procfs_buffer_size); </strong></p>
<p>    <strong>return</strong><strong> procfs_buffer_size; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>procfs_write</strong><strong>(struct file *file, </strong><strong>const</strong> <strong>char</strong><strong> __user *buffer, </strong></p>
<p>                            <strong>size_t</strong><strong> len, </strong><strong>loff_t</strong><strong> *off) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>if</strong><strong> (len &gt; PROCFS_MAX_SIZE) </strong></p>
<p><strong>        procfs_buffer_size = PROCFS_MAX_SIZE; </strong></p>
<p>    <strong>else</strong></p>
<p><strong>        procfs_buffer_size = len; </strong></p>
<p>    <strong>if</strong><strong> (copy_from_user(procfs_buffer, buffer, procfs_buffer_size)) </strong></p>
<p>        <strong>return</strong><strong> -EFAULT; </strong></p>
<p><strong>    pr_debug(</strong><strong>"procfs_write: write %lu bytes\n"</strong><strong>, procfs_buffer_size); </strong></p>
<p>    <strong>return</strong><strong> procfs_buffer_size; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>procfs_open</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    try_module_get(THIS_MODULE); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>procfs_close</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    module_put(THIS_MODULE); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>#ifdef HAVE_PROC_OPS </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>proc_ops</strong> <strong>file_ops_4_our_proc_file</strong><strong> = { </strong></p>
<p><strong>    .proc_read = procfs_read, </strong></p>
<p><strong>    .proc_write = procfs_write, </strong></p>
<p><strong>    .proc_open = procfs_open, </strong></p>
<p><strong>    .proc_release = procfs_close, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#else </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>file_ops_4_our_proc_file</strong><strong> = { </strong></p>
<p><strong>    .read = procfs_read, </strong></p>
<p><strong>    .write = procfs_write, </strong></p>
<p><strong>    .open = procfs_open, </strong></p>
<p><strong>    .release = procfs_close, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>procfs3_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    our_proc_file = proc_create(PROCFS_ENTRY_FILENAME, </strong><strong>0644</strong><strong>, </strong><strong>NULL</strong><strong>, </strong></p>
<p><strong>                                &amp;file_ops_4_our_proc_file); </strong></p>
<p>    <strong>if</strong><strong> (our_proc_file == </strong><strong>NULL</strong><strong>) { </strong></p>
<p><strong>        remove_proc_entry(PROCFS_ENTRY_FILENAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>        pr_debug(</strong><strong>"Error: Could not initialize /proc/%s\n"</strong><strong>, </strong></p>
<p><strong>                 PROCFS_ENTRY_FILENAME); </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    proc_set_size(our_proc_file, </strong><strong>80</strong><strong>); </strong></p>
<p><strong>    proc_set_user(our_proc_file, GLOBAL_ROOT_UID, GLOBAL_ROOT_GID); </strong></p>
<p><strong>    pr_debug(</strong><strong>"/proc/%s created\n"</strong><strong>, PROCFS_ENTRY_FILENAME); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>procfs3_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    remove_proc_entry(PROCFS_ENTRY_FILENAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>    pr_debug(</strong><strong>"/proc/%s removed\n"</strong><strong>, PROCFS_ENTRY_FILENAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(procfs3_init); </strong></p>
<p><strong>module_exit(procfs3_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Хотите больше примеров с procfs? Что ж, в первую очередь имейте ввиду, что по некоторой неофициальной информации procfs доживает свои дни, и нужно ориентироваться на использование sysfs.</p>
<empty-line/>
<p>Поэтому, если хотите самостоятельно задокументировать что-то связанное с ядром, то подумайте о применении именно этого механизма.</p>
<empty-line/>
<p>▍ 7.4 Управление файлом /proc с помощью seq_file</p>
<empty-line/>
<p>Как мы видели, создание файла в /proc может вызывать сложности. Поэтому в качестве вспомогательного средства существует API seq_file, который помогает форматировать файл /proc для вывода.</p>
<empty-line/>
<p>Основан этот API на выполнении последовательности из 3 функций: start(), next() и stop().</p>
<empty-line/>
<p>Запускает seq_file эту последовательность, когда пользователь считывает файл /proc.</p>
<empty-line/>
<p>Начинается все с вызова функции start() – если она вернет не NULL, то вызывается функция next().</p>
<empty-line/>
<p>Эта функция является итератором, перебирающим все данные. При каждом вызове next() также вызывается show(), которая записывает значения данных в буфер, считываемый пользователем.</p>
<empty-line/>
<p>Функция next() вызывается до тех пор, пока не вернет NULL, после чего последовательность завершается, и вызывается функция stop().</p>
<p>Внимание! После окончания текущей последовательности начинается следующая. Это означает, что по завершению функции stop() снова вызывается start(). Заканчивается этот цикл, когда функция start() возвращает NULL. Общая схема описанного процесса показана на рис. 1.  ниже</p>
<p><image l:href="#img_1"/></p>
<p><emphasis>Рис. 1: принцип работы seq_file</emphasis></p>
<empty-line/>
<p>Интерфейс seq_file предоставляет базовые функции для proc_ops, такие как seq_read, seq_lseek и некоторые другие, но ничего для выполнения записи в файл /proc. Хотя вы по-прежнему можете использовать способ из предыдущего примера.</p>
<empty-line/>
<p>Код procfs4.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * procfs4.c - создание "файла" в /proc </emphasis></strong></p>
<p><strong><emphasis> * Эта программа задействует для управления файлом /proc библиотеку seq_file. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Для работы с ядром. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Для модулей. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/proc_fs.h&gt; /* Для использования procfs */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/seq_file.h&gt; /* Для seq_file */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 6, 0) </strong></p>
<p><strong>#define HAVE_PROC_OPS </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#define PROC_NAME </strong><strong>"iter"</strong></p>
<p><strong><emphasis>/* Эта функция вызывается в начале последовательности. </emphasis></strong></p>
<p><strong><emphasis> * То есть, когда: </emphasis></strong></p>
<p><strong><emphasis> *   - первый раз считывается файл /proc </emphasis></strong></p>
<p><strong><emphasis> *   - после завершения функции (в конце последовательности) </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong><strong> *</strong><strong>my_seq_start</strong><strong>(struct seq_file *s, </strong><strong>loff_t</strong><strong> *pos) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> counter = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong><emphasis>/* Начинаем новую последовательность? */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (*pos == </strong><strong>0</strong><strong>) { </strong></p>
<p>        <strong><emphasis>/* Да =&gt; возвращается ненулевое значение для начала последовательности */</emphasis></strong></p>
<p>        <strong>return</strong><strong> &amp;counter; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong><emphasis>/* Нет =&gt; это конец последовательности, возвращается NULL для завершения считывания */</emphasis></strong></p>
<p><strong>    *pos = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается после начала последовательности. </emphasis></strong></p>
<p><strong><emphasis> * Ее вызов повторяется до возвращения значения NULL (затем последовательность завершается). </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong><strong> *</strong><strong>my_seq_next</strong><strong>(struct seq_file *s, </strong><strong>void</strong><strong> *v, </strong><strong>loff_t</strong><strong> *pos) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> *tmp_v = (</strong><strong>unsigned</strong> <strong>long</strong><strong> *)v; </strong></p>
<p><strong>    (*tmp_v)++; </strong></p>
<p><strong>    (*pos)++; </strong></p>
<p>    <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается в конце последовательности. */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>my_seq_stop</strong><strong>(struct seq_file *s, </strong><strong>void</strong><strong> *v) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* Делать нечего, используем в start() статическое значение. */</emphasis></strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается для каждого «шага» последовательности. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>my_seq_show</strong><strong>(struct seq_file *s, </strong><strong>void</strong><strong> *v) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>loff_t</strong><strong> *spos = (</strong><strong>loff_t</strong><strong> *)v; </strong></p>
<p><strong>    seq_printf(s, </strong><strong>"%Ld\n"</strong><strong>, *spos); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта структура формирует "функцию" для управления последовательностью. */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>seq_operations</strong> <strong>my_seq_ops</strong><strong> = { </strong></p>
<p><strong>    .start = my_seq_start, </strong></p>
<p><strong>    .next = my_seq_next, </strong></p>
<p><strong>    .stop = my_seq_stop, </strong></p>
<p><strong>    .show = my_seq_show, </strong></p>
<p><strong>}; </strong></p>
<p><strong><emphasis>/* Эта функция вызывается при открытии файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>my_open</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>return</strong><strong> seq_open(file, &amp;my_seq_ops); </strong></p>
<p><strong>}; </strong></p>
<p><strong><emphasis>/* Эта структура формирует “функцию”, управляющую файлом /proc. */</emphasis></strong></p>
<p><strong>#ifdef HAVE_PROC_OPS </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>proc_ops</strong> <strong>my_file_ops</strong><strong> = { </strong></p>
<p><strong>    .proc_open = my_open, </strong></p>
<p><strong>    .proc_read = seq_read, </strong></p>
<p><strong>    .proc_lseek = seq_lseek, </strong></p>
<p><strong>    .proc_release = seq_release, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#else </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>my_file_ops</strong><strong> = { </strong></p>
<p><strong>    .open = my_open, </strong></p>
<p><strong>    .read = seq_read, </strong></p>
<p><strong>    .llseek = seq_lseek, </strong></p>
<p><strong>    .release = seq_release, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>procfs4_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>proc_dir_entry</strong><strong> *</strong><strong>entry</strong><strong>; </strong></p>
<p><strong>    entry = proc_create(PROC_NAME, </strong><strong>0</strong><strong>, </strong><strong>NULL</strong><strong>, &amp;my_file_ops); </strong></p>
<p>    <strong>if</strong><strong> (entry == </strong><strong>NULL</strong><strong>) { </strong></p>
<p><strong>        remove_proc_entry(PROC_NAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>        pr_debug(</strong><strong>"Error: Could not initialize /proc/%s\n"</strong><strong>, PROC_NAME); </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>procfs4_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    remove_proc_entry(PROC_NAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>    pr_debug(</strong><strong>"/proc/%s removed\n"</strong><strong>, PROC_NAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(procfs4_init); </strong></p>
<p><strong>module_exit(procfs4_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Если вас интересует дополнительная информация, рекомендую заглянуть на эти страницы:</p>
<empty-line/>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/22355/">lwn.net/Articles/22355</a></p>
<p><strong>● </strong><a l:href="https://kernelnewbies.org/Documents/SeqFileHowTo">kernelnewbies.org/Documents/SeqFileHowTo</a></p>
<empty-line/>
<p>Также можете почитать код <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/fs/seq_file.c">fs/seq_file.c</a> в ядре.</p>
<empty-line/>
<p><strong>8 sysfs: взаимодействие с модулем</strong></p>
<empty-line/>
<p>Sysfs позволяет взаимодействовать с работающим ядром из пользовательского пространства, считывая или устанавливая переменные внутри модулей. Это может пригодиться в целях отладки или же в качестве интерфейса для приложений либо скриптов. Каталоги и файлы sysfs располагаются в <emphasis>/sys</emphasis>:</p>
<empty-line/>
<p><strong>ls -l /sys</strong></p>
<empty-line/>
<p>Атрибуты для kobjects в этой файловой системе можно экспортировать в форме стандартных файлов. Sysfs перенаправляет файловые операции ввода-вывода в определенные для этих атрибутов методы, тем самым обеспечивая средства для считывания и записи атрибутов ядра.</p>
<empty-line/>
<p>Определение атрибута:</p>
<empty-line/>
<p><strong>struct</strong> <strong>attribute</strong><strong> { </strong></p>
<p>    <strong>char</strong><strong> *name; </strong></p>
<p>    <strong>struct</strong> <strong>module</strong><strong> *</strong><strong>owner</strong><strong>; </strong></p>
<p>    <strong>umode_t</strong><strong> mode; </strong></p>
<p><strong>}; </strong></p>
<p><strong>int</strong> <strong>sysfs_create_file</strong><strong>(struct kobject * kobj, </strong><strong>const</strong><strong> struct attribute * attr); </strong></p>
<p><strong>8</strong><strong>void</strong> <strong>sysfs_remove_file</strong><strong>(struct kobject * kobj, </strong><strong>const</strong><strong> struct attribute * attr);</strong></p>
<empty-line/>
<p>К примеру, модель драйвера определяет struct device_attribute так:</p>
<empty-line/>
<p><strong>struct</strong> <strong>device_attribute</strong><strong> { </strong></p>
<p>    <strong>struct</strong> <strong>attribute</strong> <strong>attr</strong><strong>; </strong></p>
<p>    <strong>ssize_t</strong><strong> (*show)(struct device *dev, struct device_attribute *attr, </strong></p>
<p>                    <strong>char</strong><strong> *buf); </strong></p>
<p>    <strong>ssize_t</strong><strong> (*store)(struct device *dev, struct device_attribute *attr, </strong></p>
<p>                    <strong>const</strong> <strong>char</strong><strong> *buf, </strong><strong>size_t</strong><strong> count); </strong></p>
<p><strong>}; </strong></p>
<p><strong>int</strong> <strong>device_create_file</strong><strong>(struct device *, </strong><strong>const</strong><strong> struct device_attribute *); </strong></p>
<p><strong>void</strong> <strong>device_remove_file</strong><strong>(struct device *, </strong><strong>const</strong><strong> struct device_attribute *);</strong></p>
<empty-line/>
<p>Чтобы иметь возможность читать и записывать атрибут, при его объявлении необходимо указать метод show() или store().</p>
<empty-line/>
<p>Для распространенных случаев <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/sysfs.h">include/linux/sysfs.h</a> предоставляет удобные макросы (__ATTR, __ATTR_RO, __ATTR_WO, и т.д.), упрощая определение атрибутов, а также позволяя сделать код более лаконичным и читаемым.</p>
<empty-line/>
<p>Вот пример модуля “Hello world”, который включает создание переменной, доступной через sysfs.</p>
<empty-line/>
<p>Код hello-sysfs.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * hello-sysfs.c - пример использования sysfs </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/fs.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kobject.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/string.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/sysfs.h&gt; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>kobject</strong><strong> *</strong><strong>mymodule</strong><strong>; </strong></p>
<p><strong><emphasis>/* Переменная, которую нужно будет изменять. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong><strong> myvariable = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>myvariable_show</strong><strong>(struct kobject *kobj, </strong></p>
<p><strong>                               struct kobj_attribute *attr, </strong><strong>char</strong><strong> *buf) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>return</strong> <strong>sprintf</strong><strong>(buf, </strong><strong>"%d\n"</strong><strong>, myvariable); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>myvariable_store</strong><strong>(struct kobject *kobj, </strong></p>
<p><strong>                                struct kobj_attribute *attr, </strong><strong>char</strong><strong> *buf, </strong></p>
<p>                                <strong>size_t</strong><strong> count) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>sscanf</strong><strong>(buf, </strong><strong>"%du"</strong><strong>, &amp;myvariable); </strong></p>
<p>    <strong>return</strong><strong> count; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>kobj_attribute</strong> <strong>myvariable_attribute</strong><strong> = </strong></p>
<p><strong>    __</strong><strong>ATTR</strong><strong>(</strong><strong>myvariable</strong><strong>, 0660, </strong><strong>myvariable_show</strong><strong>, (</strong><strong>void</strong><strong> *)</strong><strong>myvariable_store</strong><strong>); </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>mymodule_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> error = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>    pr_info(</strong><strong>"mymodule: initialised\n"</strong><strong>); </strong></p>
<p><strong>    mymodule = kobject_create_and_add(</strong><strong>"mymodule"</strong><strong>, kernel_kobj); </strong></p>
<p>    <strong>if</strong><strong> (!mymodule) </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    error = sysfs_create_file(mymodule, &amp;myvariable_attribute.attr); </strong></p>
<p>    <strong>if</strong><strong> (error) { </strong></p>
<p><strong>        pr_info(</strong><strong>"failed to create the myvariable file "</strong></p>
<p>                <strong>"in /sys/kernel/mymodule\n"</strong><strong>); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong><strong> error; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>mymodule_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"mymodule: Exit success\n"</strong><strong>); </strong></p>
<p><strong>    kobject_put(mymodule); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(mymodule_init); </strong></p>
<p><strong>module_exit(mymodule_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Компиляция и установка модуля:</p>
<empty-line/>
<p><strong>make </strong></p>
<p><strong>sudo insmod hello-sysfs.ko</strong></p>
<empty-line/>
<p>Убеждаемся в успешности операции:</p>
<empty-line/>
<p><strong>sudo lsmod | grep hello_sysfs</strong></p>
<empty-line/>
<p>Каково текущее значение myvariable?</p>
<empty-line/>
<p><strong>cat /sys/kernel/mymodule/myvariable</strong></p>
<empty-line/>
<p>Установка значения myvariable и проверка, изменилось ли оно:</p>
<empty-line/>
<p><strong>echo</strong> <strong>"32"</strong><strong> &gt; /sys/kernel/mymodule/myvariable </strong></p>
<p><strong>cat /sys/kernel/mymodule/myvariable</strong></p>
<empty-line/>
<p>Наконец, извлечение тестового модуля:</p>
<empty-line/>
<p><strong>sudo rmmod hello_sysfs</strong></p>
<empty-line/>
<p>В случае выше мы используем для создания каталога в sysfs и взаимодействия с его атрибутами простой kobject. Начиная с Linux v2.6.0, структура kobject постепенно обретала свой нынешний облик.</p>
<empty-line/>
<p>Изначально она подразумевалась как простой способ унификации кода ядра, управляющего объектами с подсчетом ссылок. Однако спустя некоторое время ее назначение расширилось, и теперь она связывает большую часть модели устройства и ее интерфейса sysfs.</p>
<empty-line/>
<p>Подробнее о kobject и sysfs читайте в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/driver-api/driver-model/driver.rst">Documentation/driver-api/driver-model/driver.rst</a> и <a l:href="https://lwn.net/Articles/51437/">lwn.net/Articles/51437</a>.</p>
<empty-line/>
<p><strong>9. Взаимодействие с файлами устройств</strong></p>
<empty-line/>
<p>Файлы устройств представляют физические устройства. Большинство таких устройств используются для вывода и ввода, а значит необходим некий механизм, который бы позволил их находящимся в ядре драйверам получать вывод от процессов для его перенаправления самим устройствам. Для этого файл открывается, и в него производится запись, в точности аналогично стандартной операции записи в файл. В примере ниже это реализовано с помощью device_write.</p>
<empty-line/>
<p>Но этого не всегда оказывается достаточно. Представьте, что у вас к последовательному порту подключен модем (даже если модем внутренний, эта схема с точки зрения процессора все равно реализуется как модем, подключенный к последовательному порту, так что воображение особо напрягать не нужно).</p>
<empty-line/>
<p>Естественным решением здесь будет использовать файл устройства как для записи на модем (к примеру, команд или данных для отправки), так и для чтения с него (например, ответов на команды или полученных данных). Тем не менее остается вопрос о том, что же делать, когда нужно взаимодействовать с самим последовательным портом, например, для настройки скорости отправки/получения данных.</p>
<empty-line/>
<p>В Unix ответом будет использовать специальную функцию ioctl (сокращенно от Input Output ConTroL). Каждое устройство может иметь собственные команды ioctl, реализующие чтение (для отправки информации от процесса ядру), запись (для возвращения информации процессу), и то и другое, либо ни одно из этих действий. Имейте ввиду, что в ioctl роли чтения и записи снова реверсируются, то есть при чтении происходит отправка информации ядру, а при записи ее получение от ядра.</p>
<empty-line/>
<p>Вызывается функция ioctl с тремя параметрами: дескриптором соответствующего файла устройства, номером ioctl и параметром, имеющим тип long, чтобы можно было использовать приведение, позволяющее с его помощью передавать почти все, что захочется.</p>
<empty-line/>
<p>Таким способом не удастся передать структуру, но можно будет передать указатель на нее. Вот пример:</p>
<empty-line/>
<p>Код ioctl.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * ioctl.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/cdev.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/fs.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/ioctl.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/slab.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; </strong></p>
<p><strong>struct</strong> <strong>ioctl_arg</strong><strong> { </strong></p>
<p>    <strong>unsigned</strong> <strong>int</strong><strong> val; </strong></p>
<p><strong>}; </strong></p>
<p><strong><emphasis>/* Documentation/ioctl/ioctl-number.txt */</emphasis></strong></p>
<p><strong>#define IOC_MAGIC </strong><strong>'\x66'</strong></p>
<p><strong>#define IOCTL_VALSET _IOW(IOC_MAGIC, 0, struct ioctl_arg) </strong></p>
<p><strong>#define IOCTL_VALGET _IOR(IOC_MAGIC, 1, struct ioctl_arg) </strong></p>
<p><strong>#define IOCTL_VALGET_NUM _IOR(IOC_MAGIC, 2, int) </strong></p>
<p><strong>#define IOCTL_VALSET_NUM _IOW(IOC_MAGIC, 3, int) </strong></p>
<p><strong>#define IOCTL_VAL_MAXNR 3 </strong></p>
<p><strong>#define DRIVER_NAME </strong><strong>"ioctltest"</strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>int</strong><strong> test_ioctl_major = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>int</strong><strong> num_of_dev = </strong><strong>1</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>cdev</strong> <strong>test_ioctl_cdev</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> ioctl_num = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>struct</strong> <strong>test_ioctl_data</strong><strong> { </strong></p>
<p>    <strong>unsigned</strong> <strong>char</strong><strong> val; </strong></p>
<p>    <strong>rwlock_t</strong><strong> lock; </strong></p>
<p><strong>}; </strong></p>
<p><strong>static</strong> <strong>long</strong> <strong>test_ioctl_ioctl</strong><strong>(struct file *filp, </strong><strong>unsigned</strong> <strong>int</strong><strong> cmd, </strong></p>
<p>                             <strong>unsigned</strong> <strong>long</strong><strong> arg) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>test_ioctl_data</strong><strong> *</strong><strong>ioctl_data</strong><strong> = </strong><strong>filp</strong><strong>-&gt;</strong><strong>private_data</strong><strong>; </strong></p>
<p>    <strong>int</strong><strong> retval = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>unsigned</strong> <strong>char</strong><strong> val; </strong></p>
<p>    <strong>struct</strong> <strong>ioctl_arg</strong> <strong>data</strong><strong>; </strong></p>
<p>    <strong>memset</strong><strong>(&amp;data, </strong><strong>0</strong><strong>, </strong><strong>sizeof</strong><strong>(data)); </strong></p>
<p>    <strong>switch</strong><strong> (cmd) { </strong></p>
<p>    <strong>case</strong><strong> IOCTL_VALSET: </strong></p>
<p>        <strong>if</strong><strong> (copy_from_user(&amp;data, (</strong><strong>int</strong><strong> __user *)arg, </strong><strong>sizeof</strong><strong>(data))) { </strong></p>
<p><strong>            retval = -EFAULT; </strong></p>
<p>            <strong>goto</strong><strong> done; </strong></p>
<p><strong>        } </strong></p>
<p><strong>        pr_alert(</strong><strong>"IOCTL set val:%x .\n"</strong><strong>, data.val); </strong></p>
<p><strong>        write_lock(&amp;ioctl_data-&gt;lock); </strong></p>
<p><strong>        ioctl_data-&gt;val = data.val; </strong></p>
<p><strong>        write_unlock(&amp;ioctl_data-&gt;lock); </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p>    <strong>case</strong><strong> IOCTL_VALGET: </strong></p>
<p><strong>        read_lock(&amp;ioctl_data-&gt;lock); </strong></p>
<p><strong>        val = ioctl_data-&gt;val; </strong></p>
<p><strong>        read_unlock(&amp;ioctl_data-&gt;lock); </strong></p>
<p><strong>        data.val = val; </strong></p>
<p>        <strong>if</strong><strong> (copy_to_user((</strong><strong>int</strong><strong> __user *)arg, &amp;data, </strong><strong>sizeof</strong><strong>(data))) { </strong></p>
<p><strong>            retval = -EFAULT; </strong></p>
<p>            <strong>goto</strong><strong> done; </strong></p>
<p><strong>        } </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p>    <strong>case</strong><strong> IOCTL_VALGET_NUM: </strong></p>
<p><strong>        retval = __put_user(ioctl_num, (</strong><strong>int</strong><strong> __user *)arg); </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p>    <strong>case</strong><strong> IOCTL_VALSET_NUM: </strong></p>
<p><strong>        ioctl_num = arg; </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p>    <strong>default</strong><strong>: </strong></p>
<p><strong>        retval = -ENOTTY; </strong></p>
<p><strong>    } </strong></p>
<p><strong>done: </strong></p>
<p>    <strong>return</strong><strong> retval; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>test_ioctl_read</strong><strong>(struct file *filp, </strong><strong>char</strong><strong> __user *buf, </strong></p>
<p>                               <strong>size_t</strong><strong> count, </strong><strong>loff_t</strong><strong> *f_pos) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>test_ioctl_data</strong><strong> *</strong><strong>ioctl_data</strong><strong> = </strong><strong>filp</strong><strong>-&gt;</strong><strong>private_data</strong><strong>; </strong></p>
<p>    <strong>unsigned</strong> <strong>char</strong><strong> val; </strong></p>
<p>    <strong>int</strong><strong> retval; </strong></p>
<p>    <strong>int</strong><strong> i = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>    read_lock(&amp;ioctl_data-&gt;lock); </strong></p>
<p><strong>    val = ioctl_data-&gt;val; </strong></p>
<p><strong>    read_unlock(&amp;ioctl_data-&gt;lock); </strong></p>
<p>    <strong>for</strong><strong> (; i &lt; count; i++) { </strong></p>
<p>        <strong>if</strong><strong> (copy_to_user(&amp;buf[i], &amp;val, </strong><strong>1</strong><strong>)) { </strong></p>
<p><strong>            retval = -EFAULT; </strong></p>
<p>            <strong>goto</strong><strong> out; </strong></p>
<p><strong>        } </strong></p>
<p><strong>    } </strong></p>
<p><strong>    retval = count; </strong></p>
<p><strong>out: </strong></p>
<p>    <strong>return</strong><strong> retval; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>test_ioctl_close</strong><strong>(struct inode *inode, struct file *filp) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_alert(</strong><strong>"%s call.\n"</strong><strong>, __func__); </strong></p>
<p>    <strong>if</strong><strong> (filp-&gt;private_data) { </strong></p>
<p><strong>        kfree(filp-&gt;private_data); </strong></p>
<p><strong>        filp-&gt;private_data = </strong><strong>NULL</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>test_ioctl_open</strong><strong>(struct inode *inode, struct file *filp) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>test_ioctl_data</strong><strong> *</strong><strong>ioctl_data</strong><strong>; </strong></p>
<p><strong>    pr_alert(</strong><strong>"%s call.\n"</strong><strong>, __func__); </strong></p>
<p><strong>    ioctl_data = kmalloc(</strong><strong>sizeof</strong><strong>(struct test_ioctl_data), GFP_KERNEL); </strong></p>
<p>    <strong>if</strong><strong> (ioctl_data == </strong><strong>NULL</strong><strong>) </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    rwlock_init(&amp;ioctl_data-&gt;lock); </strong></p>
<p><strong>    ioctl_data-&gt;val = </strong><strong>0xFF</strong><strong>; </strong></p>
<p><strong>    filp-&gt;private_data = ioctl_data; </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>fops</strong><strong> = { </strong></p>
<p><strong>    .owner = THIS_MODULE, </strong></p>
<p><strong>    .open = test_ioctl_open, </strong></p>
<p><strong>    .release = test_ioctl_close, </strong></p>
<p><strong>    .read = test_ioctl_read, </strong></p>
<p><strong>    .unlocked_ioctl = test_ioctl_ioctl, </strong></p>
<p><strong>}; </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>ioctl_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>dev_t</strong><strong> dev; </strong></p>
<p>    <strong>int</strong><strong> alloc_ret = </strong><strong>-1</strong><strong>; </strong></p>
<p>    <strong>int</strong><strong> cdev_ret = </strong><strong>-1</strong><strong>; </strong></p>
<p><strong>    alloc_ret = alloc_chrdev_region(&amp;dev, </strong><strong>0</strong><strong>, num_of_dev, DRIVER_NAME); </strong></p>
<p>    <strong>if</strong><strong> (alloc_ret) </strong></p>
<p>        <strong>goto</strong><strong> error; </strong></p>
<p><strong>    test_ioctl_major = MAJOR(dev); </strong></p>
<p><strong>    cdev_init(&amp;test_ioctl_cdev, &amp;fops); </strong></p>
<p><strong>    cdev_ret = cdev_add(&amp;test_ioctl_cdev, dev, num_of_dev); </strong></p>
<p>    <strong>if</strong><strong> (cdev_ret) </strong></p>
<p>        <strong>goto</strong><strong> error; </strong></p>
<p><strong>    pr_alert(</strong><strong>"%s driver(major: %d) installed.\n"</strong><strong>, DRIVER_NAME, </strong></p>
<p><strong>             test_ioctl_major); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>error: </strong></p>
<p>    <strong>if</strong><strong> (cdev_ret == </strong><strong>0</strong><strong>) </strong></p>
<p><strong>        cdev_del(&amp;test_ioctl_cdev); </strong></p>
<p>    <strong>if</strong><strong> (alloc_ret == </strong><strong>0</strong><strong>) </strong></p>
<p><strong>        unregister_chrdev_region(dev, num_of_dev); </strong></p>
<p>    <strong>return</strong> <strong>-1</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>ioctl_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>dev_t</strong><strong> dev = MKDEV(test_ioctl_major, </strong><strong>0</strong><strong>); </strong></p>
<p><strong>    cdev_del(&amp;test_ioctl_cdev); </strong></p>
<p><strong>    unregister_chrdev_region(dev, num_of_dev); </strong></p>
<p><strong>    pr_alert(</strong><strong>"%s driver removed.\n"</strong><strong>, DRIVER_NAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(ioctl_init); </strong></p>
<p><strong>module_exit(ioctl_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"This is test_ioctl module"</strong><strong>);</strong></p>
<empty-line/>
<p>Вы можете заметить в функции test_ioctl_ioctl() аргумент cmd. Это номер ioctl. Он кодирует старший (major) номер устройства, тип ioctl, команду и тип параметра. Обычно этот номер создается вызовом макроса (_IO, _IOR, _IOW или _IOWR — в зависимости от типа) в заголовочном файле.</p>
<empty-line/>
<p>Этот заголовочный файл должен быть включен и в программы, которые будут использовать ioctl (чтобы они могли генерировать подходящие ioctl), и в модуль ядра (чтобы он мог эту функцию понимать).</p>
<p>В примере ниже заголовочным файлом является chardev.h, а использующей его программой userspace_ioctl.c.</p>
<empty-line/>
<p>Если вы хотите использовать ioctl в собственных модулях, то лучше будет получить для нее официальное назначение. Тогда, если у вас каким-то образом окажется чужая ioctl, то сразу станет понятно, что что-то не так.</p>
<p>Более подробную информацию можно получить в дереве исходного кода ядра на странице <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation/userspace-api/ioctl/ioctl-number.rst">Documentation/userspace-api/ioctl/ioctl-number.rst</a></p>
<empty-line/>
<p>Кроме того, необходимо иметь ввиду, что конкурентное обращение к ресурсам приведет к состоянию гонки. Решением будет использовать атомарную инструкцию сравнения с обменом (CAS), которая упоминалась в разделе 6.5, чтобы организовать индивидуальный доступ.</p>
<empty-line/>
<p>Код chardev2.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * chardev2.c – создание символьного устройства ввода/вывода </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/cdev.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/delay.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/device.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/fs.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/irq.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;  </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;  </strong></p>
<p><strong>#include </strong><strong>&lt;linux/poll.h&gt; </strong></p>
<p><strong>#include </strong><strong>"chardev.h"</strong></p>
<p><strong>#define SUCCESS 0 </strong></p>
<p><strong>#define DEVICE_NAME </strong><strong>"char_dev"</strong></p>
<p><strong>#define BUF_LEN 80 </strong></p>
<p><strong>enum</strong><strong> { </strong></p>
<p><strong>    CDEV_NOT_USED = </strong><strong>0</strong><strong>, </strong></p>
<p><strong>    CDEV_EXCLUSIVE_OPEN = </strong><strong>1</strong><strong>, </strong></p>
<p><strong>}; </strong></p>
<p><strong><emphasis>/* Открыто ли сейчас устройство? Служит для предотвращения </emphasis></strong></p>
<p><strong><emphasis> * конкурентного доступа к одному устройству.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>atomic_t</strong><strong> already_open = ATOMIC_INIT(CDEV_NOT_USED); </strong></p>
<p><strong><emphasis>/* Сообщение, которое устройство будет выдавать при обращении. */</emphasis></strong></p>
<p><strong>static</strong> <strong>char</strong><strong> message[BUF_LEN]; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>class</strong><strong> *</strong><strong>cls</strong><strong>; </strong></p>
<p><strong><emphasis>/* Вызывается, когда процесс пытается открыть файл устройства. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_open</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"device_open(%p)\n"</strong><strong>, file); </strong></p>
<p><strong>    try_module_get(THIS_MODULE); </strong></p>
<p>    <strong>return</strong><strong> SUCCESS; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>device_release</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"device_release(%p,%p)\n"</strong><strong>, inode, file); </strong></p>
<p><strong>    module_put(THIS_MODULE); </strong></p>
<p>    <strong>return</strong><strong> SUCCESS; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается, когда процесс, уже открывший файл, </emphasis></strong></p>
<p><strong><emphasis> * пытается считать из него. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_read</strong><strong>(struct file *file, </strong><strong><emphasis>/* см. include/linux/fs.h   */</emphasis></strong></p>
<p>                           <strong>char</strong><strong> __user *buffer, </strong><strong><emphasis>/* Буфер для заполнения.  */</emphasis></strong></p>
<p>                           <strong>size_t</strong><strong> length, </strong><strong><emphasis>/* Длина буфера.     */</emphasis></strong></p>
<p>                           <strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* Количество байтов, фактически записываемых в буфер. */</emphasis></strong></p>
<p>    <strong>int</strong><strong> bytes_read = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong><emphasis>/* Как далеко зашел процесс, считывающий  </emphasis></strong></p>
<p><strong><emphasis>     * сообщение? Пригождается, когда сообщение больше размера буфера</emphasis></strong></p>
<p><strong><emphasis>     * в device_read.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>const</strong> <strong>char</strong><strong> *message_ptr = message; </strong></p>
<p>    <strong>if</strong><strong> (!*(message_ptr + *offset)) { </strong><strong><emphasis>/* Мы в конце сообщения. */</emphasis></strong></p>
<p><strong>        *offset = </strong><strong>0</strong><strong>; </strong><strong><emphasis>/* Сброс смещения. */</emphasis></strong></p>
<p>        <strong>return</strong> <strong>0</strong><strong>; </strong><strong><emphasis>/* Обозначение конца файла. */</emphasis></strong></p>
<p><strong>    } </strong></p>
<p><strong>    message_ptr += *offset; </strong></p>
<p>    <strong><emphasis>/* Фактически помещает данные в буфер. */</emphasis></strong></p>
<p>    <strong>while</strong><strong> (length &amp;&amp; *message_ptr) { </strong></p>
<p>        <strong><emphasis>/* Поскольку буфер находится в пользовательском сегменте данных, </emphasis></strong></p>
<p><strong><emphasis>         * а не в сегменте ядра, присваивание не сработает. Вместо этого </emphasis></strong></p>
<p><strong><emphasis>         * нужно использовать put_user, которая скопирует данные из </emphasis></strong></p>
<p><strong><emphasis>         * сегмента ядра в сегмент пользователя. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        put_user(*(message_ptr++), buffer++); </strong></p>
<p><strong>        length--; </strong></p>
<p><strong>        bytes_read++; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    pr_info(</strong><strong>"Read %d bytes, %ld left\n"</strong><strong>, bytes_read, length); </strong></p>
<p><strong>    *offset += bytes_read; </strong></p>
<p>    <strong><emphasis>/* Функции чтения должны возвращать количество байтов, реально </emphasis></strong></p>
<p><strong><emphasis>     * вставляемых в буфер. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>return</strong><strong> bytes_read; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Вызывается, когда кто-то пытается произвести запись в файл устройства. */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>device_write</strong><strong>(struct file *file, </strong><strong>const</strong> <strong>char</strong><strong> __user *buffer, </strong></p>
<p>                            <strong>size_t</strong><strong> length, </strong><strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i; </strong></p>
<p><strong>    pr_info(</strong><strong>"device_write(%p,%p,%ld)"</strong><strong>, file, buffer, length); </strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; length &amp;&amp; i &lt; BUF_LEN; i++) </strong></p>
<p><strong>        get_user(message[i], buffer + i); </strong></p>
<p>    <strong><emphasis>/* Также возвращает количество использованных во вводе символов. */</emphasis></strong></p>
<p>    <strong>return</strong><strong> i; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция вызывается, когда процесс пытается выполнить ioctl для </emphasis></strong></p>
<p><strong><emphasis> * файла устройства. Мы получаем два дополнительных параметра </emphasis></strong></p>
<p><strong><emphasis> * (дополнительных для структур inode и file, которые получают все  </emphasis></strong></p>
<p><strong><emphasis> * функции устройств): номер ioctl и параметр, заданный для этой ioctl. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Если ioctl реализует запись или запись/чтение (то есть ее вывод </emphasis></strong></p>
<p><strong><emphasis> * возвращается вызывающему процессу), вызов ioctl возвращает вывод </emphasis></strong></p>
<p><strong><emphasis> * этой функции.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>long</strong></p>
<p><strong>device_ioctl</strong><strong>(struct file *file, </strong><strong><emphasis>/* То же самое. */</emphasis></strong></p>
<p>             <strong>unsigned</strong> <strong>int</strong><strong> ioctl_num, </strong><strong><emphasis>/* Число и параметр для ioctl */</emphasis></strong></p>
<p>             <strong>unsigned</strong> <strong>long</strong><strong> ioctl_param) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i; </strong></p>
<p>    <strong>long</strong><strong> ret = SUCCESS; </strong></p>
<p>    <strong><emphasis>/* Мы не хотим взаимодействовать с двумя процессами одновременно */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (atomic_cmpxchg(&amp;already_open, CDEV_NOT_USED, CDEV_EXCLUSIVE_OPEN)) </strong></p>
<p>        <strong>return</strong><strong> -EBUSY; </strong></p>
<p>    <strong><emphasis>/* Переключение согласно вызванной ioctl. */</emphasis></strong></p>
<p>    <strong>switch</strong><strong> (ioctl_num) { </strong></p>
<p>    <strong>case</strong><strong> IOCTL_SET_MSG: { </strong></p>
<p>        <strong><emphasis>/* Получение указателя на сообщение (в пользовательском  </emphasis></strong></p>
<p><strong><emphasis>         * пространстве) и установка его как сообщения устройства. </emphasis></strong></p>
<p><strong><emphasis>         * Получение параметра, передаваемого ioctl процессом. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p>        <strong>char</strong><strong> __user *tmp = (</strong><strong>char</strong><strong> __user *)ioctl_param; </strong></p>
<p>        <strong>char</strong><strong> ch; </strong></p>
<p>        <strong><emphasis>/* Определение длины сообщения. */</emphasis></strong></p>
<p><strong>        get_user(ch, tmp); </strong></p>
<p>        <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; ch &amp;&amp; i &lt; BUF_LEN; i++, tmp++) </strong></p>
<p><strong>            get_user(ch, tmp); </strong></p>
<p><strong>        device_write(file, (</strong><strong>char</strong><strong> __user *)ioctl_param, i, </strong><strong>NULL</strong><strong>); </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>case</strong><strong> IOCTL_GET_MSG: { </strong></p>
<p>        <strong>loff_t</strong><strong> offset = </strong><strong>0</strong><strong>; </strong></p>
<p>        <strong><emphasis>/* Передача текущего сообщения вызывающему процессу. Получаемый </emphasis></strong></p>
<p><strong><emphasis>         * параметр является указателем, который мы заполняем. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        i = device_read(file, (</strong><strong>char</strong><strong> __user *)ioctl_param, </strong><strong>99</strong><strong>, &amp;offset); </strong></p>
<p>        <strong><emphasis>/* Помещаем в конец буфера нуль, чтобы он правильно завершился. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        put_user(</strong><strong>'\0'</strong><strong>, (</strong><strong>char</strong><strong> __user *)ioctl_param + i); </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>case</strong><strong> IOCTL_GET_NTH_BYTE: </strong></p>
<p>        <strong><emphasis>/* Эта ioctl является и вводом (ioctl_param), и выводом </emphasis></strong></p>
<p><strong><emphasis>         * (возвращаемым значением этой функции). </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        ret = (</strong><strong>long</strong><strong>)message[ioctl_param]; </strong></p>
<p>        <strong>break</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong><emphasis>/* Теперь можно принимать следующий вызов. */</emphasis></strong></p>
<p><strong>    atomic_set(&amp;already_open, CDEV_NOT_USED); </strong></p>
<p>    <strong>return</strong><strong> ret; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Объявления модулей. */</emphasis></strong></p>
<p><strong><emphasis>/* Эта структура будет хранить функции, вызываемые при выполнении  </emphasis></strong></p>
<p><strong><emphasis> * процессом действий с созданным нами устройством. Поскольку указатель  </emphasis></strong></p>
<p><strong><emphasis> * на эту структуру содержится в таблице устройств, он не может быть </emphasis></strong></p>
<p><strong><emphasis> * локальным для init_module. NULL для не реализованных функций. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>fops</strong><strong> = { </strong></p>
<p><strong>    .read = device_read, </strong></p>
<p><strong>    .write = device_write, </strong></p>
<p><strong>    .unlocked_ioctl = device_ioctl, </strong></p>
<p><strong>    .open = device_open, </strong></p>
<p><strong>    .release = device_release, </strong><strong><emphasis>/* Аналогично закрытию. */</emphasis></strong></p>
<p><strong>}; </strong></p>
<p><strong><emphasis>/* Инициализация модуля – регистрация символьного устройства. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>chardev2_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* Регистрация символьного устройства (по меньшей мере попытка). */</emphasis></strong></p>
<p>    <strong>int</strong><strong> ret_val = register_chrdev(MAJOR_NUM, DEVICE_NAME, &amp;fops); </strong></p>
<p>    <strong><emphasis>/* Отрицательные значения означают ошибку. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (ret_val &lt; </strong><strong>0</strong><strong>) { </strong></p>
<p><strong>        pr_alert(</strong><strong>"%s failed with %d\n"</strong><strong>, </strong></p>
<p>                 <strong>"Sorry, registering the character device "</strong><strong>, ret_val); </strong></p>
<p>        <strong>return</strong><strong> ret_val; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    cls = class_create(THIS_MODULE, DEVICE_FILE_NAME); </strong></p>
<p><strong>    device_create(cls, </strong><strong>NULL</strong><strong>, MKDEV(MAJOR_NUM, </strong><strong>0</strong><strong>), </strong><strong>NULL</strong><strong>, DEVICE_FILE_NAME); </strong></p>
<p><strong>    pr_info(</strong><strong>"Device created on /dev/%s\n"</strong><strong>, DEVICE_FILE_NAME); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Очистка – снятие регистрации соответствующего файла из /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>chardev2_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    device_destroy(cls, MKDEV(MAJOR_NUM, </strong><strong>0</strong><strong>)); </strong></p>
<p><strong>    class_destroy(cls); </strong></p>
<p>    <strong><emphasis>/* Снятие регистрации устройства. */</emphasis></strong></p>
<p><strong>    unregister_chrdev(MAJOR_NUM, DEVICE_NAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(chardev2_init); </strong></p>
<p><strong>module_exit(chardev2_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p>Код chardev.h:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * chardev.h – заголовочный файл с определениями ioctl. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Объявления нужны в заголовочном файле, поскольку их должен знать </emphasis></strong></p>
<p><strong><emphasis> * как модуль ядра (из chardev2.c), так и процесс, вызывающий ioctl()</emphasis></strong></p>
<p><strong><emphasis> * (из userspace_ioctl.c). </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#ifndef CHARDEV_H </strong></p>
<p><strong>#define CHARDEV_H </strong></p>
<p><strong>#include </strong><strong>&lt;linux/ioctl.h&gt; </strong></p>
<p><strong><emphasis>/* Старший номер устройства. Мы больше не можем полагаться на  </emphasis></strong></p>
<p><strong><emphasis> * динамическую регистрацию, поскольку функции ioctl должны его знать. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#define MAJOR_NUM 100 </strong></p>
<p><strong><emphasis>/* Установка сообщения драйвера устройства. */</emphasis></strong></p>
<p><strong>#define IOCTL_SET_MSG _IOW(MAJOR_NUM, 0, char *) </strong></p>
<p><strong><emphasis>/* _IOW означает, что мы создаем номер команды ioctl для передачи </emphasis></strong></p>
<p><strong><emphasis> * информации от пользовательского процесса модулю ядра. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Первый аргумент, MAJOR_NUM, это используемый старший номер устройства </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Второй аргумент – это номер команды (их может быть несколько с </emphasis></strong></p>
<p><strong><emphasis> * разными смыслами). </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Третий аргумент – это тип, который мы хотим передать от процесса ядру </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* Получение сообщения драйвера устройства. */</emphasis></strong></p>
<p><strong>#define IOCTL_GET_MSG _IOR(MAJOR_NUM, 1, char *) </strong></p>
<p><strong><emphasis>/* Эта IOCTL используется для вывода с целью получить сообщение  </emphasis></strong></p>
<p><strong><emphasis> * драйвера устройства. Однако нам все равно нужен буфер для размещения </emphasis></strong></p>
<p><strong><emphasis> * этого сообщения в качестве ввода при его передаче процессом. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* Получение n-ного байта сообщения. */</emphasis></strong></p>
<p><strong>#define IOCTL_GET_NTH_BYTE _IOWR(MAJOR_NUM, 2, int) </strong></p>
<p><strong><emphasis>/* Эта IOCTL используется как для ввода, так и для вывода. Она получает</emphasis></strong></p>
<p><strong><emphasis> * от пользователя число, n, и возвращает message[n]. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* Имя файла устройства. */</emphasis></strong></p>
<p><strong>#define DEVICE_FILE_NAME </strong><strong>"char_dev"</strong></p>
<p><strong>#define DEVICE_PATH </strong><strong>"/dev/char_dev"</strong></p>
<p><strong>#endif</strong></p>
<empty-line/>
<p>Код userspace_ioctl.c:</p>
<empty-line/>
<p><strong><emphasis>/*  userspace_ioctl.c – процесс, позволяющий контролировать модуль ядра  </emphasis></strong></p>
<p><strong><emphasis> *  с помощью ioctl.</emphasis></strong></p>
<p><strong><emphasis> *       </emphasis></strong></p>
<p><strong><emphasis> *  До этого момента можно было использовать для ввода и вывода cat.</emphasis></strong></p>
<p><strong><emphasis> *  Теперь необходимо использовать ioctl, для чего нужно написать свой  </emphasis></strong></p>
<p><strong><emphasis> *  процесс.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* Детали устройства, такие как номера ioctl и старший файл устройства.  */</emphasis></strong></p>
<p><strong>#include </strong><strong>"../chardev.h"</strong></p>
<p><strong>#include </strong><strong>&lt;stdio.h&gt; /* Стандартный ввод-вывод. */ </strong></p>
<p><strong>#include </strong><strong>&lt;fcntl.h&gt; /* Открытие. */ </strong></p>
<p><strong>#include </strong><strong>&lt;unistd.h&gt; /* Закрытие. */ </strong></p>
<p><strong>#include </strong><strong>&lt;stdlib.h&gt; /* Выход. */ </strong></p>
<p><strong>#include </strong><strong>&lt;sys/ioctl.h&gt; /* ioctl */ </strong></p>
<p><strong><emphasis>/* Функции для вызовов ioctl. */</emphasis></strong></p>
<p><strong>int</strong> <strong>ioctl_set_msg</strong><strong>(</strong><strong>int</strong><strong> file_desc, </strong><strong>char</strong><strong> *message) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> ret_val; </strong></p>
<p><strong>    ret_val = ioctl(file_desc, IOCTL_SET_MSG, message); </strong></p>
<p>    <strong>if</strong><strong> (ret_val &lt; </strong><strong>0</strong><strong>) { </strong></p>
<p>        <strong>printf</strong><strong>(</strong><strong>"ioctl_set_msg failed:%d\n"</strong><strong>, ret_val); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong><strong> ret_val; </strong></p>
<p><strong>} </strong></p>
<p><strong>int</strong> <strong>ioctl_get_msg</strong><strong>(</strong><strong>int</strong><strong> file_desc) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> ret_val; </strong></p>
<p>    <strong>char</strong><strong> message[</strong><strong>100</strong><strong>] = { </strong><strong>0</strong><strong> }; </strong></p>
<p>  <strong><emphasis>/* Внимание! Это опасно, так как мы не сообщаем ядру, до куда  </emphasis></strong></p>
<p><strong><emphasis>   * можно производить запись, то есть рискуем вызвать переполнение   </emphasis></strong></p>
<p><strong><emphasis>   * буфера. В реальной программе мы бы использовали две ioctl - одну   </emphasis></strong></p>
<p><strong><emphasis>   * для информирования ядра о длине буфера и вторую для предоставления</emphasis></strong></p>
<p><strong><emphasis>   * ему самого буфера под заполнение.  </emphasis></strong></p>
<p><strong><emphasis>   */</emphasis></strong></p>
<p><strong>    ret_val = ioctl(file_desc, IOCTL_GET_MSG, message); </strong></p>
<p>    <strong>if</strong><strong> (ret_val &lt; </strong><strong>0</strong><strong>) { </strong></p>
<p>        <strong>printf</strong><strong>(</strong><strong>"ioctl_get_msg failed:%d\n"</strong><strong>, ret_val); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>printf</strong><strong>(</strong><strong>"get_msg message:%s"</strong><strong>, message); </strong></p>
<p>    <strong>return</strong><strong> ret_val; </strong></p>
<p><strong>} </strong></p>
<p><strong>int</strong> <strong>ioctl_get_nth_byte</strong><strong>(</strong><strong>int</strong><strong> file_desc) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i, c; </strong></p>
<p>    <strong>printf</strong><strong>(</strong><strong>"get_nth_byte message:"</strong><strong>); </strong></p>
<p><strong>    i = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>do</strong><strong> { </strong></p>
<p><strong>        c = ioctl(file_desc, IOCTL_GET_NTH_BYTE, i++); </strong></p>
<p>        <strong>if</strong><strong> (c &lt; </strong><strong>0</strong><strong>) { </strong></p>
<p>            <strong>printf</strong><strong>(</strong><strong>"\nioctl_get_nth_byte failed at the %d'th byte:\n"</strong><strong>, i); </strong></p>
<p>            <strong>return</strong><strong> c; </strong></p>
<p><strong>        } </strong></p>
<p>        <strong>putchar</strong><strong>(c); </strong></p>
<p><strong>    } </strong><strong>while</strong><strong> (c != </strong><strong>0</strong><strong>); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Main – вызов функций ioctl. */</emphasis></strong></p>
<p><strong>int</strong> <strong>main</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> file_desc, ret_val; </strong></p>
<p>    <strong>char</strong><strong> *msg = </strong><strong>"Message passed by ioctl\n"</strong><strong>; </strong></p>
<p><strong>    file_desc = open(DEVICE_PATH, O_RDWR); </strong></p>
<p>    <strong>if</strong><strong> (file_desc &lt; </strong><strong>0</strong><strong>) { </strong></p>
<p>        <strong>printf</strong><strong>(</strong><strong>"Can't open device file: %s, error:%d\n"</strong><strong>, DEVICE_PATH, </strong></p>
<p><strong>               file_desc); </strong></p>
<p>        <strong>exit</strong><strong>(EXIT_FAILURE); </strong></p>
<p><strong>    } </strong></p>
<p><strong>    ret_val = ioctl_set_msg(file_desc, msg); </strong></p>
<p>    <strong>if</strong><strong> (ret_val) </strong></p>
<p>        <strong>goto</strong><strong> error; </strong></p>
<p><strong>    ret_val = ioctl_get_nth_byte(file_desc); </strong></p>
<p>    <strong>if</strong><strong> (ret_val) </strong></p>
<p>        <strong>goto</strong><strong> error; </strong></p>
<p><strong>    ret_val = ioctl_get_msg(file_desc); </strong></p>
<p>    <strong>if</strong><strong> (ret_val) </strong></p>
<p>        <strong>goto</strong><strong> error; </strong></p>
<p><strong>    close(file_desc); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>error: </strong></p>
<p><strong>    close(file_desc); </strong></p>
<p>    <strong>exit</strong><strong>(EXIT_FAILURE); </strong></p>
<p><strong>}</strong></p>
<empty-line/>
<p><strong>10. Системные вызовы</strong></p>
<empty-line/>
<p>До этого момента мы просто использовали отлаженные механизмы ядра для регистрации файлов /proc и обработчиков устройств. И это отличное решение, когда вы хотите сделать нечто стандартное, что предполагали программисты ядра, например написать драйвер устройства. Но как быть, если вы планируете сделать что-то необычное, каким-то образом изменить поведение системы? Здесь вам придется действовать полностью самостоятельно.</p>
<empty-line/>
<p>И если вы пойдете рисковым путем, не задействовав виртуальную машину, то программирование ядра уже может стать весьма опасным занятием. В процессе написания примера, который вы увидите ниже, я убил системный вызов open() и в итоге не смог открывать какие-либо файлы, запускать программы и даже выключить систему. Пришлось перезапускать виртуальную машину. Никакие важные файлы не пострадали, но если бы я делал то же самое в реальной критически важной системе, то такой исход оказался бы вполне вероятен. Чтобы оградить себя от возможной потери каких-либо файлов, даже в рамках тестовой среды, рекомендую до выполнения insmod и rmmod выполнять sync.</p>
<empty-line/>
<p>Забудьте о файлах /proc, забудьте о файлах устройств – это лишь мелкие детали в необъятном пространстве вселенной. Реальным механизмом в контексте взаимодействия с ядром, тем, который используют все процессы, являются системные вызовы. Когда процесс запрашивает у ядра операцию (например, открытие файла, разветвление на новый процесс или выделение дополнительной памяти), используется именно этот механизм.</p>
<empty-line/>
<p>Если вы хотите изменить поведение ядра, то вмешательство производится как раз в него.</p>
<p>Кстати, посмотреть, какие системные вызовы использует программа, можно так:</p>
<empty-line/>
<p><strong>strace &lt;arguments&gt;</strong></p>
<empty-line/>
<p>Как правило, процесс не должен иметь возможности обращаться к ядру, то есть он не может обращаться к его памяти и вызывать его функции. Это обусловлено аппаратной спецификой ЦПУ (именно поэтому мы говорим «защищенный режим» или «защита страниц»).</p>
<empty-line/>
<p>И системные вызовы являются в этом общем правиле исключением. Технически это происходит так – процесс заполняет регистр нужными значениями, после чего вызывает особую инструкцию, которая переключается на ранее определенную область ядра (естественно, эта область доступна пользовательским процессам только для чтения, но не для записи). В случае процессоров Intel это происходит посредством прерывания 0х80. Аппаратное обеспечение знает, что при переходе в эту область вы выходите из ограниченного пользовательского режима, начиная действовать уже в юрисдикции ядра, в связи с чем для вас открываются все двери.</p>
<empty-line/>
<p>Область ядра, в которую может перескочить процесс, называется system_call. Процедура в этой области проверяет номер системного вызова, сообщая ядру о том, какое действие процесс запросил. Затем она просматривает таблицу системных вызовов (sys_call_table) в поиске адреса нужной функции ядра. Далее она эту функцию вызывает, и после того, как та возвращает результат, выполняет ряд системных проверок и делает возврат процессу (или к другому процессу, если время изначального истекло). Прописан весь этот код в файле arch/$(architecture)/kernel/entry.S после строки ENTRY(system_call).</p>
<empty-line/>
<p>Итак, если мы хотим изменить способ работы определенного системного вызова, то нам нужно написать собственную функцию для его реализации (обычно для этого добавляется собственный код, после чего вызывается оригинальная функция), а затем перевести указатель в sys_call_table на нашу новую функцию. Поскольку позднее эта функция может быть удалена, важно, чтобы cleanup_module восстанавливала таблицу в исходное состояние.</p>
<empty-line/>
<p>Для изменения содержимого sys_call_table необходимо взять во внимание регистр управления. Это регистр процессора, который изменяет или управляет его общим функционированием. В архитектуре x86 у регистра cr0 есть различные флаги управления, которые изменяют основные операции процессора. Среди них есть флаг WP, который отвечает за защиту от записи. Если он установлен, процессор запрещает выполнение записи в разделы только для чтения. Следовательно, прежде чем изменять sys_call_table, нам нужно этот флаг отключить.</p>
<empty-line/>
<p>Начиная с Linux v5.3, функцию write_cr0 использовать нельзя из-за чувствительных бит cr0, представляющих угрозу безопасности. С их помощью атакующий может производить запись в регистры управления, отключая защиты ЦПУ, например защиту от записи. В итоге для обхода этого ограничения необходимо предоставить собственную подпрограмму ассемблера.</p>
<empty-line/>
<p>Однако символ sys_call_table с целью предотвращения подобного трюка является неэкспортируемым. Но у нас все же есть пара способов для его получения, а именно ручной поиск символов и kallsyms_lookup_name. Здесь мы рассмотрим использование обоих, в зависимости от версии ядра.</p>
<empty-line/>
<p>В ядре используется механизм Control-Flow Integrity (CFI), предназначенный для предотвращения возможного перенаправления исполнения кода атакующим. Он позволяет гарантировать направление косвенных вызовов к ожидаемым адресам, а также неизменность возвращаемых адресов. Начиная с Linux v5.7, в ядре пропатчили ряд методов Control-Flow Enforcement (CET) для архитектуры x86, и некоторые конфигурации GCC, например GCC 9 и 10 версии, будут идти с CET (опция -fcf-protection) по умолчанию. Использование этого GCC для компиляции ядра при отключенном Retpoline может привести к активации в ядре функционала CET.</p>
<empty-line/>
<p>Проверить, включена ли опция -fcf-protection, можно следующей командой:</p>
<empty-line/>
<p><strong>$ gcc -v -Q -O2 --</strong><strong>help</strong><strong>=target | grep protection</strong></p>
<p><strong>Using built-in specs.</strong></p>
<p><strong>COLLECT_GCC=gcc</strong></p>
<p><strong>COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper</strong></p>
<p><strong>...</strong></p>
<p><strong>gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)</strong></p>
<p><strong>COLLECT_GCC_OPTIONS=</strong><strong>'-v'</strong> <strong>'-Q'</strong> <strong>'-O2'</strong> <strong>'--help=target'</strong> <strong>'-mtune=generic'</strong> <strong>'-march=x86-64'</strong></p>
<p><strong> /usr/lib/gcc/x86_64-linux-gnu/9/cc1 -v ... -fcf-protection ...</strong></p>
<p><strong> GNU C17 (Ubuntu 9.3.0-17ubuntu1~20.04) version 9.3.0 (x86_64-linux-gnu)</strong></p>
<p><strong>...</strong></p>
<empty-line/>
<p>Но CET не должен быть включен в ядре, поскольку это может нарушить работу Kprobes и bpf. По этой причине, начиная с v5.11, данный функционал был отключен. Поэтому, чтобы у нас гарантированно работал ручной поиск символов, мы используем версии ядра до v5.4.</p>
<empty-line/>
<p>К сожалению, начиная с Linux v5.7, kallsyms_lookup_name также не экспортируется, и получить адрес этой функции можно лишь обходным путем. Если включена опция CONFIG_KPROBES, можно извлечь этот адрес, используя Kprobes для динамического проникновения в определенную подпрограмму ядра. Kprobe вставляет точку останова на входе функции, заменяя первые байты просматриваемой инструкции. Когда ЦПУ достигает этой точки останова, регистры сохраняются, и управление переходит Kprobes. Он передает адреса сохраненных регистров и структуры Kprobe заданному нами обработчику, после чего его запускает. Kprobes можно зарегистрировать по имени символа или адресу. При использовании имени символа адрес будет обрабатываться ядром.</p>
<empty-line/>
<p>В противном случае указать адрес sys_call_table из /proc/kallsyms и /boot/System.map в параметре sym. Вот пример использования /proc/kallsyms:</p>
<empty-line/>
<p><strong>$ sudo grep sys_call_table /proc/kallsyms</strong></p>
<p><strong>ffffffff82000280 R x32_sys_call_table</strong></p>
<p><strong>ffffffff820013a0 R sys_call_table</strong></p>
<p><strong>ffffffff820023e0 R ia32_sys_call_table</strong></p>
<p><strong>$ sudo insmod syscall.ko sym=0xffffffff820013a0</strong></p>
<empty-line/>
<p>При использовании адреса из /boot/System.map будьте внимательны к KASLR (рандомизация адресного пространства ядра). Этот механизм может рандомизировать адреса кода ядра и данных при каждой загрузке. К примеру, статический адрес, указанный в /boot/System.map, сдвигается на некоторое случайное значение.</p>
<empty-line/>
<p>Задача KASLR – защищать пространство ядра от атак. В случае отсутствия этого механизма атакующему было бы проще отыскать фиксированный целевой адрес, после чего с помощью возвратно-ориентированного программирования вставить вредоносный код для выполнения или получения нужных данных по фиктивному указателю.</p>
<empty-line/>
<p> KASLR противостоит подобным атакам, не позволяя атакующему прямиком узнать целевой адрес. Хотя метод подбора здесь все еще может сработать. Если адрес символа в /proc/kallsyms отличается от адреса в /boot/System.map, ядро активирует KASLR.</p>
<empty-line/>
<p><strong>$ grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub</strong></p>
<p><strong>GRUB_CMDLINE_LINUX_DEFAULT=</strong><strong>"quiet splash"</strong></p>
<p><strong>$ sudo grep sys_call_table /boot/System.map-$(uname -r)</strong></p>
<p><strong>ffffffff82000300 R sys_call_table</strong></p>
<p><strong>$ sudo grep sys_call_table /proc/kallsyms</strong></p>
<p><strong>ffffffff820013a0 R sys_call_table</strong></p>
<p><strong><emphasis># Перезагрузка</emphasis></strong></p>
<p><strong>$ sudo grep sys_call_table /boot/System.map-$(uname -r)</strong></p>
<p><strong>ffffffff82000300 R sys_call_table</strong></p>
<p><strong>$ sudo grep sys_call_table /proc/kallsyms</strong></p>
<p><strong>ffffffff86400300 R sys_call_table</strong></p>
<empty-line/>
<p>Если KASLR активна, то после каждой перезагрузки необходимо уделять внимание адресу из /proc/kallsyms.</p>
<empty-line/>
<p>Поэтому для использования адреса из /boot/System.map нужно будет убедиться, что KASLR отключена.</p>
<empty-line/>
<p>Отключить его можно, добавив при очередной загрузке параметр nokaslr:</p>
<empty-line/>
<p><strong>$ grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub</strong></p>
<p><strong>GRUB_CMDLINE_LINUX_DEFAULT=</strong><strong>"quiet splash"</strong></p>
<p><strong>$ sudo perl -i -pe </strong><strong>'m/quiet/ and s//quiet nokaslr/'</strong><strong> /etc/default/grub</strong></p>
<p><strong>$ grep quiet /etc/default/grub</strong></p>
<p><strong>GRUB_CMDLINE_LINUX_DEFAULT=</strong><strong>"quiet nokaslr splash"</strong></p>
<p><strong>$ sudo update-grub</strong></p>
<empty-line/>
<p>Дополнительно по этой теме читайте:</p>
<empty-line/>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/804849/">Cook: Security things in Linux v5.3</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/12211/">Unexporting the system call table</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/810077/">Control-flow integrity for the kernel</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/813350/">Unexporting kallsyms_lookup_name()</a></p>
<p><strong>● </strong><a l:href="https://www.kernel.org/doc/Documentation/kprobes.txt">Kernel Probes (Kprobes)</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/569635/">Kernel address space layout randomization</a></p>
<empty-line/>
<p>Приведенный здесь исходный код является примером подобного модуля ядра. Мы хотим реализовать «слежку» за определенным пользователем и выводить (pr_info()) сообщение при каждом открытии им файла. С этой целью мы заменяем системный вызов sys_open собственной функцией our_sys_open. Эта функция проверяет uid текущего процесса, и если оно совпадает с uid, за которым мы следим, вызывает pr_info() для отображения имени открываемого файла. Затем она в любом случае вызывает оригинальную функцию sys_open с теми же параметрами, чтобы уже реально открыть файл.</p>
<empty-line/>
<p>Функция init_module заменяет нужную запись в sys_call_table и сохраняет оригинальный указатель в переменной.</p>
<empty-line/>
<p>В последствии функция cleanup_module использует эту переменную для восстановления исходного состояния таблицы. Это опасный подход, поскольку есть вероятность, что два модуля изменят один и тот же системный вызов.</p>
<empty-line/>
<p>Представьте, что у нас есть два модуля, <emphasis>A</emphasis> и <emphasis>B</emphasis>. У <emphasis>А</emphasis> системным вызовом для открытия файла будет A_open, а у <emphasis>В</emphasis> им будет B_open. Теперь, при внедрении <emphasis>А</emphasis> в ядро соответствующий системный вызов будет заменен на A_open, который по завершению вызовет sys_open. Далее в ядро внедряется <emphasis>В</emphasis>, заменяя системный вызов <emphasis>А</emphasis> на B_open, который по завершению вызовет тот самый A_open, являющийся для него оригинальным.</p>
<empty-line/>
<p>Теперь, если первым будет удален <emphasis>В</emphasis>, то все нормально – он просто восстановит системный вызов на A_open, который вызывает оригинал. Но вот если сначала удалить <emphasis>А</emphasis>, а затем <emphasis>В</emphasis>, то в системе произойдет сбой. Удаление <emphasis>А</emphasis> приведет к восстановлению исходного системного вызова, sys_open, исключив из процесса <emphasis>B</emphasis>.</p>
<empty-line/>
<p>Затем, когда будет удаляться <emphasis>В</emphasis>, он постарается восстановить системный вызов на тот, который считает исходным, то есть A_open, но его в памяти уже не окажется.</p>
<empty-line/>
<p>На первый взгляд эту проблему можно разрешить, проверив, совпадает ли системный вызов с нашей функцией открытия – если да, то просто его не менять (чтобы <emphasis>В</emphasis> не трогал системный вызов при удалении). Но это создаст еще большую проблему.</p>
<empty-line/>
<p>При удалении <emphasis>А</emphasis> увидит, что системный вызов был заменен на B_open и больше не указывает на A_open, а значит не станет восстанавливать его на sys_open, пока не будет удален из памяти.</p>
<empty-line/>
<p>К сожалению, в итоге <emphasis>В</emphasis> по-прежнему будет пытаться вызвать A_Open, которого больше нет, так что даже без удаления <emphasis>В</emphasis> система все равно даст сбой.</p>
<empty-line/>
<p>Заметьте, что все описанные проблемы делают перехват системных вызовов нецелесообразным для использования в продакшн-среде. И для того, чтобы оградить людей от совершения потенциально вредных действий, sys_call_table больше не экспортируется.</p>
<empty-line/>
<p> То есть, если вы хотите сделать что-то большее, нежели просто выполнить этот пример, то вам потребуется пропатчить ядро, чтобы вернуть поддержку экспорта sys_call_table.</p>
<empty-line/>
<p>Код syscall.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * syscall.c </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Пример перехвата системного вызова. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Отключает защиту страниц на уровне процессора путем изменения </emphasis></strong></p>
<p><strong><emphasis> * 16 бита в регистре cr0 (возможно, относится только к Intel). </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Основан на примере Питера Джея Зальцмана и</emphasis></strong></p>
<p><strong><emphasis> * https://bbs.archlinux.org/viewtopic.php?id=139406 </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/delay.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/moduleparam.h&gt; /* Будет содержать параметры. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/unistd.h&gt; /* Список системных вызовов. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong><emphasis>/* Для текущей структуры (процесса). Необходимы для понимания, кто </emphasis></strong></p>
<p><strong><emphasis> * является текущим пользователем. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/sched.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; </strong></p>
<p><strong><emphasis>/* По ходу изменения ядра изменяется и способ обращения к "sys_call_table" </emphasis></strong></p>
<p><strong><emphasis> * - до v5.4       : ручной поиск символов </emphasis></strong></p>
<p><strong><emphasis> * - с v5.5 по v5.6: использование kallsyms_lookup_name() </emphasis></strong></p>
<p><strong><emphasis> * - v5.7+         : Kprobes либо определенный параметр модуля ядра </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* В Linux v5.11+ внутренние вызовы ядра к ksys_close() были удалены. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#if (LINUX_VERSION_CODE &lt; KERNEL_VERSION(5, 7, 0)) </strong></p>
<p><strong>#if LINUX_VERSION_CODE &lt;= KERNEL_VERSION(5, 4, 0) </strong></p>
<p><strong>#define HAVE_KSYS_CLOSE 1 </strong></p>
<p><strong>#include </strong><strong>&lt;linux/syscalls.h&gt; /* Для ksys_close() */ </strong></p>
<p><strong>#else </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kallsyms.h&gt; /* Для kallsyms_lookup_name */ </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#else </strong></p>
<p><strong>#if defined(CONFIG_KPROBES) </strong></p>
<p><strong>#define HAVE_KPROBES 1 </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kprobes.h&gt; </strong></p>
<p><strong>#else </strong></p>
<p><strong>#define HAVE_PARAM 1 </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kallsyms.h&gt; /* Для sprint_symbol */ </strong></p>
<p><strong><emphasis>/* Адрес sys_call_table, который можно получить поиском по </emphasis></strong></p>
<p><strong><emphasis> * "/boot/System.map" или "/proc/kallsyms". В ядре v5.7+, когда </emphasis></strong></p>
<p><strong><emphasis> * CONFIG_KPROBES отсутствует, можно вводить этот параметр, иначе модуль </emphasis></strong></p>
<p><strong><emphasis> * будет производить поиск по всей памяти. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> sym = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>module_param(sym, ulong, </strong><strong>0644</strong><strong>); </strong></p>
<p><strong>#endif </strong><strong><emphasis>/* CONFIG_KPROBES */</emphasis></strong></p>
<p><strong>#endif </strong><strong><emphasis>/* Version &lt; v5.7 */</emphasis></strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> **sys_call_table; </strong></p>
<p><strong><emphasis>/* UID, за которым мы хотим следить – будет заполняться из командной строки. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong><strong> uid; </strong></p>
<p><strong>module_param(uid, </strong><strong>int</strong><strong>, </strong><strong>0644</strong><strong>); </strong></p>
<p><strong><emphasis>/* Указатель на исходный системный вызов. Мы сохраняем его, а не</emphasis></strong></p>
<p><strong><emphasis> * вызываем исходную функцию (sys_open), так как кто-то другой мог </emphasis></strong></p>
<p><strong><emphasis> * заменить этот системный вызов до нас. Заметьте, что это не гарантирует </emphasis></strong></p>
<p><strong><emphasis> * 100% безопасность, поскольку, если до этого sys_open уже был </emphasis></strong></p>
<p><strong><emphasis> * заменен другим модулем, то внедрение нашего приведет </emphasis></strong></p>
<p><strong><emphasis> * к вызову функции в том модуле - а он может быть уже удален. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Еще одна причина в том, что мы не можем получить sys_open, поскольку </emphasis></strong></p>
<p><strong><emphasis> * это статическая переменная, и она не экспортируется. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong><strong> asmlinkage </strong><strong>int</strong><strong> (*original_call)(</strong><strong>const</strong> <strong>char</strong><strong> *, </strong><strong>int</strong><strong>, </strong><strong>int</strong><strong>); </strong></p>
<p><strong><emphasis>/* Функция, которой мы заменяем sys_open. Для нахождения точного прототипа</emphasis></strong></p>
<p><strong><emphasis> * с числом и типом аргументов сначала мы находим исходную функцию</emphasis></strong></p>
<p><strong><emphasis> * (в fs/open.c). </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * В теории это означает, что мы привязаны к текущей версии ядра. На  </emphasis></strong></p>
<p><strong><emphasis> * практике же системные вызовы почти никогда не меняются (это бы внесло </emphasis></strong></p>
<p><strong><emphasis> * беспорядок и потребовало перекомпиляции программ, так как системные вызовы </emphasis></strong></p>
<p><strong><emphasis> * являются интерфейсом между ядром и процессами). </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong><strong> asmlinkage </strong><strong>int</strong> <strong>our_sys_open</strong><strong>(</strong><strong>const</strong> <strong>char</strong><strong> *filename, </strong><strong>int</strong><strong> flags, </strong><strong>int</strong><strong> mode) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>char</strong><strong> ch; </strong></p>
<p>    <strong><emphasis>/* В случае соответствия сообщить об открытом файле. */</emphasis></strong></p>
<p><strong>    pr_info(</strong><strong>"Opened file by %d: "</strong><strong>, uid); </strong></p>
<p>    <strong>do</strong><strong> { </strong></p>
<p><strong>        get_user(ch, (</strong><strong>char</strong><strong> __user *)filename + i); </strong></p>
<p><strong>        i++; </strong></p>
<p><strong>        pr_info(</strong><strong>"%c"</strong><strong>, ch); </strong></p>
<p><strong>    } </strong><strong>while</strong><strong> (ch != </strong><strong>0</strong><strong>); </strong></p>
<p><strong>    pr_info(</strong><strong>"\n"</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Вызов исходной sys_open – иначе мы потеряем возможность открывать </emphasis></strong></p>
<p><strong><emphasis>     * файлы. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>return</strong><strong> original_call(filename, flags, mode); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> **</strong><strong>aquire_sys_call_table</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>#ifdef HAVE_KSYS_CLOSE </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong> <strong>int</strong><strong> offset = PAGE_OFFSET; </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> **sct; </strong></p>
<p>    <strong>while</strong><strong> (offset &lt; ULLONG_MAX) { </strong></p>
<p><strong>        sct = (</strong><strong>unsigned</strong> <strong>long</strong><strong> **)offset; </strong></p>
<p>        <strong>if</strong><strong> (sct[__NR_close] == (</strong><strong>unsigned</strong> <strong>long</strong><strong> *)ksys_close) </strong></p>
<p>            <strong>return</strong><strong> sct; </strong></p>
<p><strong>        offset += </strong><strong>sizeof</strong><strong>(</strong><strong>void</strong><strong> *); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#ifdef HAVE_PARAM </strong></p>
<p>    <strong>const</strong> <strong>char</strong><strong> sct_name[</strong><strong>15</strong><strong>] = </strong><strong>"sys_call_table"</strong><strong>; </strong></p>
<p>    <strong>char</strong><strong> symbol[</strong><strong>40</strong><strong>] = { </strong><strong>0</strong><strong> }; </strong></p>
<p>    <strong>if</strong><strong> (sym == </strong><strong>0</strong><strong>) { </strong></p>
<p><strong>        pr_alert(</strong><strong>"For Linux v5.7+, Kprobes is the preferable way to get "</strong></p>
<p>                 <strong>"symbol.\n"</strong><strong>); </strong></p>
<p><strong>        pr_info(</strong><strong>"If Kprobes is absent, you have to specify the address of "</strong></p>
<p>                <strong>"sys_call_table symbol\n"</strong><strong>); </strong></p>
<p><strong>        pr_info(</strong><strong>"by /boot/System.map or /proc/kallsyms, which contains all the "</strong></p>
<p>                <strong>"symbol addresses, into sym parameter.\n"</strong><strong>); </strong></p>
<p>        <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    sprint_symbol(symbol, sym); </strong></p>
<p>    <strong>if</strong><strong> (!</strong><strong>strncmp</strong><strong>(sct_name, symbol, </strong><strong>sizeof</strong><strong>(sct_name) - </strong><strong>1</strong><strong>)) </strong></p>
<p>        <strong>return</strong><strong> (</strong><strong>unsigned</strong> <strong>long</strong><strong> **)sym; </strong></p>
<p>    <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>#endif </strong></p>
<p><strong>#ifdef HAVE_KPROBES </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> (*kallsyms_lookup_name)(</strong><strong>const</strong> <strong>char</strong><strong> *name); </strong></p>
<p>    <strong>struct</strong> <strong>kprobe</strong> <strong>kp</strong><strong> = { </strong></p>
<p><strong>        .symbol_name = </strong><strong>"kallsyms_lookup_name"</strong><strong>, </strong></p>
<p><strong>    }; </strong></p>
<p>    <strong>if</strong><strong> (register_kprobe(&amp;kp) &lt; </strong><strong>0</strong><strong>) </strong></p>
<p>        <strong>return</strong> <strong>NULL</strong><strong>; </strong></p>
<p><strong>    kallsyms_lookup_name = (</strong><strong>unsigned</strong> <strong>long</strong><strong> (*)(</strong><strong>const</strong> <strong>char</strong><strong> *name))kp.addr; </strong></p>
<p><strong>    unregister_kprobe(&amp;kp); </strong></p>
<p><strong>#endif </strong></p>
<p>    <strong>return</strong><strong> (</strong><strong>unsigned</strong> <strong>long</strong><strong> **)kallsyms_lookup_name(</strong><strong>"sys_call_table"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 3, 0) </strong></p>
<p><strong>static</strong> <strong>inline</strong> <strong>void</strong><strong> __write_cr0(</strong><strong>unsigned</strong> <strong>long</strong><strong> cr0) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>asm</strong> <strong>volatile</strong><strong>(</strong><strong>"mov %0,%%cr0"</strong><strong> : </strong><strong>"+r"</strong><strong>(cr0) : : </strong><strong>"memory"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>#else </strong></p>
<p><strong>#define __write_cr0 write_cr0 </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>enable_write_protection</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> cr0 = read_cr0(); </strong></p>
<p><strong>    set_bit(</strong><strong>16</strong><strong>, &amp;cr0); </strong></p>
<p><strong>    __write_cr0(cr0); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>disable_write_protection</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> cr0 = read_cr0(); </strong></p>
<p><strong>    clear_bit(</strong><strong>16</strong><strong>, &amp;cr0); </strong></p>
<p><strong>    __write_cr0(cr0); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>syscall_start</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>if</strong><strong> (!(sys_call_table = aquire_sys_call_table())) </strong></p>
<p>        <strong>return</strong> <strong>-1</strong><strong>; </strong></p>
<p><strong>    disable_write_protection(); </strong></p>
<p>    <strong><emphasis>/* Отслеживание исходной функции открытия. */</emphasis></strong></p>
<p><strong>    original_call = (</strong><strong>void</strong><strong> *)sys_call_table[__NR_open]; </strong></p>
<p>    <strong><emphasis>/* Использование вместо нее собственной функции. */</emphasis></strong></p>
<p><strong>    sys_call_table[__NR_open] = (</strong><strong>unsigned</strong> <strong>long</strong><strong> *)our_sys_open; </strong></p>
<p><strong>    enable_write_protection(); </strong></p>
<p><strong>    pr_info(</strong><strong>"Spying on UID:%d\n"</strong><strong>, uid); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>syscall_end</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>if</strong><strong> (!sys_call_table) </strong></p>
<p>        <strong>return</strong><strong>; </strong></p>
<p>    <strong><emphasis>/* Восстановление исходного системного вызова. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (sys_call_table[__NR_open] != (</strong><strong>unsigned</strong> <strong>long</strong><strong> *)our_sys_open) { </strong></p>
<p><strong>        pr_alert(</strong><strong>"Somebody else also played with the "</strong><strong>); </strong></p>
<p><strong>        pr_alert(</strong><strong>"open system call\n"</strong><strong>); </strong></p>
<p><strong>        pr_alert(</strong><strong>"The system may be left in "</strong><strong>); </strong></p>
<p><strong>        pr_alert(</strong><strong>"an unstable state.\n"</strong><strong>); </strong></p>
<p><strong>    } </strong></p>
<p><strong>    disable_write_protection(); </strong></p>
<p><strong>    sys_call_table[__NR_open] = (</strong><strong>unsigned</strong> <strong>long</strong><strong> *)original_call; </strong></p>
<p><strong>    enable_write_protection(); </strong></p>
<p><strong>    msleep(</strong><strong>2000</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(syscall_start); </strong></p>
<p><strong>module_exit(syscall_end); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>11. Блокировка процессов и потоков</strong></p>
<empty-line/>
<p>▍ 11.1 Ожидание</p>
<empty-line/>
<p>Что вы делаете, когда вас просят сделать что-то, чем пока вы заняться не можете? Как обычный человек, которого просит другой такой же человек, вы на это можете сказать лишь: «Я пока занят. Не мешай». Но если вы являетесь ядром, а обратился к вам процесс, то у вас есть другой вариант.</p>
<empty-line/>
<p>Вы можете поставить этот процесс в режим ожидания (sleep), пока не появится возможность его обслужить. По факту ядро постоянно отправляет процессы в ожидание и пробуждает их. Именно так реализовано одновременное выполнение множества процессов на одном ЦПУ.</p>
<empty-line/>
<p>И текущий модуль ядра является примером этого. Файл (с именем /proc/sleep) одновременно может быть открыт лишь одним процессом. Если он уже открыт, модуль вызывает wait_event_interruptible. Самый простой способ сохранять файл открытым – это использовать команду:</p>
<empty-line/>
<p><strong>tail -f</strong></p>
<empty-line/>
<p>Эта функция изменяет статус задачи (задача – это структура данных ядра, содержащая информацию о процессе и системном вызове, в котором он находится, если таковой присутствует) на TASK_INTERRUPTIBLE. Это означает, что выполнение задачи будет отложено до момента ее пробуждения, а пока она добавляется в WaitQ, то есть очередь задач, ожидающих возможности получить доступ к файлу. Затем эта функция вызывает планировщик для переключения контекста на другой процесс, которому нужен ЦПУ.</p>
<empty-line/>
<p>Когда процесс закончил работу с файлом, он его закрывает, и вызывается module_close. Эта функция пробуждает все процессы в очереди (не существует механизма для пробуждения их по одиночке), после чего делает возврат, и процесс, закрывший файл, может продолжать свое выполнение. Далее в свое время планировщик решает, что этот процесс уже достаточно поработал, и передает управление ЦПУ другому процессу из очереди. Свое выполнение этот процесс начинает с момента, следующего сразу за вызовом module_interruptible_sleep_on.</p>
<empty-line/>
<p>Это означает, что процесс все еще находится в режиме ядра – по имеющейся у него информации, он отправил системный вызов open(), который возврат еще не сделал. Процессу не известно, что большую часть времени между моментом отправки этого вызова и его возвратом ЦПУ использовался кем-то еще.</p>
<empty-line/>
<p>После этого он может установить глобальную переменную, указывающую всем другим процессам, что файл пока открыт, и продолжить выполнение. Когда другие процессы будут получать долю внимания ЦПУ, они будут видеть эту установленную переменную и возвращаться в режим ожидания.</p>
<empty-line/>
<p>Итак, мы используем tail -f, чтобы фоново удерживать файл в открытом состоянии при попытке получить к нему доступ другим процессом (также в фоновом режиме, чтобы не пришлось переключаться на другой VT). Как только первый фоновый процесс завершится командой kill %1, пробудится второй, который получит доступ к файлу, а затем также завершится.</p>
<empty-line/>
<p>При этом module_close не единственный, кто имеет право на пробуждение процессов, ожидающих доступа к файлу. Помимо этого, они могут пробуждаться сигналом <emphasis>Ctrl+C</emphasis> (SIGINT). Причина тому в использованной нами функции module_interruptible_sleep_on. Можно было задействовать module_sleep_on, но это бы сильно разозлило пользователей, чьи нажатия <emphasis>Ctrl+С</emphasis> тогда бы игнорировались. В этом случае нам нужно сразу же возвращать -EINTR. Это необходимо, чтобы пользователи могли, например, завершить процесс до получения им доступа к файлу.</p>
<p>Нужно помнить и еще кое-что. Иногда процессы не хотят спать, они хотят незамедлительно получить либо желаемое, либо ответ, что это действие выполнить нельзя. Подобные процессы используют при открытии файла флаг O_NONBLOCK.</p>
<empty-line/>
<p>На это ядро должно возвращать код ошибки -EAGAIN от операций, которые в противном случае должны были заблокироваться, к примеру, при открытии файла, как в нашем примере. Для открытия файла с O_NONBLOCK можно использовать программу cat_nonblock, расположенную в каталоге examples/other.</p>
<empty-line/>
<p><strong>$ sudo insmod sleep.ko</strong></p>
<p><strong>$ cat_nonblock /proc/sleep</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>$ tail -f /proc/sleep &amp;</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>tail: /proc/sleep: file truncated</strong></p>
<p><strong>[</strong><strong>1</strong><strong>] </strong><strong>6540</strong></p>
<p><strong>$ cat_nonblock /proc/sleep</strong></p>
<p><strong>Open would block</strong></p>
<p><strong>$ kill %</strong><strong>1</strong></p>
<p><strong>[</strong><strong>1</strong><strong>]+  Terminated              tail -f /proc/sleep</strong></p>
<p><strong>$ cat_nonblock /proc/sleep</strong></p>
<p><strong>Last input:</strong></p>
<p><strong>$</strong></p>
<empty-line/>
<p>Код sleep.ko:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * sleep.c – создаем файл /proc, и если его одновременно будут пытаться </emphasis></strong></p>
<p><strong><emphasis> * открыть несколько процессов, все их отправляем в ожидание. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; /* Для работы с ядром. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; /* Для модуля. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/proc_fs.h&gt; /* Необходим для использования procfs */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/sched.h&gt; /* Для усыпления процессов и их пробуждения. */  </strong></p>
<p><strong>#include </strong><strong>&lt;linux/uaccess.h&gt; /* Для get_user и put_user. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/version.h&gt; </strong></p>
<p><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5, 6, 0) </strong></p>
<p><strong>#define HAVE_PROC_OPS </strong></p>
<p><strong>#endif </strong></p>
<p><strong><emphasis>/* Здесь мы храним последнее полученное сообщение, подтверждая возможность </emphasis></strong></p>
<p><strong><emphasis> * обработки ввода. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#define MESSAGE_LENGTH 80 </strong></p>
<p><strong>static</strong> <strong>char</strong><strong> message[MESSAGE_LENGTH]; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>proc_dir_entry</strong><strong> *</strong><strong>our_proc_file</strong><strong>; </strong></p>
<p><strong>#define PROC_ENTRY_FILENAME </strong><strong>"sleep"</strong></p>
<p><strong><emphasis>/* Так как мы используем структуру файловых операций, то не можем </emphasis></strong></p>
<p><strong><emphasis> * задействовать специальную файловую систему proc и должны </emphasis></strong></p>
<p><strong><emphasis> * использовать стандартную функцию чтения, которой эта функция и является. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>module_output</strong><strong>(struct file *file, </strong><strong><emphasis>/* см. include/linux/fs.h   */</emphasis></strong></p>
<p>                             <strong>char</strong><strong> __user *buf, </strong><strong><emphasis>/* Буфер для данных </emphasis></strong></p>
<p><strong><emphasis>                                         (в сегменте пользователя).    */</emphasis></strong></p>
<p>                             <strong>size_t</strong><strong> len, </strong><strong><emphasis>/* Длина буфера. */</emphasis></strong></p>
<p>                             <strong>loff_t</strong><strong> *offset) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>static</strong> <strong>int</strong><strong> finished = </strong><strong>0</strong><strong>; </strong></p>
<p>    <strong>int</strong><strong> i; </strong></p>
<p>    <strong>char</strong><strong> output_msg[MESSAGE_LENGTH + </strong><strong>30</strong><strong>]; </strong></p>
<p>    <strong><emphasis>/* Возвращаем 0, обозначая конец файла. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (finished) { </strong></p>
<p><strong>        finished = </strong><strong>0</strong><strong>; </strong></p>
<p>        <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>sprintf</strong><strong>(output_msg, </strong><strong>"Last input:%s\n"</strong><strong>, message); </strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; len &amp;&amp; output_msg[i]; i++) </strong></p>
<p><strong>        put_user(output_msg[i], buf + i); </strong></p>
<p><strong>    finished = </strong><strong>1</strong><strong>; </strong></p>
<p>    <strong>return</strong><strong> i; </strong><strong><emphasis>/* Возвращаем количество “считанных” байт. */</emphasis></strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Эта функция получает ввод от пользователя, когда он производит запись</emphasis></strong></p>
<p><strong><emphasis> * в файл /proc. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>module_input</strong><strong>(struct file *file, </strong><strong><emphasis>/* Сам файл. */</emphasis></strong></p>
<p>                            <strong>const</strong> <strong>char</strong><strong> __user *buf, </strong><strong><emphasis>/* Буфер с вводом. */</emphasis></strong></p>
<p>                            <strong>size_t</strong><strong> length, </strong><strong><emphasis>/* Длина буфера. */</emphasis></strong></p>
<p>                            <strong>loff_t</strong><strong> *offset) </strong><strong><emphasis>/* Cмещение до файла – игнорируется.  */</emphasis></strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i; </strong></p>
<p>    <strong><emphasis>/* Помещение ввода в Message, где позднее его сможет использовать  </emphasis></strong></p>
<p><strong><emphasis>     * module_output. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; MESSAGE_LENGTH - </strong><strong>1</strong><strong> &amp;&amp; i &lt; length; i++) </strong></p>
<p><strong>        get_user(message[i], buf + i); </strong></p>
<p>    <strong><emphasis>/* Нам нужна стандартная строка, завершающаяся нулем. */</emphasis></strong></p>
<p><strong>    message[i] = </strong><strong>'\0'</strong><strong>; </strong></p>
<p>    <strong><emphasis>/* Нужно вернуть количество использованных во вводе символов. */</emphasis></strong></p>
<p>    <strong>return</strong><strong> i; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* 1, если файл сейчас уже кем-то открыт. */</emphasis></strong></p>
<p><strong>static</strong> <strong>atomic_t</strong><strong> already_open = ATOMIC_INIT(</strong><strong>0</strong><strong>); </strong></p>
<p><strong><emphasis>/* Очередь процессов, ожидающих доступа к файлу. */</emphasis></strong></p>
<p><strong>static</strong> <strong>DECLARE_WAIT_QUEUE_HEAD</strong><strong>(waitq); </strong></p>
<p><strong><emphasis>/* Вызывается при открытии файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>module_open</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* Если флаги при открытии файла содержат O_NONBLOCK, значит процесс </emphasis></strong></p>
<p><strong><emphasis>     * не хочет ждать доступности этого файла. В таком случае, если файл </emphasis></strong></p>
<p><strong><emphasis>     * уже открыт, нужно будет не блокировать процесс, который </emphasis></strong></p>
<p><strong><emphasis>     * предпочитает оставаться открытым, а вернуть -EAGAIN, сообщив ему, </emphasis></strong></p>
<p><strong><emphasis>     * что попытку нужно повторить позже.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>if</strong><strong> ((file-&gt;f_flags &amp; O_NONBLOCK) &amp;&amp; atomic_read(&amp;already_open)) </strong></p>
<p>        <strong>return</strong><strong> -EAGAIN; </strong></p>
<p>    <strong><emphasis>/* Это подходящее место для try_module_get(THIS_MODULE), так как, </emphasis></strong></p>
<p><strong><emphasis>     * если процесс находится в цикле в модуле ядра, то этот модуль </emphasis></strong></p>
<p><strong><emphasis>     * извлекать нельзя. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    try_module_get(THIS_MODULE); </strong></p>
<p>    <strong>while</strong><strong> (atomic_cmpxchg(&amp;already_open, </strong><strong>0</strong><strong>, </strong><strong>1</strong><strong>)) { </strong></p>
<p>        <strong>int</strong><strong> i, is_sig = </strong><strong>0</strong><strong>; </strong></p>
<p>        <strong><emphasis>/* Эта функция отправляет текущий процесс, включая любые системные </emphasis></strong></p>
<p><strong><emphasis>         * вызовы, например наши, в ожидание. Выполнение продолжится сразу  </emphasis></strong></p>
<p><strong><emphasis>         * после вызова этой функции либо при вызове </emphasis></strong></p>
<p><strong><emphasis>         * wake_up(&amp;waitq) (это делает только module_close при закрытии  </emphasis></strong></p>
<p><strong><emphasis>         * файла), либо при отправке процессу сигнала вроде Ctrl+C.</emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        wait_event_interruptible(waitq, !atomic_read(&amp;already_open)); </strong></p>
<p>        <strong><emphasis>/* Если пробуждение произошло из-за получения сигнала, который не </emphasis></strong></p>
<p><strong><emphasis>         * блокируется, вернуть -EINTR (провал системного вызова). Это    </emphasis></strong></p>
<p><strong><emphasis>         * позволяет завершать или останавливать процессы. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p>        <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; _NSIG_WORDS &amp;&amp; !is_sig; i++) </strong></p>
<p><strong>            is_sig = current-&gt;pending.signal.sig[i] &amp; ~current-&gt;blocked.sig[i]; </strong></p>
<p>        <strong>if</strong><strong> (is_sig) { </strong></p>
<p>            <strong><emphasis>/* Важно поместить module_put(THIS_MODULE) сюда, так как</emphasis></strong></p>
<p><strong><emphasis>             * для процессов, где окажется прервана операция open(), </emphasis></strong></p>
<p><strong><emphasis>             * соответствующей операции close() не будет. Если не </emphasis></strong></p>
<p><strong><emphasis>             * декрементировать счетчик использования здесь, у нас  </emphasis></strong></p>
<p><strong><emphasis>             * останется в нем положительный счет, который мы никак уже </emphasis></strong></p>
<p><strong><emphasis>             * не приведем к нулю. В итоге у нас получится бессмертный </emphasis></strong></p>
<p><strong><emphasis>             * модуль, для извлечения которого потребуется перезагрузка. </emphasis></strong></p>
<p><strong><emphasis>             */</emphasis></strong></p>
<p><strong>            module_put(THIS_MODULE); </strong></p>
<p>            <strong>return</strong><strong> -EINTR; </strong></p>
<p><strong>        } </strong></p>
<p><strong>    } </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong><strong><emphasis>/* Разрешение доступа. */</emphasis></strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Вызывается при закрытии файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>module_close</strong><strong>(struct inode *inode, struct file *file) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* Устанавливаем already_open на нуль, чтобы один из процессов в waitq </emphasis></strong></p>
<p><strong><emphasis>     * мог установить already_open обратно на один и открыть файл. В итоге </emphasis></strong></p>
<p><strong><emphasis>     * остальные процессы при вызове будут видеть, что already_open </emphasis></strong></p>
<p><strong><emphasis>     * равен одному, в связи с чем возвращаться в ожидание. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    atomic_set(&amp;already_open, </strong><strong>0</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Пробуждение всех процессов в waitq, чтобы очередной ожидающий мог </emphasis></strong></p>
<p><strong><emphasis>     * получить доступ к файлу. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    wake_up(&amp;waitq); </strong></p>
<p><strong>    module_put(THIS_MODULE); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong><strong><emphasis>/* Успех. */</emphasis></strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Структуры для регистрации в качестве файла /proc с указателями на все </emphasis></strong></p>
<p><strong><emphasis> * связанные функции. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong><emphasis>/* Файловые операции нашего файла /proc. Здесь размещаются указатели на</emphasis></strong></p>
<p><strong><emphasis> * все функции, вызываемые, когда кто-то пытается произвести действия с </emphasis></strong></p>
<p><strong><emphasis> * файлом. NULL означает, что мы не хотим выполнять какое-то действие. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#ifdef HAVE_PROC_OPS </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>proc_ops</strong> <strong>file_ops_4_our_proc_file</strong><strong> = { </strong></p>
<p><strong>    .proc_read = module_output, </strong><strong><emphasis>/* "Считывание" из файла. */</emphasis></strong></p>
<p><strong>    .proc_write = module_input, </strong><strong><emphasis>/* "Запись" в файл. */</emphasis></strong></p>
<p><strong>    .proc_open = module_open, </strong><strong><emphasis>/* Вызывается при открытии файла /proc */</emphasis></strong></p>
<p><strong>    .proc_release = module_close, </strong><strong><emphasis>/* Вызывается при его закрытии. */</emphasis></strong></p>
<p><strong>}; </strong></p>
<p><strong>#else </strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>file_ops_4_our_proc_file</strong><strong> = { </strong></p>
<p><strong>    .read = module_output, </strong></p>
<p><strong>    .write = module_input, </strong></p>
<p><strong>    .open = module_open, </strong></p>
<p><strong>    .release = module_close, </strong></p>
<p><strong>}; </strong></p>
<p><strong>#endif </strong></p>
<p><strong><emphasis>/* Инициализация модуля – регистрация файла /proc. */</emphasis></strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>sleep_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    our_proc_file = </strong></p>
<p><strong>        proc_create(PROC_ENTRY_FILENAME, </strong><strong>0644</strong><strong>, </strong><strong>NULL</strong><strong>, &amp;file_ops_4_our_proc_file); </strong></p>
<p>    <strong>if</strong><strong> (our_proc_file == </strong><strong>NULL</strong><strong>) { </strong></p>
<p><strong>        remove_proc_entry(PROC_ENTRY_FILENAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>        pr_debug(</strong><strong>"Error: Could not initialize /proc/%s\n"</strong><strong>, PROC_ENTRY_FILENAME); </strong></p>
<p>        <strong>return</strong><strong> -ENOMEM; </strong></p>
<p><strong>    } </strong></p>
<p><strong>    proc_set_size(our_proc_file, </strong><strong>80</strong><strong>); </strong></p>
<p><strong>    proc_set_user(our_proc_file, GLOBAL_ROOT_UID, GLOBAL_ROOT_GID); </strong></p>
<p><strong>    pr_info(</strong><strong>"/proc/%s created\n"</strong><strong>, PROC_ENTRY_FILENAME); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong><emphasis>/* Очистка – снятие регистрации файла из /proc.  Это может быть опасно,  </emphasis></strong></p>
<p><strong><emphasis> * если в waitq еще есть ожидающие процессы, потому что они находятся </emphasis></strong></p>
<p><strong><emphasis> * внутри функции open(), которая будет выгружена. В 10 главе я объясняю, </emphasis></strong></p>
<p><strong><emphasis> * как в подобном случае избежать извлечения модуля. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>sleep_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    remove_proc_entry(PROC_ENTRY_FILENAME, </strong><strong>NULL</strong><strong>); </strong></p>
<p><strong>    pr_debug(</strong><strong>"/proc/%s removed\n"</strong><strong>, PROC_ENTRY_FILENAME); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(sleep_init); </strong></p>
<p><strong>module_exit(sleep_exit); </strong></p>
<p>Код cat_nonblock.c:</p>
<empty-line/>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> *  cat_nonblock.c – открывает файл и отображает содержимое, но в случае </emphasis></strong></p>
<p><strong><emphasis> *  необходимости ожидания ввода выходит. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;errno.h&gt; /* Для errno. */ </strong></p>
<p><strong>#include </strong><strong>&lt;fcntl.h&gt; /* Для открытия. */ </strong></p>
<p><strong>#include </strong><strong>&lt;stdio.h&gt; /* Стандартный ввод-вывод. */ </strong></p>
<p><strong>#include </strong><strong>&lt;stdlib.h&gt; /* Для выхода. */ </strong></p>
<p><strong>#include </strong><strong>&lt;unistd.h&gt; /* Для считывания.*/ </strong></p>
<p><strong>#define MAX_BYTES 1024 * 4 </strong></p>
<p><strong>int</strong> <strong>main</strong><strong>(</strong><strong>int</strong><strong> argc, </strong><strong>char</strong><strong> *argv[]) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> fd; </strong><strong><emphasis>/* Дескриптор считываемого файла. */</emphasis></strong></p>
<p>    <strong>size_t</strong><strong> bytes; </strong><strong><emphasis>/* Количество считываемых байт. */</emphasis></strong></p>
<p>    <strong>char</strong><strong> buffer[MAX_BYTES]; </strong><strong><emphasis>/* Буфер для этих байт. */</emphasis></strong></p>
<p>    <strong><emphasis>/* Использование. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (argc != </strong><strong>2</strong><strong>) { </strong></p>
<p>        <strong>printf</strong><strong>(</strong><strong>"Usage: %s &lt;filename&gt;\n"</strong><strong>, argv[</strong><strong>0</strong><strong>]); </strong></p>
<p>        <strong>puts</strong><strong>(</strong><strong>"Reads the content of a file, but doesn't wait for input"</strong><strong>); </strong></p>
<p>        <strong>exit</strong><strong>(</strong><strong>-1</strong><strong>); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong><emphasis>/* Открытие файла для считывания в неблокирующемся режиме. */</emphasis></strong></p>
<p><strong>    fd = open(argv[</strong><strong>1</strong><strong>], O_RDONLY | O_NONBLOCK); </strong></p>
<p>    <strong><emphasis>/* Если открытие провалилось. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (fd == </strong><strong>-1</strong><strong>) { </strong></p>
<p>        <strong>puts</strong><strong>(errno == EAGAIN ? </strong><strong>"Open would block"</strong><strong> : </strong><strong>"Open failed"</strong><strong>); </strong></p>
<p>        <strong>exit</strong><strong>(</strong><strong>-1</strong><strong>); </strong></p>
<p><strong>    } </strong></p>
<p>    <strong><emphasis>/* Считывание файла и вывод его содержимого. */</emphasis></strong></p>
<p>    <strong>do</strong><strong> { </strong></p>
<p>        <strong><emphasis>/* Считывание символов из файла. */</emphasis></strong></p>
<p><strong>        bytes = read(fd, buffer, MAX_BYTES); </strong></p>
<p>        <strong><emphasis>/* В случае ошибки сообщить о ней и завершиться. */</emphasis></strong></p>
<p>        <strong>if</strong><strong> (bytes == </strong><strong>-1</strong><strong>) { </strong></p>
<p>            <strong>if</strong><strong> (errno == EAGAIN) </strong></p>
<p>                <strong>puts</strong><strong>(</strong><strong>"Normally I'd block, but you told me not to"</strong><strong>); </strong></p>
<p>            <strong>else</strong></p>
<p>                <strong>puts</strong><strong>(</strong><strong>"Another read error"</strong><strong>); </strong></p>
<p>            <strong>exit</strong><strong>(</strong><strong>-1</strong><strong>); </strong></p>
<p><strong>        } </strong></p>
<p>        <strong><emphasis>/* Вывод символов. */</emphasis></strong></p>
<p>        <strong>if</strong><strong> (bytes &gt; </strong><strong>0</strong><strong>) { </strong></p>
<p>            <strong>for</strong><strong> (</strong><strong>int</strong><strong> i = </strong><strong>0</strong><strong>; i &lt; bytes; i++) </strong></p>
<p>                <strong>putchar</strong><strong>(buffer[i]); </strong></p>
<p><strong>        } </strong></p>
<p>        <strong><emphasis>/* Пока нет ошибок, и файл не закончился. */</emphasis></strong></p>
<p><strong>    } </strong><strong>while</strong><strong> (bytes &gt; </strong><strong>0</strong><strong>); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>}</strong></p>
<empty-line/>
<p>▍ 11.2 Завершение потоков</p>
<empty-line/>
<p>Иногда в модуле, имеющем несколько потоков, одно действие должно совершиться перед другим. И вместо использования команд /bin/sleep ядро реализует это другим способом, поддерживающим таймауты или прерывания.В примере ниже стартуют два потока, но один должен сработать раньше.</p>
<empty-line/>
<p>Код completion.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * completions.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/completion.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kthread.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>static</strong> <strong>struct</strong><strong> { </strong></p>
<p>    <strong>struct</strong> <strong>completion</strong> <strong>crank_comp</strong><strong>; </strong></p>
<p>    <strong>struct</strong> <strong>completion</strong> <strong>flywheel_comp</strong><strong>; </strong></p>
<p><strong>} machine; </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>machine_crank_thread</strong><strong>(</strong><strong>void</strong><strong> *arg) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"Turn the crank\n"</strong><strong>); </strong></p>
<p><strong>    complete_all(&amp;machine.crank_comp); </strong></p>
<p><strong>    complete_and_exit(&amp;machine.crank_comp, </strong><strong>0</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>machine_flywheel_spinup_thread</strong><strong>(</strong><strong>void</strong><strong> *arg) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    wait_for_completion(&amp;machine.crank_comp); </strong></p>
<p><strong>    pr_info(</strong><strong>"Flywheel spins up\n"</strong><strong>); </strong></p>
<p><strong>    complete_all(&amp;machine.flywheel_comp); </strong></p>
<p><strong>    complete_and_exit(&amp;machine.flywheel_comp, </strong><strong>0</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>completions_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>task_struct</strong><strong> *</strong><strong>crank_thread</strong><strong>; </strong></p>
<p>    <strong>struct</strong> <strong>task_struct</strong><strong> *</strong><strong>flywheel_thread</strong><strong>; </strong></p>
<p><strong>    pr_info(</strong><strong>"completions example\n"</strong><strong>); </strong></p>
<p><strong>    init_completion(&amp;machine.crank_comp); </strong></p>
<p><strong>    init_completion(&amp;machine.flywheel_comp); </strong></p>
<p><strong>    crank_thread = kthread_create(machine_crank_thread, </strong><strong>NULL</strong><strong>, </strong><strong>"KThread Crank"</strong><strong>); </strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(crank_thread)) </strong></p>
<p>        <strong>goto</strong><strong> ERROR_THREAD_1; </strong></p>
<p><strong>    flywheel_thread = kthread_create(machine_flywheel_spinup_thread, </strong><strong>NULL</strong><strong>, </strong></p>
<p>                                     <strong>"KThread Flywheel"</strong><strong>); </strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(flywheel_thread)) </strong></p>
<p>        <strong>goto</strong><strong> ERROR_THREAD_2; </strong></p>
<p><strong>    wake_up_process(flywheel_thread); </strong></p>
<p><strong>    wake_up_process(crank_thread); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>ERROR_THREAD_2: </strong></p>
<p><strong>    kthread_stop(crank_thread); </strong></p>
<p><strong>ERROR_THREAD_1: </strong></p>
<p>    <strong>return</strong> <strong>-1</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>completions_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    wait_for_completion(&amp;machine.crank_comp); </strong></p>
<p><strong>    wait_for_completion(&amp;machine.flywheel_comp); </strong></p>
<p><strong>    pr_info(</strong><strong>"completions exit\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(completions_init); </strong></p>
<p><strong>module_exit(completions_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Completions example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Структура machine хранит состояния завершения для этих двух потоков. В точке выхода каждого из них обновляется соответствующее состояние.</p>
<empty-line/>
<p>При этом для потока flywheel используется wait_for_completion, чтобы он не запустился преждевременно.</p>
<empty-line/>
<p>Так что, хоть flywheel_thread и стартует первым, загрузив модуль и выполнив dmesg, вы должны заметить, что сначала всегда происходит поворот рычага (crank), потому что поток маховика (flywheel) ожидает его завершения.</p>
<empty-line/>
<p>У функции wait_for_completion есть и другие вариации, которые включают таймауты и прерывания, но этого базового механизма вполне достаточно для множества типичных ситуаций без добавления излишней сложности.</p>
<empty-line/>
<p><strong>12. Избегание коллизий и взаимных блокировок</strong></p>
<empty-line/>
<p>Если процессы, выполняющиеся на разных ядрах или в разных потоках, попытаются обратиться к одной и той же области памяти, то вполне могут случиться странности, либо система просто заблокируется.</p>
<empty-line/>
<p>Для избежания этого в ядре существуют специальные функции взаимного исключения (мьютексы).</p>
<empty-line/>
<p>Они показывают, «занят» или «свободен» в данный момент фрагмент кода, исключая тем самым одновременные попытки его выполнения.</p>
<empty-line/>
<p>▍ 12.1 Мьютексы</p>
<empty-line/>
<p>Используются мьютексы ядра аналогично тому, как они развертываются в пользовательской среде.</p>
<empty-line/>
<p>И в большинстве случаев для избежания коллизий этого вполне может оказаться достаточно.</p>
<p>Код example_mutex.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * example_mutex.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/mutex.h&gt; </strong></p>
<p><strong>static</strong> <strong>DEFINE_MUTEX</strong><strong>(mymutex); </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>example_mutex_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> ret; </strong></p>
<p><strong>    pr_info(</strong><strong>"example_mutex init\n"</strong><strong>); </strong></p>
<p><strong>    ret = mutex_trylock(&amp;mymutex); </strong></p>
<p>    <strong>if</strong><strong> (ret != </strong><strong>0</strong><strong>) { </strong></p>
<p><strong>        pr_info(</strong><strong>"mutex is locked\n"</strong><strong>); </strong></p>
<p>        <strong>if</strong><strong> (mutex_is_locked(&amp;mymutex) == </strong><strong>0</strong><strong>) </strong></p>
<p><strong>            pr_info(</strong><strong>"The mutex failed to lock!\n"</strong><strong>); </strong></p>
<p><strong>        mutex_unlock(&amp;mymutex); </strong></p>
<p><strong>        pr_info(</strong><strong>"mutex is unlocked\n"</strong><strong>); </strong></p>
<p><strong>    } </strong><strong>else</strong></p>
<p><strong>        pr_info(</strong><strong>"Failed to lock\n"</strong><strong>); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_mutex_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example_mutex exit\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(example_mutex_init); </strong></p>
<p><strong>module_exit(example_mutex_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Mutex example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 12.2 Спин-блокировки</p>
<empty-line/>
<p>Спин-блокировки, или спинлоки, блокируют ЦПУ, на котором выполняется код, занимая 100% его ресурсов. В связи с этим механизм спинлоков желательно использовать только для кода, на выполнение которого требуется не более нескольких миллисекунд, чтобы с позиции пользователя не вызвать заметного замедления работы.</p>
<empty-line/>
<p>Примером в данном случае является ситуация <emphasis>irq safe</emphasis>, когда прерывания, происходящие во время блокировки, не забываются, а повторно активируются при ее снятии, используя переменную flags для сохранения своего состояния.</p>
<empty-line/>
<p>Код example_spinlock.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * example_spinlock.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/spinlock.h&gt; </strong></p>
<p><strong>static</strong> <strong>DEFINE_SPINLOCK</strong><strong>(sl_static); </strong></p>
<p><strong>static</strong> <strong>spinlock_t</strong><strong> sl_dynamic; </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_spinlock_static</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> flags; </strong></p>
<p><strong>    spin_lock_irqsave(&amp;sl_static, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Locked static spinlock\n"</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Безопасное выполнение задачи. Поскольку задействуется 100% ЦПУ,  </emphasis></strong></p>
<p><strong><emphasis>     * выполнение кода должно занимать не более нескольких миллисекунд. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    spin_unlock_irqrestore(&amp;sl_static, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Unlocked static spinlock\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_spinlock_dynamic</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> flags; </strong></p>
<p><strong>    spin_lock_init(&amp;sl_dynamic); </strong></p>
<p><strong>    spin_lock_irqsave(&amp;sl_dynamic, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Locked dynamic spinlock\n"</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Безопасное выполнение задачи. Поскольку задействуется 100% ЦПУ, </emphasis></strong></p>
<p><strong><emphasis>     * выполнение кода должно занимать не более нескольких миллисекунд. </emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p><strong>    spin_unlock_irqrestore(&amp;sl_dynamic, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Unlocked dynamic spinlock\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>example_spinlock_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example spinlock started\n"</strong><strong>); </strong></p>
<p><strong>    example_spinlock_static(); </strong></p>
<p><strong>    example_spinlock_dynamic(); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_spinlock_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example spinlock exit\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(example_spinlock_init); </strong></p>
<p><strong>module_exit(example_spinlock_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Spinlock example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 12.3 Блокировки для чтения и записи</p>
<empty-line/>
<p>Блокировки для выполнения чтения и записи – это специализированные спинлоки, позволяющие эксклюзивно считывать или производить запись.</p>
<empty-line/>
<p>Подобно предыдущему примеру, код ниже показывает ситуацию <emphasis>irq safe</emphasis>, когда в случае активации аппаратными прерываниями других функций, которое также могут выполнять нужные вам чтение/запись, эти функции не нарушат текущую логику выполнения.</p>
<empty-line/>
<p>Как и прежде, будет правильным решением, устанавливать подобную блокировку для максимально коротких задач, чтобы они не подвешивали систему и не вызывали недовольство пользователей относительно тирании вашего модуля.</p>
<empty-line/>
<p>Код example_rwlock.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * example_rwlock.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>static</strong> <strong>DEFINE_RWLOCK</strong><strong>(myrwlock); </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_read_lock</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> flags; </strong></p>
<p><strong>    read_lock_irqsave(&amp;myrwlock, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Read Locked\n"</strong><strong>); </strong></p>
<p>   <strong><emphasis>/* Считывание. */</emphasis></strong></p>
<p><strong>    read_unlock_irqrestore(&amp;myrwlock, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Read Unlocked\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_write_lock</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> flags; </strong></p>
<p><strong>    write_lock_irqsave(&amp;myrwlock, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Write Locked\n"</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Запись. */</emphasis></strong></p>
<p><strong>    write_unlock_irqrestore(&amp;myrwlock, flags); </strong></p>
<p><strong>    pr_info(</strong><strong>"Write Unlocked\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>example_rwlock_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example_rwlock started\n"</strong><strong>); </strong></p>
<p><strong>    example_read_lock(); </strong></p>
<p><strong>    example_write_lock(); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_rwlock_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example_rwlock exit\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(example_rwlock_init); </strong></p>
<p><strong>module_exit(example_rwlock_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Read/Write locks example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Конечно же, если вы уверены, что аппаратные прерывания не активируют никакие функции, которые могли бы нарушить логику, то можете использовать более простые read_lock(&amp;myrwlock) и read_unlock(&amp;myrwlock) либо соответствующие функции записи.</p>
<empty-line/>
<p>▍ 12.4 Атомарные операции</p>
<empty-line/>
<p>Если вы выполняете простую арифметику: сложение, вычитание или побитовые операции, тогда многоядерный и гиперпоточный мир может предложить еще один способ, как не позволить другим компонентам системы вмешаться в ваше действо. С помощью атомарных операций вы можете обеспечить, чтобы ваше сложение, вычитание или инвертирование битов произошли успешно и не были перезаписаны какими-либо сторонними процессами. Вот пример:</p>
<empty-line/>
<p>Код example_atomic.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * example_atomic.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#define BYTE_TO_BINARY_PATTERN </strong><strong>"%c%c%c%c%c%c%c%c"</strong></p>
<p><strong>#define BYTE_TO_BINARY(byte)                                                   </strong><strong>\ </strong></p>
<p><strong>    ((byte &amp; </strong><strong>0x80</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>), ((byte &amp; </strong><strong>0x40</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>),                  \ </strong></p>
<p><strong>        ((byte &amp; </strong><strong>0x20</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>), ((byte &amp; </strong><strong>0x10</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>),              \ </strong></p>
<p><strong>        ((byte &amp; </strong><strong>0x08</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>), ((byte &amp; </strong><strong>0x04</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>),              \ </strong></p>
<p><strong>        ((byte &amp; </strong><strong>0x02</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>), ((byte &amp; </strong><strong>0x01</strong><strong>) ? </strong><strong>'1'</strong><strong> : </strong><strong>'0'</strong><strong>) </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>atomic_add_subtract</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>atomic_t</strong><strong> debbie; </strong></p>
<p>    <strong>atomic_t</strong><strong> chris = ATOMIC_INIT(</strong><strong>50</strong><strong>); </strong></p>
<p><strong>    atomic_set(&amp;debbie, </strong><strong>45</strong><strong>); </strong></p>
<p>    <strong><emphasis>/* Вычитание единицы. */</emphasis></strong></p>
<p><strong>    atomic_dec(&amp;debbie); </strong></p>
<p><strong>    atomic_add(</strong><strong>7</strong><strong>, &amp;debbie); </strong></p>
<p>    <strong><emphasis>/* Прибавление единицы. */</emphasis></strong></p>
<p><strong>    atomic_inc(&amp;debbie); </strong></p>
<p><strong>    pr_info(</strong><strong>"chris: %d, debbie: %d\n"</strong><strong>, atomic_read(&amp;chris), </strong></p>
<p><strong>            atomic_read(&amp;debbie)); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>atomic_bitwise</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> word = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 0: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p><strong>    set_bit(</strong><strong>3</strong><strong>, &amp;word); </strong></p>
<p><strong>    set_bit(</strong><strong>5</strong><strong>, &amp;word); </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 1: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p><strong>    clear_bit(</strong><strong>5</strong><strong>, &amp;word); </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 2: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p><strong>    change_bit(</strong><strong>3</strong><strong>, &amp;word); </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 3: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p>    <strong>if</strong><strong> (test_and_set_bit(</strong><strong>3</strong><strong>, &amp;word)) </strong></p>
<p><strong>        pr_info(</strong><strong>"wrong\n"</strong><strong>); </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 4: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p><strong>    word = </strong><strong>255</strong><strong>; </strong></p>
<p><strong>    pr_info(</strong><strong>"Bits 5: "</strong><strong> BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(word)); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>example_atomic_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example_atomic started\n"</strong><strong>); </strong></p>
<p><strong>    atomic_add_subtract(); </strong></p>
<p><strong>    atomic_bitwise(); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_atomic_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"example_atomic exit\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(example_atomic_init); </strong></p>
<p><strong>module_exit(example_atomic_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Atomic operations example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>До того, как в стандарте С11 появились встроенные атомарные типы, ядро уже предоставляло небольшой их набор, которым можно было воспользоваться с помощью хитрого архитектурно-зависимого кода.</p>
<empty-line/>
<p>Реализация же атомарных типов в С11 позволяет ядру отказаться от этих специфичных команд, сделав его код более внятным для людей, которые данный стандарт понимают. Но есть здесь и кое-какие проблемы, например модель памяти ядра не соответствует модели, формируемой атомарными операциями в С11. Подробнее эта тема раскрыта в следующих ресурсах:</p>
<empty-line/>
<p><strong>● </strong><a l:href="https://www.kernel.org/doc/Documentation/atomic_t.txt">Kernel documentation of atomic types</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/691128/">Time to move to C11 atomics?</a></p>
<p><strong>● </strong><a l:href="https://lwn.net/Articles/698315/">Atomic usage patterns in the kernel</a></p>
<empty-line/>
<p><strong>13. Замена макроса Print</strong></p>
<empty-line/>
<p>▍ 13.1 Замена</p>
<empty-line/>
<p>В разделе 2 я говорил, что программировать модули ядра через X Window System не желательно. Это верно относительно именно разработки модулей, но при фактическом использовании нам нужна возможность отправлять сообщения на любой tty, с которого поступила команда на загрузку модуля.</p>
<empty-line/>
<p>Аббревиатура tty означает телетайп, устройство, которое в своем изначальном виде представляло совмещенную с принтером клавиатуру, используемую для взаимодействия с системой Unix.</p>
<empty-line/>
<p>В современном же представлении телетайп является абстракцией текстового потока, используемой программой Unix, будь то физический терминал, xterm на X-сервере, сетевое подключение через ssh или нечто аналогичное.</p>
<p>Реализуется это с помощью current, указателя на выполняемую в данный момент задачу, позволяющего получить tty-структуру этой задачи. Затем эта структура просматривается в поиске указателя на строковую функцию write, которая используется для записи строки в данный tty.</p>
<empty-line/>
<p>Код print_string.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * print_string.c – отправляет вывод на tty, с которого мы работаем, </emphasis></strong></p>
<p><strong><emphasis> * будь то через X11, telnet и т.д. Для этого мы выводим строку на </emphasis></strong></p>
<p><strong><emphasis> * tty, связанный с текущей задачей. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/sched.h&gt; /* Для current. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/tty.h&gt; /* Для объявлений tty. */ </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>print_string</strong><strong>(</strong><strong>char</strong><strong> *str) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong><emphasis>/* tty для текущей задачи. */</emphasis></strong></p>
<p>    <strong>struct</strong> <strong>tty_struct</strong><strong> *</strong><strong>my_tty</strong><strong> = </strong><strong>get_current_tty</strong><strong>(); </strong></p>
<p>    <strong><emphasis>/* Если my_tty равен NULL, значит у текущей задачи нет tty, куда </emphasis></strong></p>
<p><strong><emphasis>     * можно было бы произвести вывод (например, если это демон). В таком  </emphasis></strong></p>
<p><strong><emphasis>     * случае ничего не поделаешь.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (my_tty) { </strong></p>
<p>        <strong>const</strong> <strong>struct</strong> <strong>tty_operations</strong><strong> *</strong><strong>ttyops</strong><strong> = </strong><strong>my_tty</strong><strong>-&gt;</strong><strong>driver</strong><strong>-&gt;</strong><strong>ops</strong><strong>; </strong></p>
<p>        <strong><emphasis>/* my_tty-&gt;driver – это структура, где расположены функции tty,</emphasis></strong></p>
<p><strong><emphasis>         * одна из которых (write) используется для записи строк в tty. </emphasis></strong></p>
<p><strong><emphasis>         * С помощью нее можно извлекать строки из сегментов пространства памяти ядра или </emphasis></strong></p>
<p><strong><emphasis>         * пользователя. </emphasis></strong></p>
<p><strong><emphasis>         * </emphasis></strong></p>
<p><strong><emphasis>         * Первый параметр этой функции устанавливает tty, куда нужно</emphasis></strong></p>
<p><strong><emphasis>         * производить запись, потому что одна и та же функция служит</emphasis></strong></p>
<p><strong><emphasis>         * для записи во все tty определенного типа. </emphasis></strong></p>
<p><strong><emphasis>         * Второй параметр – это указатель на строку. </emphasis></strong></p>
<p><strong><emphasis>         * Третий параметр устанавливает длину строки. </emphasis></strong></p>
<p><strong><emphasis>         * </emphasis></strong></p>
<p><strong><emphasis>         * Как вы увидите ниже, иногда необходимо использовать функционал </emphasis></strong></p>
<p><strong><emphasis>         * препроцессора, чтобы получить код, работающий для различных</emphasis></strong></p>
<p><strong><emphasis>         * версий ядра. Реализованный нами здесь наивный подход плохо </emphasis></strong></p>
<p><strong><emphasis>         * масштабируется. Правильный способ решения этой проблемы описан </emphasis></strong></p>
<p><strong><emphasis>         * в разделе 2 документации: linux/Documentation/SubmittingPatches </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        (ttyops-&gt;write)(my_tty, </strong><strong><emphasis>/* Сам tty. */</emphasis></strong></p>
<p><strong>                        str, </strong><strong><emphasis>/* Строка. */</emphasis></strong></p>
<p>                        <strong>strlen</strong><strong>(str)); </strong><strong><emphasis>/* Длина. */</emphasis></strong></p>
<p>        <strong><emphasis>/* Изначально телетайпы были аппаратными и, как правило, строго </emphasis></strong></p>
<p><strong><emphasis>         * следовали стандарту ASCII. В ASCII для перехода на новую строку </emphasis></strong></p>
<p><strong><emphasis>         * необходимо два символа, возврат каретки и перевод строки. В </emphasis></strong></p>
<p><strong><emphasis>         * Unix перевод строки ASCII задействуется для того и другого,</emphasis></strong></p>
<p><strong><emphasis>         * поэтому нельзя просто использовать \n, так как возврата</emphasis></strong></p>
<p><strong><emphasis>         * каретки не произойдет, и следующая строка начнется в столбце, </emphasis></strong></p>
<p><strong><emphasis>         * идущим сразу за переводом строки.</emphasis></strong></p>
<p><strong><emphasis>         *</emphasis></strong></p>
<p><strong><emphasis>         * Именно поэтому в Unix и MS Windows текстовые файлы отличаются.      </emphasis></strong></p>
<p><strong><emphasis>         * В CP/M и ее производных вроде MS-DOS и MS Windows текст строго </emphasis></strong></p>
<p><strong><emphasis>         * подчиняется стандарту ASCII, в связи с чем для перехода на </emphasis></strong></p>
<p><strong><emphasis>         * новую строку требуется и LF, и CR. </emphasis></strong></p>
<p><strong><emphasis>         */</emphasis></strong></p>
<p><strong>        (ttyops-&gt;write)(my_tty, </strong><strong>"\015\012"</strong><strong>, </strong><strong>2</strong><strong>); </strong></p>
<p><strong>    } </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>print_string_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    print_string(</strong><strong>"The module has been inserted.  Hello world!"</strong><strong>); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>print_string_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    print_string(</strong><strong>"The module has been removed.  Farewell world!"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(print_string_init); </strong></p>
<p><strong>module_exit(print_string_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 13.2 Мигание светодиодами клавиатуры</p>
<empty-line/>
<p>В определенных условиях вы можете предпочесть более простой и непосредственный способ связи с внешним миром. Решением в таком случае может стать мигание светодиодами клавиатуры. Это прямой способ привлечь внимание или продемонстрировать некое состояние. Светодиоды есть у любой клавиатуры, они всегда на виду, не требуют настройки и очень просты в использовании, если сравнивать с записью в tty или файл.</p>
<p>В v4.14 и v.4.15 в API таймера произошел ряд изменений, нацеленных на повышение безопасности памяти. Переполнение буфера в области структуры timer_list может привести к перезаписи полей function и data, предоставив атакующему возможность с помощью возвратно-объектного программирование вызывать произвольные функции в ядре.</p>
<empty-line/>
<p>Кроме того, прототип функции обратного вызова, содержащий аргумент unsigned long, полностью исключит возможность проверки типов. Плюс такой прототип может помешать защитить косвенные переходы и вызовы (forward-edge) с помощью сохранения целостности потока управления (CFI).</p>
<empty-line/>
<p>Поэтому лучше использовать уникальный прототип, чтобы отделиться от кластера, который получает аргумент unsigned long. В обратный вызов таймера необходимо передавать не аргумент unsigned long, а указатель на структуру timer_list.</p>
<empty-line/>
<p>Тогда он объединит всю необходимую ему информацию, включая структуру timer_list, в более обширную структуру и сможет использовать вместо значения unsigned long макрос container_of.</p>
<empty-line/>
<p>Более развернуто эта тема описана в статье <a l:href="https://lwn.net/Articles/735887/">Improving the kernel timers API</a>.</p>
<empty-line/>
<p>До Linux v4.14 инициализация таймеров производилась с помощью setup_timer, а структура timer_list выглядела так:</p>
<empty-line/>
<p><strong>struct</strong> <strong>timer_list</strong><strong> { </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> expires; </strong></p>
<p>    <strong>void</strong><strong> (*function)(</strong><strong>unsigned</strong> <strong>long</strong><strong>); </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> data; </strong></p>
<p><strong>    u32 flags; </strong></p>
<p>    <strong><emphasis>/* ... */</emphasis></strong></p>
<p><strong>}; </strong></p>
<p><strong>void</strong> <strong>setup_timer</strong><strong>(struct timer_list *timer, </strong><strong>void</strong><strong> (*callback)(</strong><strong>unsigned</strong> <strong>long</strong><strong>), </strong></p>
<p>                 <strong>unsigned</strong> <strong>long</strong><strong> data);</strong></p>
<empty-line/>
<p>В Linux v4.14 появилась timer_setup, и ядро постепенно перестроилось с setup_timer на timer_setup. Одна из причин изменения API заключалась в потребности сосуществования с интерфейсом старых версий. Более того, по началу timer_setup реализовывалась через setup_timer:</p>
<empty-line/>
<p><strong>void</strong> <strong>timer_setup</strong><strong>(struct timer_list *timer, </strong></p>
<p>                 <strong>void</strong><strong> (*callback)(struct timer_list *), </strong><strong>unsigned</strong> <strong>int</strong><strong> flags);</strong></p>
<p>Позднее в v4.15 setup_timer удалили, что также отразилось на облике структуры timer_list:</p>
<empty-line/>
<p><strong>struct</strong> <strong>timer_list</strong><strong> { </strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> expires; </strong></p>
<p>    <strong>void</strong><strong> (*function)(struct timer_list *); </strong></p>
<p><strong>    u32 flags; </strong></p>
<p>    <strong><emphasis>/* ... */</emphasis></strong></p>
<p><strong>};</strong></p>
<empty-line/>
<p>Приведенный ниже код демонстрирует минимальный модуль ядра, который после загрузки начинает мигать светодиодами до тех пор, пока не будет выгружен.</p>
<empty-line/>
<p>Код kbleds.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * kbleds.c – мигает светодиодами клавиатуры, пока не будет выгружен. </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kd.h&gt; /* Для KDSETLED. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/tty.h&gt; /* Для tty_struct. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/vt.h&gt; /* Для MAX_NR_CONSOLES. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/vt_kern.h&gt; /* Для fg_console. */ </strong></p>
<p><strong>#include </strong><strong>&lt;linux/console_struct.h&gt; /* Для vc_cons. */ </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Example module illustrating the use of Keyboard LEDs."</strong><strong>); </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>timer_list</strong> <strong>my_timer</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>tty_driver</strong><strong> *</strong><strong>my_driver</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>long</strong><strong> kbledstatus = </strong><strong>0</strong><strong>; </strong></p>
<p><strong>#define BLINK_DELAY HZ / 5 </strong></p>
<p><strong>#define ALL_LEDS_ON 0x07 </strong></p>
<p><strong>#define RESTORE_LEDS 0xFF </strong></p>
<p><strong><emphasis>/* Функция my_timer_func периодически мигает светодиодами, </emphasis></strong></p>
<p><strong><emphasis> * вызывая для драйвера клавиатуры команду управления вводом-выводом  </emphasis></strong></p>
<p><strong><emphasis> * KDSETLED. Дополнительную информацию по командам ввода-вывода </emphasis></strong></p>
<p><strong><emphasis> * смотрите в функции vt_ioctl() файла drivers/tty/vt/vt_ioctl.c. </emphasis></strong></p>
<p><strong><emphasis> * </emphasis></strong></p>
<p><strong><emphasis> * Аргумент KDSETLED попеременно устанавливается то на 7 (что приводит к </emphasis></strong></p>
<p><strong><emphasis> * активации режима LED_SHOW_IOCTL и загоранию всех светодиодов), то на </emphasis></strong></p>
<p><strong><emphasis> * 0xFF (любое значение выше 7 переключает режим обратно на </emphasis></strong></p>
<p><strong><emphasis> * LED_SHOW_FLAGS, в результате чего светодиоды отображают фактический </emphasis></strong></p>
<p><strong><emphasis> * статус клавиатуры). Подробности смотрите в функции setledstate() файла </emphasis></strong></p>
<p><strong><emphasis> * drivers/tty/vt/keyboard.c.</emphasis></strong></p>
<p><strong><emphasis>  */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>my_timer_func</strong><strong>(struct timer_list *unused) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>struct</strong> <strong>tty_struct</strong><strong> *</strong><strong>t</strong><strong> = </strong><strong>vc_cons</strong><strong>[</strong><strong>fg_console</strong><strong>].</strong><strong>d</strong><strong>-&gt;</strong><strong>port</strong><strong>.</strong><strong>tty</strong><strong>; </strong></p>
<p>    <strong>if</strong><strong> (kbledstatus == ALL_LEDS_ON) </strong></p>
<p><strong>        kbledstatus = RESTORE_LEDS; </strong></p>
<p>    <strong>else</strong></p>
<p><strong>        kbledstatus = ALL_LEDS_ON; </strong></p>
<p><strong>    (my_driver-&gt;ops-&gt;ioctl)(t, KDSETLED, kbledstatus); </strong></p>
<p><strong>    my_timer.expires = jiffies + BLINK_DELAY; </strong></p>
<p><strong>    add_timer(&amp;my_timer); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>kbleds_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>int</strong><strong> i; </strong></p>
<p><strong>    pr_info(</strong><strong>"kbleds: loading\n"</strong><strong>); </strong></p>
<p><strong>    pr_info(</strong><strong>"kbleds: fgconsole is %x\n"</strong><strong>, fg_console); </strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; MAX_NR_CONSOLES; i++) { </strong></p>
<p>        <strong>if</strong><strong> (!vc_cons[i].d) </strong></p>
<p>            <strong>break</strong><strong>; </strong></p>
<p><strong>        pr_info(</strong><strong>"poet_atkm: console[%i/%i] #%i, tty %p\n"</strong><strong>, i, MAX_NR_CONSOLES, </strong></p>
<p><strong>                vc_cons[i].d-&gt;vc_num, (</strong><strong>void</strong><strong> *)vc_cons[i].d-&gt;port.tty); </strong></p>
<p><strong>    } </strong></p>
<p><strong>    pr_info(</strong><strong>"kbleds: finished scanning consoles\n"</strong><strong>); </strong></p>
<p><strong>    my_driver = vc_cons[fg_console].d-&gt;port.tty-&gt;driver; </strong></p>
<p><strong>    pr_info(</strong><strong>"kbleds: tty driver magic %x\n"</strong><strong>, my_driver-&gt;magic); </strong></p>
<p>    <strong><emphasis>/* Первая настройка таймера мигания светодиодов. */</emphasis></strong></p>
<p><strong>    timer_setup(&amp;my_timer, my_timer_func, </strong><strong>0</strong><strong>); </strong></p>
<p><strong>    my_timer.expires = jiffies + BLINK_DELAY; </strong></p>
<p><strong>    add_timer(&amp;my_timer); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>kbleds_cleanup</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"kbleds: unloading...\n"</strong><strong>); </strong></p>
<p><strong>    del_timer(&amp;my_timer); </strong></p>
<p><strong>    (my_driver-&gt;ops-&gt;ioctl)(vc_cons[fg_console].d-&gt;port.tty, KDSETLED, </strong></p>
<p><strong>                            RESTORE_LEDS); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(kbleds_init); </strong></p>
<p><strong>module_exit(kbleds_cleanup); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Если ни один из приведенных в этой главе примеров не подходит под ваши отладочные нужды, то наверняка есть другие решения. Не задумывались, для чего может быть полезна CONFIG_LL_DEBUG из menu menuconfig?</p>
<empty-line/>
<p>В случае ее активации вы получаете низкоуровневый доступ к последовательному порту. И хотя это может не показаться особо полезным, такой прием позволяет пропатчить <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/kernel/printk.c">kernel/printk.c</a> или любой другой важный системный вызов для печати символов ASCII, делая возможным отслеживание практически всех действий кода на последовательном порту.</p>
<empty-line/>
<p>Если вы займетесь портированием ядра на новую, ранее неподдерживаемую архитектуру, то реализация этого решения должна идти одной из первых. Также можно рассмотреть вариант логирования через netconsole.</p>
<empty-line/>
<p>Несмотря на множество рассмотренных здесь отладочных приемов, кое-что нужно иметь ввиду. Отладка практически всегда оказывается интрузивной процедурой. Добавление отладочного кода может привести к тому, что ошибка, на первый взгляд, исчезнет. Поэтому такой код нужно минимизировать и следить, чтобы он не попал в продакшн-код.</p>
<empty-line/>
<p><strong>14. Планирование задач</strong></p>
<empty-line/>
<p>Есть два основных способа выполнения задач: тасклеты и очереди заданий. Тасклеты – это быстрый и простой способ планирования выполнения одной функции, например, при ее активации прерыванием.</p>
<empty-line/>
<p>А вот очереди заданий хоть и более сложны, но зато лучше подходят для выполнения последовательностей задач.</p>
<empty-line/>
<p>▍ 14.1 Тасклеты</p>
<empty-line/>
<p>Ниже показан пример модуля тасклета. Функция tasklet_fn выполняется несколько секунд. При этом выполнение функции example_tasklet_init может продолжаться до точки выхода, что будет зависеть от того, была ли она прервана softirq.</p>
<empty-line/>
<p>Код example_tasklet.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * example_tasklet.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/delay.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong><emphasis>/* Макрос DECLARE_TASKLET_OLD присутствует для совместимости. </emphasis></strong></p>
<p><strong><emphasis> * См. https://lwn.net/Articles/830964/.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#ifndef DECLARE_TASKLET_OLD </strong></p>
<p><strong>#define DECLARE_TASKLET_OLD(arg1, arg2) DECLARE_TASKLET(arg1, arg2, 0L) </strong></p>
<p><strong>#endif </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>tasklet_fn</strong><strong>(</strong><strong>unsigned</strong> <strong>long</strong><strong> data) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"Example tasklet starts\n"</strong><strong>); </strong></p>
<p><strong>    mdelay(</strong><strong>5000</strong><strong>); </strong></p>
<p><strong>    pr_info(</strong><strong>"Example tasklet ends\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>DECLARE_TASKLET_OLD</strong><strong>(mytask, tasklet_fn); </strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>example_tasklet_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"tasklet example init\n"</strong><strong>); </strong></p>
<p><strong>    tasklet_schedule(&amp;mytask); </strong></p>
<p><strong>    mdelay(</strong><strong>200</strong><strong>); </strong></p>
<p><strong>    pr_info(</strong><strong>"Example tasklet init continues...\n"</strong><strong>); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>example_tasklet_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"tasklet example exit\n"</strong><strong>); </strong></p>
<p><strong>    tasklet_kill(&amp;mytask); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(example_tasklet_init); </strong></p>
<p><strong>module_exit(example_tasklet_exit); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Tasklet example"</strong><strong>); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p>После загрузки этого примера dmesg должна отобразить следующее:</p>
<empty-line/>
<p><strong>tasklet example init</strong></p>
<p><strong>Example tasklet starts</strong></p>
<p><strong>Example tasklet init continues...</strong></p>
<p><strong>Example tasklet ends</strong></p>
<empty-line/>
<p>И хотя использовать тасклеты легко, они имеют несколько недостатков, и в среде разработчиков обсуждается их возможное исключение из ядра. Обратный вызов тасклета выполняется в атомарном контексте внутри программного прерывания, то есть он не может входить в режим ожидания или получать доступ к данным пользовательского пространства, в результате чего в обработчике тасклетов не получится выполнить всю работу. Кроме того, ядро разрешает одновременно выполнять только один экземпляр любого конкретного тасклета. При этом несколько разных могут выполняться параллельно.</p>
<empty-line/>
<p>В последних версиях ядра появилась возможность заменить тасклеты очередями заданий, таймерами или прерываниями, выносимыми в отдельные потоки (threaded interrupts). Пока удаление тасклетов продолжает оставаться долгосрочной целью, в своем текущем виде ядро содержит более сотни случаев их использования. Сейчас разработчики продолжают вносить изменения в API, и для совместимости существует макрос DECLARE_TASKLET_OLD.</p>
<empty-line/>
<p>Подробнее читайте на странице <a l:href="https://lwn.net/Articles/830964/">https://lwn.net/Articles/830964/</a>.</p>
<empty-line/>
<p>▍ 14.2 Очереди заданий</p>
<empty-line/>
<p>Добавлять задачи в планировщик можно через очередь заданий. Для выполнения прописанных в этой очереди задач ядро использует Completely Fair Scheduler (CFS).</p>
<empty-line/>
<p>Код sched.c:</p>
<empty-line/>
<p><strong><emphasis>/* </emphasis></strong></p>
<p><strong><emphasis> * sched.c </emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt; </strong></p>
<p><strong>#include </strong><strong>&lt;linux/workqueue.h&gt; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>workqueue_struct</strong><strong> *</strong><strong>queue</strong><strong> = </strong><strong>NULL</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>work_struct</strong> <strong>work</strong><strong>; </strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>work_handler</strong><strong>(struct work_struct *data) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    pr_info(</strong><strong>"work handler function.\n"</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>sched_init</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p>    <strong>queue</strong><strong> = alloc_workqueue(</strong><strong>"HELLOWORLD"</strong><strong>, WQ_UNBOUND, </strong><strong>1</strong><strong>); </strong></p>
<p><strong>    INIT_WORK(&amp;work, work_handler); </strong></p>
<p><strong>    schedule_work(&amp;work); </strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>; </strong></p>
<p><strong>} </strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>sched_exit</strong><strong>(</strong><strong>void</strong><strong>) </strong></p>
<p><strong>{ </strong></p>
<p><strong>    destroy_workqueue(</strong><strong>queue</strong><strong>); </strong></p>
<p><strong>} </strong></p>
<p><strong>module_init(sched_init); </strong></p>
<p><strong>module_exit(sched_exit); </strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>); </strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Workqueue example"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>15. Обработка прерываний</strong></p>
<empty-line/>
<p>▍ 15.1 Обработчики прерываний</p>
<empty-line/>
<p>Во всех главах (за исключением предыдущей), мы реализовывали в ядре лишь ответы на запросы процессов, для чего-либо работали с особым файлом, либо отправляли ioctl() или системный вызов. Но работа ядра состоит не только в реагировании на запросы процессов. Ещё одной его немаловажной ответственностью является взаимодействие с подключённым к машине оборудованием.</p>
<empty-line/>
<p>Существует два типа взаимодействий между ЦПУ и остальным оборудованием компьютера. Первый – это когда ЦПУ отдаёт ему распоряжения. Распоряжение подразумевает, что оборудование должно сообщить что-либо процессору. Второй, называемый прерываниями, уже гораздо сложнее в реализации, поскольку обрабатывается, когда это нужно оборудованию, а не процессору. Как правило, аппаратные средства оснащены очень небольшим объёмом оперативной памяти, и если своевременно не считать предоставляемую ими информацию, она будет потеряна.</p>
<empty-line/>
<p>В Linux — аппаратные прерывания называются IRQ (Interrupt ReQuests). Существует два типа IRQ, короткие и длинные. Короткие прерывания, как и предполагает их имя, должны выполняться в краткий промежуток времени, во время которого остальная часть машины будет заблокирована, и обработка никаких других прерываний производиться не будет. Длительные же IRQ выполняются продолжительно и не препятствуют выполнению других прерываний (за исключением IRQ от одного и того же устройства). По возможности желательно объявлять обработчики прерываний длительными.</p>
<empty-line/>
<p>Когда ЦПУ получает прерывание, он прекращает все свои текущие действия (если только не обрабатывает более важное прерывание; в таком случае сначала он заканчивает его), сохраняет определённые параметры в стеке и вызывает обработчик прерываний. Это означает, что определённые действия в самом обработчике недопустимы, поскольку система находится в неизвестном состоянии. Для решения этой проблемы ядро разделяет обработку прерываний на две части. Первая выполняется сразу же и маскирует линию прерываний.</p>
<empty-line/>
<p>Аппаратные прерывания должны обрабатываться быстро, и именно поэтому нам нужна вторая часть, выполняющая всю тяжёлую работу, отделённую от обработчика. По историческим причинам BH (аббревиатура для Нижних половин) статистически ведёт учёт этих отделённых функций. Начиная с Linux 2.3, на смену BH пришёл механизм Softirq и его более высокоуровневая абстракция Tasklet.</p>
<empty-line/>
<p>Реализуется этот механизм через вызов request_irq(), который при получении прерывания активизирует его обработчик.</p>
<empty-line/>
<p>На практике же обработка IRQ может представлять сложности. Зачастую аппаратные устройства реализуют в себе цепочку из двух контроллеров прерываний, чтобы всё IRQ, поступающие от контроллера В, каскадировались в определённое IRQ от контроллера А. Естественно, для этого ядру необходимо разобраться, какое в действительности это было прерывание, что накладывает дополнительную нагрузку. В других архитектурах предлагается особый вид менее нагружающих систему прерываний, называемых «fast IRQ», или FIQ.</p>
<empty-line/>
<p>Для их использования обработчики должны быть написаны на ассемблере, в связи с чем ядру они уже не подходят. Можно сделать так, чтобы эти обработчики работали аналогично другим, но тогда они утратят своё преимущество в скорости. Ядра с поддержкой SMP, работающие в системах с несколькими процессорами, должны решать множество и других проблем. Недостаточно просто знать о том, что произошло определённое прерывание, также важно понимать, для какого (или каких) ЦПУ оно предназначено.</p>
<empty-line/>
<p>Тем, кого интересуют дополнительные подробности, рекомендую обратиться к документации по <a l:href="https://ru.wikipedia.org/wiki/APIC">“APIC” (Advanced Programmable Interrupt Controller — улучшенный программируемый обработчик прерываний)</a>.</p>
<empty-line/>
<p>Функция request_irq получает номер IRQ, имя функции, флаги, имя для /proc/interrupts и параметр, передаваемый в обработчик прерываний. Как правило, доступно определённое число IRQ, какое именно – зависит от оборудования. В качестве флагов могут использоваться SA_SHIRQ, указывающий, что вы хотите поделиться этим IRQ с остальными обработчиками прерываний (обычно ввиду того, что ряд устройств сидят на одном IRQ) и SA_INTERRUPT, обозначающий быстрое прерывание. Эта функция сработает успешно, только если для данного прерывания ещё не установлен обработчик, или если вы также хотите им поделиться.</p>
<empty-line/>
<p>▍ 15.2 Обнаружение нажатий клавиш</p>
<empty-line/>
<p>Многие популярные одноплатные компьютеры, такие как Raspberry Pi или Beegleboards, оборудованы множеством контактов ввода-вывода. Подключение к этим выводам кнопок и настройка срабатывания их нажатий является классическим случаем, в котором могут потребоваться прерывания. Поэтому вместо того, чтобы тратить время процессора и энергию на опрос об изменении входного состояния, лучше настроить вход на активацию ЦПУ для последующего выполнения определённой функции обработки.</p>
<empty-line/>
<p>Вот пример, в котором кнопки подключены к выводам 17 и 18, а светодиод к выводу 4. При желании можете изменить номера выводов на своё усмотрение.</p>
<empty-line/>
<p>Код intrpt.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * intrpt.c – Обработка ввода-вывода с помощью прерываний.</emphasis></strong></p>
<p><strong><emphasis> *</emphasis></strong></p>
<p><strong><emphasis> * За основу взят пример RPi Стефана Вендлера (devnull@kaltpost.de)</emphasis></strong></p>
<p><strong><emphasis> * из репозитория https://github.com/wendlers/rpi-kmod-samples</emphasis></strong></p>
<p><strong><emphasis> *</emphasis></strong></p>
<p><strong><emphasis> * При нажатии одной кнопки светодиод загорается, а при нажатии другой</emphasis></strong></p>
<p><strong><emphasis> * гаснет.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/gpio.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> button_irqs[] = { </strong><strong>-1</strong><strong>, </strong><strong>-1</strong><strong> };</strong></p>
<p><strong><emphasis>/* Определение вводов-выводов для светодиодов.</emphasis></strong></p>
<p><strong><emphasis> * Номера выводов можете изменить.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>gpio</strong> <strong>leds</strong><strong>[] = { { </strong><strong>4</strong><strong>, GPIOF_OUT_INIT_LOW, </strong><strong>"LED 1"</strong><strong> } };</strong></p>
<p><strong><emphasis>/* Определение вводов-выводов для BUTTONS.</emphasis></strong></p>
<p><strong><emphasis> * Номера вводов-выводов можете изменить.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>gpio</strong> <strong>buttons</strong><strong>[] = { { </strong><strong>17</strong><strong>, GPIOF_IN, </strong><strong>"LED 1 ON BUTTON"</strong><strong> },</strong></p>
<p><strong>                                 { </strong><strong>18</strong><strong>, GPIOF_IN, </strong><strong>"LED 1 OFF BUTTON"</strong><strong> } };</strong></p>
<p><strong><emphasis>/* Функция обработки прерываний, активируемая нажатием кнопки. */</emphasis></strong></p>
<p><strong>static</strong> <strong>irqreturn_t</strong> <strong>button_isr</strong><strong>(</strong><strong>int</strong><strong> irq, </strong><strong>void</strong><strong> *data)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Первая кнопка. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (irq == button_irqs[</strong><strong>0</strong><strong>] &amp;&amp; !gpio_get_value(leds[</strong><strong>0</strong><strong>].gpio))</strong></p>
<p><strong>        gpio_set_value(leds[</strong><strong>0</strong><strong>].gpio, </strong><strong>1</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Вторая кнопка. */</emphasis></strong></p>
<p>    <strong>else</strong> <strong>if</strong><strong> (irq == button_irqs[</strong><strong>1</strong><strong>] &amp;&amp; gpio_get_value(leds[</strong><strong>0</strong><strong>].gpio))</strong></p>
<p><strong>        gpio_set_value(leds[</strong><strong>0</strong><strong>].gpio, </strong><strong>0</strong><strong>);</strong></p>
<p>    <strong>return</strong><strong> IRQ_HANDLED;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>intrpt_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> ret = </strong><strong>0</strong><strong>;</strong></p>
<p><strong>    pr_info(</strong><strong>"%s\n"</strong><strong>, __func__);</strong></p>
<p>    <strong><emphasis>/* Регистрация вводов-выводов светодиодов. */</emphasis></strong></p>
<p><strong>    ret = gpio_request_array(leds, ARRAY_SIZE(leds));</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request GPIOs for LEDs: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>return</strong><strong> ret;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong><emphasis>/* Регистрация вводов-выводов для BUTTON. */</emphasis></strong></p>
<p><strong>    ret = gpio_request_array(buttons, ARRAY_SIZE(buttons));</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request GPIOs for BUTTONs: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail1;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    pr_info(</strong><strong>"Current button1 value: %d\n"</strong><strong>, gpio_get_value(buttons[</strong><strong>0</strong><strong>].gpio));</strong></p>
<p><strong>    ret = gpio_to_irq(buttons[</strong><strong>0</strong><strong>].gpio);</strong></p>
<p>    <strong>if</strong><strong> (ret &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    button_irqs[</strong><strong>0</strong><strong>] = ret;</strong></p>
<p><strong>    pr_info(</strong><strong>"Successfully requested BUTTON1 IRQ # %d\n"</strong><strong>, button_irqs[</strong><strong>0</strong><strong>]);</strong></p>
<p><strong>    ret = request_irq(button_irqs[</strong><strong>0</strong><strong>], button_isr,</strong></p>
<p><strong>                      IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,</strong></p>
<p>                      <strong>"gpiomod#button1"</strong><strong>, </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    ret = gpio_to_irq(buttons[</strong><strong>1</strong><strong>].gpio);</strong></p>
<p>    <strong>if</strong><strong> (ret &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    button_irqs[</strong><strong>1</strong><strong>] = ret;</strong></p>
<p><strong>    pr_info(</strong><strong>"Successfully requested BUTTON2 IRQ # %d\n"</strong><strong>, button_irqs[</strong><strong>1</strong><strong>]);</strong></p>
<p><strong>    ret = request_irq(button_irqs[</strong><strong>1</strong><strong>], button_isr,</strong></p>
<p><strong>                      IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,</strong></p>
<p>                      <strong>"gpiomod#button2"</strong><strong>, </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail3;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong><emphasis>/* Удаление проделанных настроек. */</emphasis></strong></p>
<p><strong>fail3:</strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>0</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p><strong>fail2:</strong></p>
<p><strong>    gpio_free_array(buttons, ARRAY_SIZE(leds));</strong></p>
<p><strong>fail1:</strong></p>
<p><strong>    gpio_free_array(leds, ARRAY_SIZE(leds));</strong></p>
<p>    <strong>return</strong><strong> ret;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>intrpt_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p><strong>    pr_info(</strong><strong>"%s\n"</strong><strong>, __func__);</strong></p>
<p>    <strong><emphasis>/* Свободные прерывания. */</emphasis></strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>0</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>1</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Отключение всех светодиодов. */</emphasis></strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; ARRAY_SIZE(leds); i++)</strong></p>
<p><strong>        gpio_set_value(leds[i].gpio, </strong><strong>0</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Снятие регистрации. */</emphasis></strong></p>
<p><strong>    gpio_free_array(leds, ARRAY_SIZE(leds));</strong></p>
<p><strong>    gpio_free_array(buttons, ARRAY_SIZE(buttons));</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(intrpt_init);</strong></p>
<p><strong>module_exit(intrpt_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Handle some GPIO interrupts"</strong><strong>);</strong></p>
<empty-line/>
<p>▍ 15.3 Нижняя половина</p>
<empty-line/>
<p>Предположим, вам нужно проделать ряд операций внутри подпрограммы прерывания. Стандартный способ реализовать это, не лишая прерывание доступности на долгое время, предполагает его совмещение с тасклетом. Так вы переложите основную работу на планировщик.</p>
<empty-line/>
<p>Ниже представлена изменённая версия предыдущего примера, в которой при срабатывании прерывания запускается дополнительная задача.</p>
<empty-line/>
<p>Код bottomhalf.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * bottomhalf.c – Обработка верхней и нижней частей прерывания.</emphasis></strong></p>
<p><strong><emphasis> *</emphasis></strong></p>
<p><strong><emphasis> * За основу взят пример RPi Стефана Вендлера (devnull@kaltpost.de)</emphasis></strong></p>
<p><strong><emphasis> * из репозитория https://github.com/wendlers/rpi-kmod-samples</emphasis></strong></p>
<p><strong><emphasis> *</emphasis></strong></p>
<p><strong><emphasis> * При нажатии одной кнопки светодиод загорается, а при нажатии другой</emphasis></strong></p>
<p><strong><emphasis> * гаснет.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/delay.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/gpio.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/interrupt.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong><emphasis>/* Макрос DECLARE_TASKLET_OLD присутствует для совместимости.</emphasis></strong></p>
<p><strong><emphasis> * См. https://lwn.net/Articles/830964/</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#ifndef DECLARE_TASKLET_OLD</strong></p>
<p><strong>#define DECLARE_TASKLET_OLD(arg1, arg2) DECLARE_TASKLET(arg1, arg2, 0L)</strong></p>
<p><strong>#endif</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> button_irqs[] = { </strong><strong>-1</strong><strong>, </strong><strong>-1</strong><strong> };</strong></p>
<p><strong><emphasis>/* Определение вводов-выводов для светодиодов.</emphasis></strong></p>
<p><strong><emphasis> * Номера вводов-выводов можно изменить.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>gpio</strong> <strong>leds</strong><strong>[] = { { </strong><strong>4</strong><strong>, GPIOF_OUT_INIT_LOW, </strong><strong>"LED 1"</strong><strong> } };</strong></p>
<p><strong><emphasis>/* Определение вводов-выводов для BUTTONS.</emphasis></strong></p>
<p><strong><emphasis> * Номера вводов-выводов можно изменить.</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>gpio</strong> <strong>buttons</strong><strong>[] = {</strong></p>
<p><strong>    { </strong><strong>17</strong><strong>, GPIOF_IN, </strong><strong>"LED 1 ON BUTTON"</strong><strong> },</strong></p>
<p><strong>    { </strong><strong>18</strong><strong>, GPIOF_IN, </strong><strong>"LED 1 OFF BUTTON"</strong><strong> },</strong></p>
<p><strong>};</strong></p>
<p><strong><emphasis>/* Тасклет, содержащий большой объём обработки. */</emphasis></strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>bottomhalf_tasklet_fn</strong><strong>(</strong><strong>unsigned</strong> <strong>long</strong><strong> data)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"Bottom half tasklet starts\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Выполнение длительных действий. */</emphasis></strong></p>
<p><strong>    mdelay(</strong><strong>500</strong><strong>);</strong></p>
<p><strong>    pr_info(</strong><strong>"Bottom half tasklet ends\n"</strong><strong>);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>DECLARE_TASKLET_OLD</strong><strong>(buttontask, bottomhalf_tasklet_fn);</strong></p>
<p><strong><emphasis>/* Функция прерывания, активизируемая при нажатии кнопки. */</emphasis></strong></p>
<p><strong>static</strong> <strong>irqreturn_t</strong> <strong>button_isr</strong><strong>(</strong><strong>int</strong><strong> irq, </strong><strong>void</strong><strong> *data)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Быстрое выполнение действия прямо сейчас. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (irq == button_irqs[</strong><strong>0</strong><strong>] &amp;&amp; !gpio_get_value(leds[</strong><strong>0</strong><strong>].gpio))</strong></p>
<p><strong>        gpio_set_value(leds[</strong><strong>0</strong><strong>].gpio, </strong><strong>1</strong><strong>);</strong></p>
<p>    <strong>else</strong> <strong>if</strong><strong> (irq == button_irqs[</strong><strong>1</strong><strong>] &amp;&amp; gpio_get_value(leds[</strong><strong>0</strong><strong>].gpio))</strong></p>
<p><strong>        gpio_set_value(leds[</strong><strong>0</strong><strong>].gpio, </strong><strong>0</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Неспешное выполнение остального через планировщик. */</emphasis></strong></p>
<p><strong>    tasklet_schedule(&amp;buttontask);</strong></p>
<p>    <strong>return</strong><strong> IRQ_HANDLED;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>bottomhalf_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> ret = </strong><strong>0</strong><strong>;</strong></p>
<p><strong>    pr_info(</strong><strong>"%s\n"</strong><strong>, __func__);</strong></p>
<p>    <strong><emphasis>/* Регистрация вводов-выводов светодиодов. */</emphasis></strong></p>
<p><strong>    ret = gpio_request_array(leds, ARRAY_SIZE(leds));</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request GPIOs for LEDs: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>return</strong><strong> ret;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong><emphasis>/* Регистрация вводов-выводов BUTTONS. */</emphasis></strong></p>
<p><strong>    ret = gpio_request_array(buttons, ARRAY_SIZE(buttons));</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request GPIOs for BUTTONs: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail1;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    pr_info(</strong><strong>"Current button1 value: %d\n"</strong><strong>, gpio_get_value(buttons[</strong><strong>0</strong><strong>].gpio));</strong></p>
<p><strong>    ret = gpio_to_irq(buttons[</strong><strong>0</strong><strong>].gpio);</strong></p>
<p>    <strong>if</strong><strong> (ret &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    button_irqs[</strong><strong>0</strong><strong>] = ret;</strong></p>
<p><strong>    pr_info(</strong><strong>"Successfully requested BUTTON1 IRQ # %d\n"</strong><strong>, button_irqs[</strong><strong>0</strong><strong>]);</strong></p>
<p><strong>    ret = request_irq(button_irqs[</strong><strong>0</strong><strong>], button_isr,</strong></p>
<p><strong>                      IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,</strong></p>
<p>                      <strong>"gpiomod#button1"</strong><strong>, </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    ret = gpio_to_irq(buttons[</strong><strong>1</strong><strong>].gpio);</strong></p>
<p>    <strong>if</strong><strong> (ret &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail2;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    button_irqs[</strong><strong>1</strong><strong>] = ret;</strong></p>
<p><strong>    pr_info(</strong><strong>"Successfully requested BUTTON2 IRQ # %d\n"</strong><strong>, button_irqs[</strong><strong>1</strong><strong>]);</strong></p>
<p><strong>    ret = request_irq(button_irqs[</strong><strong>1</strong><strong>], button_isr,</strong></p>
<p><strong>                      IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,</strong></p>
<p>                      <strong>"gpiomod#button2"</strong><strong>, </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to request IRQ: %d\n"</strong><strong>, ret);</strong></p>
<p>        <strong>goto</strong><strong> fail3;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong><emphasis>/* Удаление проделанных настроек. */</emphasis></strong></p>
<p><strong>fail3:</strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>0</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p><strong>fail2:</strong></p>
<p><strong>    gpio_free_array(buttons, ARRAY_SIZE(leds));</strong></p>
<p><strong>fail1:</strong></p>
<p><strong>    gpio_free_array(leds, ARRAY_SIZE(leds));</strong></p>
<p>    <strong>return</strong><strong> ret;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>bottomhalf_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p><strong>    pr_info(</strong><strong>"%s\n"</strong><strong>, __func__);</strong></p>
<p>    <strong><emphasis>/* Освобождение прерываний. */</emphasis></strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>0</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p><strong>    free_irq(button_irqs[</strong><strong>1</strong><strong>], </strong><strong>NULL</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Отключение всех светодиодов. */</emphasis></strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; ARRAY_SIZE(leds); i++)</strong></p>
<p><strong>        gpio_set_value(leds[i].gpio, </strong><strong>0</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Отмена регистрации. */</emphasis></strong></p>
<p><strong>    gpio_free_array(leds, ARRAY_SIZE(leds));</strong></p>
<p><strong>    gpio_free_array(buttons, ARRAY_SIZE(buttons));</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(bottomhalf_init);</strong></p>
<p><strong>module_exit(bottomhalf_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Interrupt with top and bottom half"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>16. Криптография</strong></p>
<empty-line/>
<p>На заре становления интернета все его пользователи полностью доверяли друг другу…но ничего хорошего из этого не вышло. Изначально это руководство писалось в безмятежную эру, в которой мало кого заботила криптография – по крайней мере, разработчиков ядра. Сегодня же времена совсем другие. Для обработки криптографии в ядре реализован собственный API, предоставляющий стандартные методы шифрования/дешифровании и ваши любимые хеш-функции.</p>
<empty-line/>
<p>▍ 16.1 Хеш-функции</p>
<empty-line/>
<p>Вычисление и проверка хешей является стандартной операцией. Ниже приведён пример вычисления хеша sha256 в модуле ядра.</p>
<empty-line/>
<p>Код cryptosha256.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * cryptosha256.c</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;crypto/internal/hash.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#define SHA256_LENGTH 32</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>show_hash_result</strong><strong>(</strong><strong>char</strong><strong> *plaintext, </strong><strong>char</strong><strong> *hash_sha256)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p>    <strong>char</strong><strong> str[SHA256_LENGTH * </strong><strong>2</strong><strong> + </strong><strong>1</strong><strong>];</strong></p>
<p><strong>    pr_info(</strong><strong>"sha256 test for string: \"%s\"\n"</strong><strong>, plaintext);</strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; SHA256_LENGTH; i++)</strong></p>
<p>        <strong>sprintf</strong><strong>(&amp;str[i * </strong><strong>2</strong><strong>], </strong><strong>"%02x"</strong><strong>, (</strong><strong>unsigned</strong> <strong>char</strong><strong>)hash_sha256[i]);</strong></p>
<p><strong>    str[i * </strong><strong>2</strong><strong>] = </strong><strong>0</strong><strong>;</strong></p>
<p><strong>    pr_info(</strong><strong>"%s\n"</strong><strong>, str);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>cryptosha256_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>char</strong><strong> *plaintext = </strong><strong>"This is a test"</strong><strong>;</strong></p>
<p>    <strong>char</strong><strong> hash_sha256[SHA256_LENGTH];</strong></p>
<p>    <strong>struct</strong> <strong>crypto_shash</strong><strong> *</strong><strong>sha256</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>shash_desc</strong><strong> *</strong><strong>shash</strong><strong>;</strong></p>
<p><strong>    sha256 = crypto_alloc_shash(</strong><strong>"sha256"</strong><strong>, </strong><strong>0</strong><strong>, </strong><strong>0</strong><strong>);</strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(sha256))</strong></p>
<p>        <strong>return</strong> <strong>-1</strong><strong>;</strong></p>
<p><strong>    shash = kmalloc(</strong><strong>sizeof</strong><strong>(struct shash_desc) + crypto_shash_descsize(sha256),</strong></p>
<p><strong>                    GFP_KERNEL);</strong></p>
<p>    <strong>if</strong><strong> (!shash)</strong></p>
<p>        <strong>return</strong><strong> -ENOMEM;</strong></p>
<p><strong>    shash-&gt;tfm = sha256;</strong></p>
<p>    <strong>if</strong><strong> (crypto_shash_init(shash))</strong></p>
<p>        <strong>return</strong> <strong>-1</strong><strong>;</strong></p>
<p>    <strong>if</strong><strong> (crypto_shash_update(shash, plaintext, </strong><strong>strlen</strong><strong>(plaintext)))</strong></p>
<p>        <strong>return</strong> <strong>-1</strong><strong>;</strong></p>
<p>    <strong>if</strong><strong> (crypto_shash_final(shash, hash_sha256))</strong></p>
<p>        <strong>return</strong> <strong>-1</strong><strong>;</strong></p>
<p><strong>    kfree(shash);</strong></p>
<p><strong>    crypto_free_shash(sha256);</strong></p>
<p><strong>    show_hash_result(plaintext, hash_sha256);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>cryptosha256_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(cryptosha256_init);</strong></p>
<p><strong>module_exit(cryptosha256_exit);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"sha256 hash test"</strong><strong>);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p>Установите модуль:</p>
<empty-line/>
<p><strong>sudo insmod cryptosha256.ko</strong></p>
<p><strong>sudo dmesg</strong></p>
<empty-line/>
<p>И увидите, что для тестовой строки вычисляется хеш.</p>
<empty-line/>
<p>В завершение удалите тестовый модуль:</p>
<empty-line/>
<p><strong>sudo rmmod cryptosha256</strong></p>
<empty-line/>
<p>▍ 16.2 Шифрование с симметричным ключом</p>
<empty-line/>
<p>Вот пример симметричного шифрования строки с помощью алгоритма AES и пароля.</p>
<empty-line/>
<p>Код cryptosk.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * cryptosk.c</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;crypto/internal/skcipher.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/crypto.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/random.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/scatterlist.h&gt;</strong></p>
<p><strong>#define SYMMETRIC_KEY_LENGTH 32</strong></p>
<p><strong>#define CIPHER_BLOCK_SIZE 16</strong></p>
<p><strong>struct</strong> <strong>tcrypt_result</strong><strong> {</strong></p>
<p>    <strong>struct</strong> <strong>completion</strong> <strong>completion</strong><strong>;</strong></p>
<p>    <strong>int</strong><strong> err;</strong></p>
<p><strong>};</strong></p>
<p><strong>struct</strong> <strong>skcipher_def</strong><strong> {</strong></p>
<p>    <strong>struct</strong> <strong>scatterlist</strong> <strong>sg</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>crypto_skcipher</strong><strong> *</strong><strong>tfm</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>skcipher_request</strong><strong> *</strong><strong>req</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>tcrypt_result</strong> <strong>result</strong><strong>;</strong></p>
<p>    <strong>char</strong><strong> *scratchpad;</strong></p>
<p>    <strong>char</strong><strong> *ciphertext;</strong></p>
<p>    <strong>char</strong><strong> *ivdata;</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>skcipher_def</strong> <strong>sk</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>test_skcipher_finish</strong><strong>(struct skcipher_def *sk)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>if</strong><strong> (sk-&gt;tfm)</strong></p>
<p><strong>        crypto_free_skcipher(sk-&gt;tfm);</strong></p>
<p>    <strong>if</strong><strong> (sk-&gt;req)</strong></p>
<p><strong>        skcipher_request_free(sk-&gt;req);</strong></p>
<p>    <strong>if</strong><strong> (sk-&gt;ivdata)</strong></p>
<p><strong>        kfree(sk-&gt;ivdata);</strong></p>
<p>    <strong>if</strong><strong> (sk-&gt;scratchpad)</strong></p>
<p><strong>        kfree(sk-&gt;scratchpad);</strong></p>
<p>    <strong>if</strong><strong> (sk-&gt;ciphertext)</strong></p>
<p><strong>        kfree(sk-&gt;ciphertext);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>test_skcipher_result</strong><strong>(struct skcipher_def *sk, </strong><strong>int</strong><strong> rc)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>switch</strong><strong> (rc) {</strong></p>
<p>    <strong>case</strong> <strong>0</strong><strong>:</strong></p>
<p>        <strong>break</strong><strong>;</strong></p>
<p>    <strong>case</strong><strong> -EINPROGRESS || -EBUSY:</strong></p>
<p><strong>        rc = wait_for_completion_interruptible(&amp;sk-&gt;result.completion);</strong></p>
<p>        <strong>if</strong><strong> (!rc &amp;&amp; !sk-&gt;result.err) {</strong></p>
<p><strong>            reinit_completion(&amp;sk-&gt;result.completion);</strong></p>
<p>            <strong>break</strong><strong>;</strong></p>
<p><strong>        }</strong></p>
<p><strong>        pr_info(</strong><strong>"skcipher encrypt returned with %d result %d\n"</strong><strong>, rc,</strong></p>
<p><strong>                sk-&gt;result.err);</strong></p>
<p>        <strong>break</strong><strong>;</strong></p>
<p>    <strong>default</strong><strong>:</strong></p>
<p><strong>        pr_info(</strong><strong>"skcipher encrypt returned with %d result %d\n"</strong><strong>, rc,</strong></p>
<p><strong>                sk-&gt;result.err);</strong></p>
<p>        <strong>break</strong><strong>;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    init_completion(&amp;sk-&gt;result.completion);</strong></p>
<p>    <strong>return</strong><strong> rc;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>test_skcipher_callback</strong><strong>(struct crypto_async_request *req, </strong><strong>int</strong><strong> error)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>struct</strong> <strong>tcrypt_result</strong><strong> *</strong><strong>result</strong><strong> = </strong><strong>req</strong><strong>-&gt;</strong><strong>data</strong><strong>;</strong></p>
<p>    <strong>if</strong><strong> (error == -EINPROGRESS)</strong></p>
<p>        <strong>return</strong><strong>;</strong></p>
<p><strong>    result-&gt;err = error;</strong></p>
<p><strong>    complete(&amp;result-&gt;completion);</strong></p>
<p><strong>    pr_info(</strong><strong>"Encryption finished successfully\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Расшифровка данных. */</emphasis></strong></p>
<p><strong>#if 0</strong></p>
<p>    <strong>memset</strong><strong>((</strong><strong>void</strong><strong>*)sk.scratchpad, </strong><strong>'-'</strong><strong>, CIPHER_BLOCK_SIZE);</strong></p>
<p><strong>    ret = crypto_skcipher_decrypt(sk.req);</strong></p>
<p><strong>    ret = test_skcipher_result(&amp;sk, ret);</strong></p>
<p>    <strong>if</strong><strong> (ret)</strong></p>
<p>        <strong>return</strong><strong>;</strong></p>
<p><strong>    sg_copy_from_buffer(&amp;sk.sg, </strong><strong>1</strong><strong>, sk.scratchpad, CIPHER_BLOCK_SIZE);</strong></p>
<p><strong>    sk.scratchpad[CIPHER_BLOCK_SIZE</strong><strong>-1</strong><strong>] = </strong><strong>0</strong><strong>;</strong></p>
<p><strong>    pr_info(</strong><strong>"Decryption request successful\n"</strong><strong>);</strong></p>
<p><strong>    pr_info(</strong><strong>"Decrypted: %s\n"</strong><strong>, sk.scratchpad);</strong></p>
<p><strong>#endif</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>test_skcipher_encrypt</strong><strong>(</strong><strong>char</strong><strong> *plaintext, </strong><strong>char</strong><strong> *password,</strong></p>
<p><strong>                                 struct skcipher_def *sk)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> ret = -EFAULT;</strong></p>
<p>    <strong>unsigned</strong> <strong>char</strong><strong> key[SYMMETRIC_KEY_LENGTH];</strong></p>
<p>    <strong>if</strong><strong> (!sk-&gt;tfm) {</strong></p>
<p><strong>        sk-&gt;tfm = crypto_alloc_skcipher(</strong><strong>"cbc-aes-aesni"</strong><strong>, </strong><strong>0</strong><strong>, </strong><strong>0</strong><strong>);</strong></p>
<p>        <strong>if</strong><strong> (IS_ERR(sk-&gt;tfm)) {</strong></p>
<p><strong>            pr_info(</strong><strong>"could not allocate skcipher handle\n"</strong><strong>);</strong></p>
<p>            <strong>return</strong><strong> PTR_ERR(sk-&gt;tfm);</strong></p>
<p><strong>        }</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>if</strong><strong> (!sk-&gt;req) {</strong></p>
<p><strong>        sk-&gt;req = skcipher_request_alloc(sk-&gt;tfm, GFP_KERNEL);</strong></p>
<p>        <strong>if</strong><strong> (!sk-&gt;req) {</strong></p>
<p><strong>            pr_info(</strong><strong>"could not allocate skcipher request\n"</strong><strong>);</strong></p>
<p><strong>            ret = -ENOMEM;</strong></p>
<p>            <strong>goto</strong><strong> out;</strong></p>
<p><strong>        }</strong></p>
<p><strong>    }</strong></p>
<p><strong>    skcipher_request_set_callback(sk-&gt;req, CRYPTO_TFM_REQ_MAY_BACKLOG,</strong></p>
<p><strong>                                  test_skcipher_callback, &amp;sk-&gt;result);</strong></p>
<p>    <strong><emphasis>/* Очистка ключа. */</emphasis></strong></p>
<p>    <strong>memset</strong><strong>((</strong><strong>void</strong><strong> *)key, </strong><strong>'\0'</strong><strong>, SYMMETRIC_KEY_LENGTH);</strong></p>
<p>    <strong><emphasis>/* Использование самого популярного в мире пароля. */</emphasis></strong></p>
<p>    <strong>sprintf</strong><strong>((</strong><strong>char</strong><strong> *)key, </strong><strong>"%s"</strong><strong>, password);</strong></p>
<p>    <strong><emphasis>/* AES 256 с заданным симметричным ключом. */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (crypto_skcipher_setkey(sk-&gt;tfm, key, SYMMETRIC_KEY_LENGTH)) {</strong></p>
<p><strong>        pr_info(</strong><strong>"key could not be set\n"</strong><strong>);</strong></p>
<p><strong>        ret = -EAGAIN;</strong></p>
<p>        <strong>goto</strong><strong> out;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    pr_info(</strong><strong>"Symmetric key: %s\n"</strong><strong>, key);</strong></p>
<p><strong>    pr_info(</strong><strong>"Plaintext: %s\n"</strong><strong>, plaintext);</strong></p>
<p>    <strong>if</strong><strong> (!sk-&gt;ivdata) {</strong></p>
<p>        <strong><emphasis>/* См. https://en.wikipedia.org/wiki/Initialization_vector */</emphasis></strong></p>
<p><strong>        sk-&gt;ivdata = kmalloc(CIPHER_BLOCK_SIZE, GFP_KERNEL);</strong></p>
<p>        <strong>if</strong><strong> (!sk-&gt;ivdata) {</strong></p>
<p><strong>            pr_info(</strong><strong>"could not allocate ivdata\n"</strong><strong>);</strong></p>
<p>            <strong>goto</strong><strong> out;</strong></p>
<p><strong>        }</strong></p>
<p><strong>        get_random_bytes(sk-&gt;ivdata, CIPHER_BLOCK_SIZE);</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>if</strong><strong> (!sk-&gt;scratchpad) {</strong></p>
<p>        <strong><emphasis>/* Текст для шифрования. */</emphasis></strong></p>
<p><strong>        sk-&gt;scratchpad = kmalloc(CIPHER_BLOCK_SIZE, GFP_KERNEL);</strong></p>
<p>        <strong>if</strong><strong> (!sk-&gt;scratchpad) {</strong></p>
<p><strong>            pr_info(</strong><strong>"could not allocate scratchpad\n"</strong><strong>);</strong></p>
<p>            <strong>goto</strong><strong> out;</strong></p>
<p><strong>        }</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>sprintf</strong><strong>((</strong><strong>char</strong><strong> *)sk-&gt;scratchpad, </strong><strong>"%s"</strong><strong>, plaintext);</strong></p>
<p><strong>    sg_init_one(&amp;sk-&gt;sg, sk-&gt;scratchpad, CIPHER_BLOCK_SIZE);</strong></p>
<p><strong>    skcipher_request_set_crypt(sk-&gt;req, &amp;sk-&gt;sg, &amp;sk-&gt;sg, CIPHER_BLOCK_SIZE,</strong></p>
<p><strong>                               sk-&gt;ivdata);</strong></p>
<p><strong>    init_completion(&amp;sk-&gt;result.completion);</strong></p>
<p>    <strong><emphasis>/* Шифрование данных. */</emphasis></strong></p>
<p><strong>    ret = crypto_skcipher_encrypt(sk-&gt;req);</strong></p>
<p><strong>    ret = test_skcipher_result(sk, ret);</strong></p>
<p>    <strong>if</strong><strong> (ret)</strong></p>
<p>        <strong>goto</strong><strong> out;</strong></p>
<p><strong>    pr_info(</strong><strong>"Encryption request successful\n"</strong><strong>);</strong></p>
<p><strong>out:</strong></p>
<p>    <strong>return</strong><strong> ret;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>cryptoapi_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Самый популярный пароль в мире. */</emphasis></strong></p>
<p>    <strong>char</strong><strong> *password = </strong><strong>"password123"</strong><strong>;</strong></p>
<p><strong>    sk.tfm = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    sk.req = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    sk.scratchpad = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    sk.ciphertext = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    sk.ivdata = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    test_skcipher_encrypt(</strong><strong>"Testing"</strong><strong>, password, &amp;sk);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>cryptoapi_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    test_skcipher_finish(&amp;sk);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(cryptoapi_init);</strong></p>
<p><strong>module_exit(cryptoapi_exit);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Symmetric key encryption example"</strong><strong>);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>17. Драйвер виртуального устройства ввода</strong></p>
<empty-line/>
<p>Драйвер устройства ввода – это модуль, обеспечивающий возможность взаимодействия с интерактивным устройством через события. Например, клавиатура может отправлять событие нажатия или отпускания клавиши, сообщая ядру наши намерения. Драйвер устройства ввода выделяет новую структуру ввода с помощью функции input_allocate_device(), настраивает в ней битовые поля, ID устройства, версию и прочее, после чего регистрирует его через вызов input_register_device().</p>
<p>В качестве примера приведу vinput – API, обеспечивающий удобство разработки драйверов виртуальных устройств. Этот драйвер должен экспортировать vinput_device(), содержащую имя виртуального устройства, и структуру vinput_ops, которая описывает:</p>
<empty-line/>
<p><strong>● </strong>Функцию инициализации: init()</p>
<p><strong>● </strong>Функцию внедрения события ввода: send()</p>
<p><strong>● </strong>Функцию обратного чтения: read()</p>
<empty-line/>
<p>Далее с помощью vinput_register_device() и vinput_unregister_device() новое устройство добавляется в список поддерживаемых виртуальных устройств ввода:</p>
<empty-line/>
<p><strong>int</strong> <strong>init</strong><strong>(struct vinput *);</strong></p>
<empty-line/>
<p>Этой функции передаётся struct vinput, уже инициализированная с помощью выделенной struct input_dev. Функция init() отвечает за инициализацию возможностей устройства ввода и его регистрацию:</p>
<empty-line/>
<p><strong>int</strong> <strong>send</strong><strong>(struct vinput *, </strong><strong>char</strong><strong> *, </strong><strong>int</strong><strong>);</strong></p>
<empty-line/>
<p>Эта функция получает пользовательскую строку и внедряет соответствующее событие с помощью вызова input_report_XXXX или input_event. Данная строка уже скопирована от пользователя:</p>
<empty-line/>
<p><strong>int</strong> <strong>read</strong><strong>(struct vinput *, </strong><strong>char</strong><strong> *, </strong><strong>int</strong><strong>);</strong></p>
<empty-line/>
<p>Эта функция используется для отладки и должна заполнять параметр буфера последним событием, отправленным в формате виртуального устройства ввода. После этого буфер копируется пользователю. Устройства vinput создаются и уничтожаются с помощью sysfs, а внедрение событий выполняется через узел /dev. Имя устройства используется пользовательским пространством для экспорта нового виртуального устройства ввода. Структура class_attribute аналогична другим типам атрибутов, о которых шла речь в разделе 8:</p>
<empty-line/>
<p><strong>struct</strong> <strong>class_attribute</strong><strong> {</strong></p>
<p>    <strong>struct</strong> <strong>attribute</strong> <strong>attr</strong><strong>;</strong></p>
<p>    <strong>ssize_t</strong><strong> (*show)(struct class *class, struct class_attribute *attr,</strong></p>
<p>                    <strong>char</strong><strong> *buf);</strong></p>
<p>    <strong>ssize_t</strong><strong> (*store)(struct class *class, struct class_attribute *attr,</strong></p>
<p>                    <strong>const</strong> <strong>char</strong><strong> *buf, </strong><strong>size_t</strong><strong> count);</strong></p>
<p><strong>};</strong></p>
<empty-line/>
<p>В vinput.c макрос CLASS_ATTR_WO(export/unexport), определённый в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/device.h">include/linux/device.h</a> (в данном случае device.h включён в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/input.h">include/linux/input.h</a>) сгенерирует структуры class_attribute, названные class_attr_export/unexport.</p>
<empty-line/>
<p>После этого он поместит их в массив vinput_class_attrs, и макрос ATTRIBUTE_GROUPS(vinput_class) сгенерирует struct attribute_group vinput_class_group, которую нужно будет присвоить в vinput_class. В завершении выполняется вызов class_register(&amp;vinput_class) для создания атрибутов в sysfs.</p>
<empty-line/>
<p>Для создания записи sysfs vinputX и узла /dev:</p>
<empty-line/>
<p><strong>echo </strong><strong>"vkbd"</strong><strong> | sudo tee /sys/</strong><strong>class</strong><strong>/</strong><strong>vinput</strong><strong>/</strong><strong>export</strong></p>
<empty-line/>
<p>Для обратного экспорта устройства нужно echo его ID в unexport.</p>
<empty-line/>
<p><strong>echo </strong><strong>"0"</strong><strong> | sudo tee /sys/</strong><strong>class</strong><strong>/</strong><strong>vinput</strong><strong>/</strong><strong>unexport</strong></p>
<empty-line/>
<p>Код vinput.h:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * vinput.h</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#ifndef VINPUT_H</strong></p>
<p><strong>#define VINPUT_H</strong></p>
<p><strong>#include </strong><strong>&lt;linux/input.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/spinlock.h&gt;</strong></p>
<p><strong>#define VINPUT_MAX_LEN 128</strong></p>
<p><strong>#define MAX_VINPUT 32</strong></p>
<p><strong>#define VINPUT_MINORS MAX_VINPUT</strong></p>
<p><strong>#define dev_to_vinput(dev) container_of(dev, struct vinput, dev)</strong></p>
<p><strong>struct</strong> <strong>vinput_device</strong><strong>;</strong></p>
<p><strong>struct</strong> <strong>vinput</strong><strong> {</strong></p>
<p>    <strong>long</strong><strong> id;</strong></p>
<p>    <strong>long</strong><strong> devno;</strong></p>
<p>    <strong>long</strong><strong> last_entry;</strong></p>
<p>    <strong>spinlock_t</strong><strong> lock;</strong></p>
<p>    <strong>void</strong><strong> *priv_data;</strong></p>
<p>    <strong>struct</strong> <strong>device</strong> <strong>dev</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>list_head</strong> <strong>list</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>input_dev</strong><strong> *</strong><strong>input</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>vinput_device</strong><strong> *</strong><strong>type</strong><strong>;</strong></p>
<p><strong>};</strong></p>
<p><strong>struct</strong> <strong>vinput_ops</strong><strong> {</strong></p>
<p>    <strong>int</strong><strong> (*init)(struct vinput *);</strong></p>
<p>    <strong>int</strong><strong> (*kill)(struct vinput *);</strong></p>
<p>    <strong>int</strong><strong> (*send)(struct vinput *, </strong><strong>char</strong><strong> *, </strong><strong>int</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> (*read)(struct vinput *, </strong><strong>char</strong><strong> *, </strong><strong>int</strong><strong>);</strong></p>
<p><strong>};</strong></p>
<p><strong>struct</strong> <strong>vinput_device</strong><strong> {</strong></p>
<p>    <strong>char</strong><strong> name[</strong><strong>16</strong><strong>];</strong></p>
<p>    <strong>struct</strong> <strong>list_head</strong> <strong>list</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>vinput_ops</strong><strong> *</strong><strong>ops</strong><strong>;</strong></p>
<p><strong>};</strong></p>
<p><strong>int</strong> <strong>vinput_register</strong><strong>(struct vinput_device *dev);</strong></p>
<p><strong>void</strong> <strong>vinput_unregister</strong><strong>(struct vinput_device *dev);</strong></p>
<p><strong>#endif</strong></p>
<empty-line/>
<p>Код vinput.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * vinput.c</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/cdev.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/input.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/slab.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/spinlock.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;asm/uaccess.h&gt;</strong></p>
<p><strong>#include </strong><strong>"vinput.h"</strong></p>
<p><strong>#define DRIVER_NAME </strong><strong>"vinput"</strong></p>
<p><strong>#define dev_to_vinput(dev) container_of(dev, struct vinput, dev)</strong></p>
<p><strong>static</strong> <strong>DECLARE_BITMAP</strong><strong>(vinput_ids, VINPUT_MINORS);</strong></p>
<p><strong>static</strong> <strong>LIST_HEAD</strong><strong>(vinput_devices);</strong></p>
<p><strong>static</strong> <strong>LIST_HEAD</strong><strong>(vinput_vdevices);</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> vinput_dev;</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>spinlock</strong> <strong>vinput_lock</strong><strong>;</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>class</strong> <strong>vinput_class</strong><strong>;</strong></p>
<p><strong><emphasis>/* Поиск имени устройства vinput в связанном списке vinput_devices,</emphasis></strong></p>
<p><strong><emphasis> * добавленном в vinput_register().</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong><strong> struct vinput_device *</strong><strong>vinput_get_device_by_type</strong><strong>(</strong><strong>const</strong> <strong>char</strong><strong> *type)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> found = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>vinput_device</strong><strong> *</strong><strong>vinput</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>list_head</strong><strong> *</strong><strong>curr</strong><strong>;</strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_for_each (curr, &amp;vinput_devices) {</strong></p>
<p><strong>        vinput = list_entry(curr, struct vinput_device, </strong><strong>list</strong><strong>);</strong></p>
<p>        <strong>if</strong><strong> (vinput &amp;&amp; </strong><strong>strncmp</strong><strong>(type, vinput-&gt;name, </strong><strong>strlen</strong><strong>(vinput-&gt;name)) == </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>            found = </strong><strong>1</strong><strong>;</strong></p>
<p>            <strong>break</strong><strong>;</strong></p>
<p><strong>        }</strong></p>
<p><strong>    }</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p>    <strong>if</strong><strong> (found)</strong></p>
<p>        <strong>return</strong><strong> vinput;</strong></p>
<p>    <strong>return</strong><strong> ERR_PTR(-ENODEV);</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Поиск ID виртуального устройства в связанном списке vinput_vdevices,</emphasis></strong></p>
<p><strong><emphasis> * добавленном в vinput_alloc_vdevice().</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong><strong> struct vinput *</strong><strong>vinput_get_vdevice_by_id</strong><strong>(</strong><strong>long</strong><strong> id)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>NULL</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>list_head</strong><strong> *</strong><strong>curr</strong><strong>;</strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_for_each (curr, &amp;vinput_vdevices) {</strong></p>
<p><strong>        vinput = list_entry(curr, struct vinput, </strong><strong>list</strong><strong>);</strong></p>
<p>        <strong>if</strong><strong> (vinput &amp;&amp; vinput-&gt;id == id)</strong></p>
<p>            <strong>break</strong><strong>;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p>    <strong>if</strong><strong> (vinput &amp;&amp; vinput-&gt;id == id)</strong></p>
<p>        <strong>return</strong><strong> vinput;</strong></p>
<p>    <strong>return</strong><strong> ERR_PTR(-ENODEV);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_open</strong><strong>(struct inode *inode, struct file *file)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>NULL</strong><strong>;</strong></p>
<p><strong>    vinput = vinput_get_vdevice_by_id(iminor(inode));</strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(vinput))</strong></p>
<p><strong>        err = PTR_ERR(vinput);</strong></p>
<p>    <strong>else</strong></p>
<p><strong>        file-&gt;private_data = vinput;</strong></p>
<p>    <strong>return</strong><strong> err;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_release</strong><strong>(struct inode *inode, struct file *file)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>vinput_read</strong><strong>(struct file *file, </strong><strong>char</strong><strong> __user *buffer, </strong><strong>size_t</strong><strong> count,</strong></p>
<p>                           <strong>loff_t</strong><strong> *offset)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> len;</strong></p>
<p>    <strong>char</strong><strong> buff[VINPUT_MAX_LEN + </strong><strong>1</strong><strong>];</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>file</strong><strong>-&gt;</strong><strong>private_data</strong><strong>;</strong></p>
<p><strong>    len = vinput-&gt;type-&gt;ops-&gt;read(vinput, buff, count);</strong></p>
<p>    <strong>if</strong><strong> (*offset &gt; len)</strong></p>
<p><strong>        count = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>else</strong> <strong>if</strong><strong> (count + *offset &gt; VINPUT_MAX_LEN)</strong></p>
<p><strong>        count = len - *offset;</strong></p>
<p>    <strong>if</strong><strong> (raw_copy_to_user(buffer, buff + *offset, count))</strong></p>
<p><strong>        count = -EFAULT;</strong></p>
<p><strong>    *offset += count;</strong></p>
<p>    <strong>return</strong><strong> count;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>vinput_write</strong><strong>(struct file *file, </strong><strong>const</strong> <strong>char</strong><strong> __user *buffer,</strong></p>
<p>                            <strong>size_t</strong><strong> count, </strong><strong>loff_t</strong><strong> *offset)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>char</strong><strong> buff[VINPUT_MAX_LEN + </strong><strong>1</strong><strong>];</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>file</strong><strong>-&gt;</strong><strong>private_data</strong><strong>;</strong></p>
<p>    <strong>memset</strong><strong>(buff, </strong><strong>0</strong><strong>, </strong><strong>sizeof</strong><strong>(</strong><strong>char</strong><strong>) * (VINPUT_MAX_LEN + </strong><strong>1</strong><strong>));</strong></p>
<p>    <strong>if</strong><strong> (count &gt; VINPUT_MAX_LEN) {</strong></p>
<p><strong>        dev_warn(&amp;vinput-&gt;dev, </strong><strong>"Too long. %d bytes allowed\n"</strong><strong>, VINPUT_MAX_LEN);</strong></p>
<p>        <strong>return</strong><strong> -EINVAL;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>if</strong><strong> (raw_copy_from_user(buff, buffer, count))</strong></p>
<p>        <strong>return</strong><strong> -EFAULT;</strong></p>
<p>    <strong>return</strong><strong> vinput-&gt;type-&gt;ops-&gt;send(vinput, buff, count);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>file_operations</strong> <strong>vinput_fops</strong><strong> = {</strong></p>
<p><strong>    .owner = THIS_MODULE,</strong></p>
<p><strong>    .open = vinput_open,</strong></p>
<p><strong>    .release = vinput_release,</strong></p>
<p><strong>    .read = vinput_read,</strong></p>
<p><strong>    .write = vinput_write,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>vinput_unregister_vdevice</strong><strong>(struct vinput *vinput)</strong></p>
<p><strong>{</strong></p>
<p><strong>    input_unregister_device(vinput-&gt;input);</strong></p>
<p>    <strong>if</strong><strong> (vinput-&gt;type-&gt;ops-&gt;kill)</strong></p>
<p><strong>        vinput-&gt;type-&gt;ops-&gt;kill(vinput);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>vinput_destroy_vdevice</strong><strong>(struct vinput *vinput)</strong></p>
<p><strong>{</strong></p>
<p>    <strong><emphasis>/* Сначала удаление из списка. */</emphasis></strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_del(&amp;vinput-&gt;</strong><strong>list</strong><strong>);</strong></p>
<p><strong>    clear_bit(vinput-&gt;id, vinput_ids);</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p><strong>    module_put(THIS_MODULE);</strong></p>
<p><strong>    kfree(vinput);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>vinput_release_dev</strong><strong>(struct device *dev)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>dev_to_vinput</strong><strong>(</strong><strong>dev</strong><strong>);</strong></p>
<p>    <strong>int</strong><strong> id = vinput-&gt;id;</strong></p>
<p><strong>    vinput_destroy_vdevice(vinput);</strong></p>
<p><strong>    pr_debug(</strong><strong>"released vinput%d.\n"</strong><strong>, id);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong><strong> struct vinput *</strong><strong>vinput_alloc_vdevice</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err;</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>kzalloc</strong><strong>(</strong><strong>sizeof</strong><strong>(</strong><strong>struct</strong> <strong>vinput</strong><strong>), </strong><strong>GFP_KERNEL</strong><strong>);</strong></p>
<p><strong>    try_module_get(THIS_MODULE);</strong></p>
<p>    <strong>memset</strong><strong>(vinput, </strong><strong>0</strong><strong>, </strong><strong>sizeof</strong><strong>(struct vinput));</strong></p>
<p><strong>    spin_lock_init(&amp;vinput-&gt;lock);</strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    vinput-&gt;id = find_first_zero_bit(vinput_ids, VINPUT_MINORS);</strong></p>
<p>    <strong>if</strong><strong> (vinput-&gt;id &gt;= VINPUT_MINORS) {</strong></p>
<p><strong>        err = -ENOBUFS;</strong></p>
<p>        <strong>goto</strong><strong> fail_id;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    set_bit(vinput-&gt;id, vinput_ids);</strong></p>
<p><strong>    list_add(&amp;vinput-&gt;</strong><strong>list</strong><strong>, &amp;vinput_vdevices);</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p>    <strong><emphasis>/* Выделение устройства ввода. */</emphasis></strong></p>
<p><strong>    vinput-&gt;input = input_allocate_device();</strong></p>
<p>    <strong>if</strong><strong> (vinput-&gt;input == </strong><strong>NULL</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"vinput: Cannot allocate vinput input device\n"</strong><strong>);</strong></p>
<p><strong>        err = -ENOMEM;</strong></p>
<p>        <strong>goto</strong><strong> fail_input_dev;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong><emphasis>/* Инициализация устройства. */</emphasis></strong></p>
<p><strong>    vinput-&gt;dev.class = &amp;vinput_class;</strong></p>
<p><strong>    vinput-&gt;dev.release = vinput_release_dev;</strong></p>
<p><strong>    vinput-&gt;dev.devt = MKDEV(vinput_dev, vinput-&gt;id);</strong></p>
<p><strong>    dev_set_name(&amp;vinput-&gt;dev, DRIVER_NAME </strong><strong>"%lu"</strong><strong>, vinput-&gt;id);</strong></p>
<p>    <strong>return</strong><strong> vinput;</strong></p>
<p><strong>fail_input_dev:</strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_del(&amp;vinput-&gt;</strong><strong>list</strong><strong>);</strong></p>
<p><strong>fail_id:</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p><strong>    module_put(THIS_MODULE);</strong></p>
<p><strong>    kfree(vinput);</strong></p>
<p>    <strong>return</strong><strong> ERR_PTR(err);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_register_vdevice</strong><strong>(struct vinput *vinput)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong><emphasis>/* Регистрация устройства ввода. */</emphasis></strong></p>
<p><strong>    vinput-&gt;input-&gt;name = vinput-&gt;type-&gt;name;</strong></p>
<p><strong>    vinput-&gt;input-&gt;phys = </strong><strong>"vinput"</strong><strong>;</strong></p>
<p><strong>    vinput-&gt;input-&gt;dev.parent = &amp;vinput-&gt;dev;</strong></p>
<p><strong>    vinput-&gt;input-&gt;id.bustype = BUS_VIRTUAL;</strong></p>
<p><strong>    vinput-&gt;input-&gt;id.product = </strong><strong>0x0000</strong><strong>;</strong></p>
<p><strong>    vinput-&gt;input-&gt;id.vendor = </strong><strong>0x0000</strong><strong>;</strong></p>
<p><strong>    vinput-&gt;input-&gt;id.version = </strong><strong>0x0000</strong><strong>;</strong></p>
<p><strong>    err = vinput-&gt;type-&gt;ops-&gt;init(vinput);</strong></p>
<p>    <strong>if</strong><strong> (err == </strong><strong>0</strong><strong>)</strong></p>
<p><strong>        dev_info(&amp;vinput-&gt;dev, </strong><strong>"Registered virtual input %s %ld\n"</strong><strong>,</strong></p>
<p><strong>                 vinput-&gt;type-&gt;name, vinput-&gt;id);</strong></p>
<p>    <strong>return</strong><strong> err;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>export_store</strong><strong>(struct class *class, struct class_attribute *attr,</strong></p>
<p>                            <strong>const</strong> <strong>char</strong><strong> *buf, </strong><strong>size_t</strong><strong> len)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err;</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong>;</strong></p>
<p>    <strong>struct</strong> <strong>vinput_device</strong><strong> *</strong><strong>device</strong><strong>;</strong></p>
<p><strong>    device = vinput_get_device_by_type(buf);</strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(device)) {</strong></p>
<p><strong>        pr_info(</strong><strong>"vinput: This virtual device isn't registered\n"</strong><strong>);</strong></p>
<p><strong>        err = PTR_ERR(device);</strong></p>
<p>        <strong>goto</strong><strong> fail;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    vinput = vinput_alloc_vdevice();</strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(vinput)) {</strong></p>
<p><strong>        err = PTR_ERR(vinput);</strong></p>
<p>        <strong>goto</strong><strong> fail;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    vinput-&gt;type = device;</strong></p>
<p><strong>    err = device_register(&amp;vinput-&gt;dev);</strong></p>
<p>    <strong>if</strong><strong> (err &lt; </strong><strong>0</strong><strong>)</strong></p>
<p>        <strong>goto</strong><strong> fail_register;</strong></p>
<p><strong>    err = vinput_register_vdevice(vinput);</strong></p>
<p>    <strong>if</strong><strong> (err &lt; </strong><strong>0</strong><strong>)</strong></p>
<p>        <strong>goto</strong><strong> fail_register_vinput;</strong></p>
<p>    <strong>return</strong><strong> len;</strong></p>
<p><strong>fail_register_vinput:</strong></p>
<p><strong>    device_unregister(&amp;vinput-&gt;dev);</strong></p>
<p><strong>fail_register:</strong></p>
<p><strong>    vinput_destroy_vdevice(vinput);</strong></p>
<p><strong>fail:</strong></p>
<p>    <strong>return</strong><strong> err;</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Этот макрос генерирует структуру class_attr_export и export_store() */</emphasis></strong></p>
<p><strong>static</strong> <strong>CLASS_ATTR_WO</strong><strong>(</strong><strong>export</strong><strong>);</strong></p>
<p><strong>static</strong> <strong>ssize_t</strong> <strong>unexport_store</strong><strong>(struct class *class, struct class_attribute *attr,</strong></p>
<p>                              <strong>const</strong> <strong>char</strong><strong> *buf, </strong><strong>size_t</strong><strong> len)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err;</strong></p>
<p>    <strong>unsigned</strong> <strong>long</strong><strong> id;</strong></p>
<p>    <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong>;</strong></p>
<p><strong>    err = kstrtol(buf, </strong><strong>10</strong><strong>, &amp;id);</strong></p>
<p>    <strong>if</strong><strong> (err) {</strong></p>
<p><strong>        err = -EINVAL;</strong></p>
<p>        <strong>goto</strong><strong> failed;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    vinput = vinput_get_vdevice_by_id(id);</strong></p>
<p>    <strong>if</strong><strong> (IS_ERR(vinput)) {</strong></p>
<p><strong>        pr_err(</strong><strong>"vinput: No such vinput device %ld\n"</strong><strong>, id);</strong></p>
<p><strong>        err = PTR_ERR(vinput);</strong></p>
<p>        <strong>goto</strong><strong> failed;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    vinput_unregister_vdevice(vinput);</strong></p>
<p><strong>    device_unregister(&amp;vinput-&gt;dev);</strong></p>
<p>    <strong>return</strong><strong> len;</strong></p>
<p><strong>failed:</strong></p>
<p>    <strong>return</strong><strong> err;</strong></p>
<p><strong>}</strong></p>
<p><strong><emphasis>/* Этот макрос генерирует структуру class_attr_unexport</emphasis></strong></p>
<p><strong><emphasis> * и unexport_store().</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>static</strong> <strong>CLASS_ATTR_WO</strong><strong>(unexport);</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>attribute</strong><strong> *</strong><strong>vinput_class_attrs</strong><strong>[] = {</strong></p>
<p><strong>    &amp;class_attr_export.attr,</strong></p>
<p><strong>    &amp;class_attr_unexport.attr,</strong></p>
<p>    <strong>NULL</strong><strong>,</strong></p>
<p><strong>};</strong></p>
<p><strong><emphasis>/* Этот макрос генерирует структуру vinput_class_groups. */</emphasis></strong></p>
<p><strong>ATTRIBUTE_GROUPS(vinput_class);</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>class</strong> <strong>vinput_class</strong><strong> = {</strong></p>
<p><strong>    .name = </strong><strong>"vinput"</strong><strong>,</strong></p>
<p><strong>    .owner = THIS_MODULE,</strong></p>
<p><strong>    .class_groups = vinput_class_groups,</strong></p>
<p><strong>};</strong></p>
<p><strong>int</strong> <strong>vinput_register</strong><strong>(struct vinput_device *dev)</strong></p>
<p><strong>{</strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_add(&amp;dev-&gt;</strong><strong>list</strong><strong>, &amp;vinput_devices);</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p><strong>    pr_info(</strong><strong>"vinput: registered new virtual input device '%s'\n"</strong><strong>, dev-&gt;name);</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>EXPORT_SYMBOL(vinput_register);</strong></p>
<p><strong>void</strong> <strong>vinput_unregister</strong><strong>(struct vinput_device *dev)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>struct</strong> <strong>list_head</strong><strong> *</strong><strong>curr</strong><strong>, *</strong><strong>next</strong><strong>;</strong></p>
<p>    <strong><emphasis>/* Сначала удаление из списка. */</emphasis></strong></p>
<p><strong>    spin_lock(&amp;vinput_lock);</strong></p>
<p><strong>    list_del(&amp;dev-&gt;</strong><strong>list</strong><strong>);</strong></p>
<p><strong>    spin_unlock(&amp;vinput_lock);</strong></p>
<p>    <strong><emphasis>/* Снятие регистрации всех устройств этого типа. */</emphasis></strong></p>
<p><strong>    list_for_each_safe (curr, next, &amp;vinput_vdevices) {</strong></p>
<p>        <strong>struct</strong> <strong>vinput</strong><strong> *</strong><strong>vinput</strong><strong> = </strong><strong>list_entry</strong><strong>(</strong><strong>curr</strong><strong>, </strong><strong>struct</strong> <strong>vinput</strong><strong>, </strong><strong>list</strong><strong>);</strong></p>
<p>        <strong>if</strong><strong> (vinput &amp;&amp; vinput-&gt;type == dev) {</strong></p>
<p><strong>            vinput_unregister_vdevice(vinput);</strong></p>
<p><strong>            device_unregister(&amp;vinput-&gt;dev);</strong></p>
<p><strong>        }</strong></p>
<p><strong>    }</strong></p>
<p><strong>    pr_info(</strong><strong>"vinput: unregistered virtual input device '%s'\n"</strong><strong>, dev-&gt;name);</strong></p>
<p><strong>}</strong></p>
<p><strong>EXPORT_SYMBOL(vinput_unregister);</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>vinput_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> err = </strong><strong>0</strong><strong>;</strong></p>
<p><strong>    pr_info(</strong><strong>"vinput: Loading virtual input driver\n"</strong><strong>);</strong></p>
<p><strong>    vinput_dev = register_chrdev(</strong><strong>0</strong><strong>, DRIVER_NAME, &amp;vinput_fops);</strong></p>
<p>    <strong>if</strong><strong> (vinput_dev &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"vinput: Unable to allocate char dev region\n"</strong><strong>);</strong></p>
<p>        <strong>goto</strong><strong> failed_alloc;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    spin_lock_init(&amp;vinput_lock);</strong></p>
<p><strong>    err = class_register(&amp;vinput_class);</strong></p>
<p>    <strong>if</strong><strong> (err &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        pr_err(</strong><strong>"vinput: Unable to register vinput class\n"</strong><strong>);</strong></p>
<p>        <strong>goto</strong><strong> failed_class;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>failed_class:</strong></p>
<p><strong>    class_unregister(&amp;vinput_class);</strong></p>
<p><strong>failed_alloc:</strong></p>
<p>    <strong>return</strong><strong> err;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>vinput_end</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"vinput: Unloading virtual input driver\n"</strong><strong>);</strong></p>
<p><strong>    unregister_chrdev(vinput_dev, DRIVER_NAME);</strong></p>
<p><strong>    class_unregister(&amp;vinput_class);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(vinput_init);</strong></p>
<p><strong>module_exit(vinput_end);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Emulate input events"</strong><strong>);</strong></p>
<empty-line/>
<p>Здесь мы рассматриваем виртуальную клавиатуру как один из примеров использования vinput. Она поддерживает все коды клавиш KEY_MAX. Внедрение производится в формате KEY_CODE, как это определено в <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/input.h">include/linux/input.h</a>.</p>
<p>Положительное значение означает KEY_PRESS, а отрицательное KEY_RELEASE. Эта клавиатура поддерживает повторение ввода, когда клавиша остаётся нажатой длительное время. Код ниже демонстрирует работу данной симуляции.</p>
<empty-line/>
<p>Симулирует нажатие «g» ( KEY_G = 34):</p>
<empty-line/>
<p><strong>echo </strong><strong>"+34"</strong><strong> | sudo tee /dev/vinput0</strong></p>
<empty-line/>
<p>Симулирует отпускание «g» ( KEY_G = 34):</p>
<empty-line/>
<p><strong>echo </strong><strong>"-34"</strong><strong> | sudo tee /dev/vinput0</strong></p>
<empty-line/>
<p>Код vkbd.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * vkbd.c</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/init.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/input.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/spinlock.h&gt;</strong></p>
<p><strong>#include </strong><strong>"vinput.h"</strong></p>
<p><strong>#define VINPUT_KBD </strong><strong>"vkbd"</strong></p>
<p><strong>#define VINPUT_RELEASE 0</strong></p>
<p><strong>#define VINPUT_PRESS 1</strong></p>
<p><strong>static</strong> <strong>unsigned</strong> <strong>short</strong><strong> vkeymap[KEY_MAX];</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_vkbd_init</strong><strong>(struct vinput *vinput)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p>    <strong><emphasis>/* Устанавливает битовое поле ввода. */</emphasis></strong></p>
<p><strong>    vinput-&gt;input-&gt;evbit[</strong><strong>0</strong><strong>] = BIT_MASK(EV_KEY) | BIT_MASK(EV_REP);</strong></p>
<p><strong>    vinput-&gt;input-&gt;keycodesize = </strong><strong>sizeof</strong><strong>(</strong><strong>unsigned</strong> <strong>short</strong><strong>);</strong></p>
<p><strong>    vinput-&gt;input-&gt;keycodemax = KEY_MAX;</strong></p>
<p><strong>    vinput-&gt;input-&gt;keycode = vkeymap;</strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; KEY_MAX; i++)</strong></p>
<p><strong>        set_bit(vkeymap[i], vinput-&gt;input-&gt;keybit);</strong></p>
<p>    <strong><emphasis>/* vinput поможет выделить новую структуру устройства ввода через</emphasis></strong></p>
<p><strong><emphasis>     * input_allocate_device(), что позволит с лёгкостью его</emphasis></strong></p>
<p><strong><emphasis>     * зарегистрировать.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>return</strong><strong> input_register_device(vinput-&gt;input);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_vkbd_read</strong><strong>(struct vinput *vinput, </strong><strong>char</strong><strong> *buff, </strong><strong>int</strong><strong> len)</strong></p>
<p><strong>{</strong></p>
<p><strong>    spin_lock(&amp;vinput-&gt;lock);</strong></p>
<p><strong>    len = </strong><strong>snprintf</strong><strong>(buff, len, </strong><strong>"%+ld\n"</strong><strong>, vinput-&gt;last_entry);</strong></p>
<p><strong>    spin_unlock(&amp;vinput-&gt;lock);</strong></p>
<p>    <strong>return</strong><strong> len;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>vinput_vkbd_send</strong><strong>(struct vinput *vinput, </strong><strong>char</strong><strong> *buff, </strong><strong>int</strong><strong> len)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> ret;</strong></p>
<p>    <strong>long</strong><strong> key = </strong><strong>0</strong><strong>;</strong></p>
<p>    <strong>short</strong><strong> type = VINPUT_PRESS;</strong></p>
<p>    <strong><emphasis>/* Определяем, какое было получено событие</emphasis></strong></p>
<p><strong><emphasis>     * (нажатие или отпускание) и сохраняем это состояние.</emphasis></strong></p>
<p><strong><emphasis>     */</emphasis></strong></p>
<p>    <strong>if</strong><strong> (buff[</strong><strong>0</strong><strong>] == </strong><strong>'+'</strong><strong>)</strong></p>
<p><strong>        ret = kstrtol(buff + </strong><strong>1</strong><strong>, </strong><strong>10</strong><strong>, &amp;key);</strong></p>
<p>    <strong>else</strong></p>
<p><strong>        ret = kstrtol(buff, </strong><strong>10</strong><strong>, &amp;key);</strong></p>
<p>    <strong>if</strong><strong> (ret)</strong></p>
<p><strong>        dev_err(&amp;vinput-&gt;dev, </strong><strong>"error during kstrtol: -%d\n"</strong><strong>, ret);</strong></p>
<p><strong>    spin_lock(&amp;vinput-&gt;lock);</strong></p>
<p><strong>    vinput-&gt;last_entry = key;</strong></p>
<p><strong>    spin_unlock(&amp;vinput-&gt;lock);</strong></p>
<p>    <strong>if</strong><strong> (key &lt; </strong><strong>0</strong><strong>) {</strong></p>
<p><strong>        type = VINPUT_RELEASE;</strong></p>
<p><strong>        key = -key;</strong></p>
<p><strong>    }</strong></p>
<p><strong>    dev_info(&amp;vinput-&gt;dev, </strong><strong>"Event %s code %ld\n"</strong><strong>,</strong></p>
<p><strong>             (type == VINPUT_RELEASE) ? </strong><strong>"VINPUT_RELEASE"</strong><strong> : </strong><strong>"VINPUT_PRESS"</strong><strong>, key);</strong></p>
<p>    <strong><emphasis>/* Передаём полученное состояние подсистеме ввода. */</emphasis></strong></p>
<p><strong>    input_report_key(vinput-&gt;input, key, type);</strong></p>
<p>    <strong><emphasis>/* Сообщаем подсистеме ввода, что передача закончена. */</emphasis></strong></p>
<p><strong>    input_sync(vinput-&gt;input);</strong></p>
<p>    <strong>return</strong><strong> len;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>vinput_ops</strong> <strong>vkbd_ops</strong><strong> = {</strong></p>
<p><strong>    .init = vinput_vkbd_init,</strong></p>
<p><strong>    .send = vinput_vkbd_send,</strong></p>
<p><strong>    .read = vinput_vkbd_read,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>vinput_device</strong> <strong>vkbd_dev</strong><strong> = {</strong></p>
<p><strong>    .name = VINPUT_KBD,</strong></p>
<p><strong>    .ops = &amp;vkbd_ops,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>int</strong><strong> __init </strong><strong>vkbd_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> i;</strong></p>
<p>    <strong>for</strong><strong> (i = </strong><strong>0</strong><strong>; i &lt; KEY_MAX; i++)</strong></p>
<p><strong>        vkeymap[i] = i;</strong></p>
<p>    <strong>return</strong><strong> vinput_register(&amp;vkbd_dev);</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong><strong> __exit </strong><strong>vkbd_end</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    vinput_unregister(&amp;vkbd_dev);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(vkbd_init);</strong></p>
<p><strong>module_exit(vkbd_end);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Emulate keyboard input events through /dev/vinput"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>18. Стандартизация интерфейсов: модель устройства</strong></p>
<empty-line/>
<p>К этому моменту мы рассмотрели все виды модулей, выполняющие всевозможные задачи, но в их интерфейсах не было согласованности с остальной частью ядра. Для внесения согласованности, которая бы обеспечила как минимум стандартизированный способ запускать, приостанавливать и возобновлять работу устройства, была добавлена модель устройства.</p>
<empty-line/>
<p>Ниже показан её пример, который вы можете использовать в качестве шаблона для добавления собственных функций приостановки, возобновления и прочего.</p>
<empty-line/>
<p>Код devicemodel.c:</p>
<empty-line/>
<p><strong><emphasis>/*</emphasis></strong></p>
<p><strong><emphasis> * devicemodel.c</emphasis></strong></p>
<p><strong><emphasis> */</emphasis></strong></p>
<p><strong>#include </strong><strong>&lt;linux/kernel.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/module.h&gt;</strong></p>
<p><strong>#include </strong><strong>&lt;linux/platform_device.h&gt;</strong></p>
<p><strong>struct</strong> <strong>devicemodel_data</strong><strong> {</strong></p>
<p>    <strong>char</strong><strong> *greeting;</strong></p>
<p>    <strong>int</strong><strong> number;</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>devicemodel_probe</strong><strong>(struct platform_device *dev)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>struct</strong> <strong>devicemodel_data</strong><strong> *</strong><strong>pd</strong><strong> =</strong></p>
<p><strong>        (</strong><strong>struct</strong> <strong>devicemodel_data</strong><strong> *)(</strong><strong>dev</strong><strong>-&gt;</strong><strong>dev</strong><strong>.</strong><strong>platform_data</strong><strong>);</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel probe\n"</strong><strong>);</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel greeting: %s; %d\n"</strong><strong>, pd-&gt;greeting, pd-&gt;number);</strong></p>
<p>    <strong><emphasis>/* Код инициализации устройства. */</emphasis></strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>devicemodel_remove</strong><strong>(struct platform_device *dev)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel example removed\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Код удаления устройства. */</emphasis></strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>devicemodel_suspend</strong><strong>(struct device *dev)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel example suspend\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Код приостановки устройства. */</emphasis></strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>devicemodel_resume</strong><strong>(struct device *dev)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel example resume\n"</strong><strong>);</strong></p>
<p>    <strong><emphasis>/* Код возобновления работы устройства. */</emphasis></strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>const</strong> <strong>struct</strong> <strong>dev_pm_ops</strong> <strong>devicemodel_pm_ops</strong><strong> = {</strong></p>
<p><strong>    .suspend = devicemodel_suspend,</strong></p>
<p><strong>    .resume = devicemodel_resume,</strong></p>
<p><strong>    .poweroff = devicemodel_suspend,</strong></p>
<p><strong>    .freeze = devicemodel_suspend,</strong></p>
<p><strong>    .thaw = devicemodel_resume,</strong></p>
<p><strong>    .restore = devicemodel_resume,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>struct</strong> <strong>platform_driver</strong> <strong>devicemodel_driver</strong><strong> = {</strong></p>
<p><strong>    .driver =</strong></p>
<p><strong>        {</strong></p>
<p><strong>            .name = </strong><strong>"devicemodel_example"</strong><strong>,</strong></p>
<p><strong>            .owner = THIS_MODULE,</strong></p>
<p><strong>            .pm = &amp;devicemodel_pm_ops,</strong></p>
<p><strong>        },</strong></p>
<p><strong>    .probe = devicemodel_probe,</strong></p>
<p><strong>    .remove = devicemodel_remove,</strong></p>
<p><strong>};</strong></p>
<p><strong>static</strong> <strong>int</strong> <strong>devicemodel_init</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p>    <strong>int</strong><strong> ret;</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel init\n"</strong><strong>);</strong></p>
<p><strong>    ret = platform_driver_register(&amp;devicemodel_driver);</strong></p>
<p>    <strong>if</strong><strong> (ret) {</strong></p>
<p><strong>        pr_err(</strong><strong>"Unable to register driver\n"</strong><strong>);</strong></p>
<p>        <strong>return</strong><strong> ret;</strong></p>
<p><strong>    }</strong></p>
<p>    <strong>return</strong> <strong>0</strong><strong>;</strong></p>
<p><strong>}</strong></p>
<p><strong>static</strong> <strong>void</strong> <strong>devicemodel_exit</strong><strong>(</strong><strong>void</strong><strong>)</strong></p>
<p><strong>{</strong></p>
<p><strong>    pr_info(</strong><strong>"devicemodel exit\n"</strong><strong>);</strong></p>
<p><strong>    platform_driver_unregister(&amp;devicemodel_driver);</strong></p>
<p><strong>}</strong></p>
<p><strong>module_init(devicemodel_init);</strong></p>
<p><strong>module_exit(devicemodel_exit);</strong></p>
<p><strong>MODULE_LICENSE(</strong><strong>"GPL"</strong><strong>);</strong></p>
<p><strong>MODULE_DESCRIPTION(</strong><strong>"Linux Device Model example"</strong><strong>);</strong></p>
<empty-line/>
<p><strong>19. Оптимизации</strong></p>
<empty-line/>
<p>▍ 19.1 Условия likely и unlikely</p>
<empty-line/>
<p>Иногда вам может потребоваться максимально быстрое выполнение кода, особенно если он обрабатывает прерывание или выполняет нечто, способное вызвать значительную задержку. Если ваш код содержит логические условия, и вы знаете, что эти условия практически всегда оцениваются как true либо false, тогда можете позволить компилятору выполнить соответствующую оптимизацию с помощью макросов likely и unlikely.</p>
<empty-line/>
<p>К примеру, при выделении памяти вы практически всегда ожидаете успешного завершения операции:</p>
<empty-line/>
<p><strong>bvl = bvec_alloc(gfp_mask, nr_iovecs, &amp;idx);</strong></p>
<p><strong>if</strong><strong> (unlikely(!bvl)) {</strong></p>
<p><strong>    mempool_free(bio, bio_pool);</strong></p>
<p><strong>    bio = </strong><strong>NULL</strong><strong>;</strong></p>
<p>    <strong>goto</strong><strong> out;</strong></p>
<p><strong>}</strong></p>
<empty-line/>
<p>Когда используется макрос unlikely, компилятор изменяет вывод машинной инструкции, чтобы код продолжал выполнение по ветке false и делал переход, только когда условие true. Это позволяет избежать очистки конвейера процессора. При использовании макроса likely происходит противоположное.</p>
<empty-line/>
<p><strong>20. Важные нюансы</strong></p>
<empty-line/>
<p>▍ 20.1 Использование стандартных библиотек</p>
<empty-line/>
<p>Этого делать нельзя. В модуле ядра допустимо использовать исключительно функции ядра, которые вы можете найти в /proc/kallsyms.</p>
<empty-line/>
<p>▍ 20.2 Отключение прерываний</p>
<empty-line/>
<p>Вам может потребоваться делать это ненадолго, что вполне нормально. Если же вы впоследствии их не включите, то система зависнет, и её придётся отключить.</p>
<empty-line/>
<p><strong>21. Дальнейшие шаги</strong></p>
<empty-line/>
<p>Для тех, кто серьёзно заинтересован в освоении программирования ядра, рекомендую ознакомиться с ресурсом <a l:href="https://kernelnewbies.org/">kernelnewbies.org</a> и поддиректорией <a l:href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/Documentation">Documentation</a> в исходном коде, которая даёт неплохие базовые понятия для дальнейшего изучения темы, хотя местами могла бы быть написана и получше. Кроме того, как сказал сам Линус Торвальдс, лучший способ изучить ядро – это самостоятельно читать его исходный код.</p>
<empty-line/>
<p>Если вы желаете внести свой вклад в данное пособие или заметили в нём какие-либо серьёзные недочёты, создайте по этой теме запрос на <a l:href="https://github.com/sysprog21/lkmpg">https://github.com/sysprog21/lkmpg</a>. Будем признательны за ваши пул-реквесты.</p>
<empty-line/>
<p>Успехов!</p>
<empty-line/>
<p><strong>Эпилог</strong></p>
<empty-line/>
<p>Перевод подготовлен редакционной командой компании RUVDS.com. Первоначально руководство выходило по частям - в блоге компании на Хабр:</p>
<empty-line/><empty-line/>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/681880/">Часть 1</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/683106/">Часть 2</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/684382/">Часть 3</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/685168/">Часть 4</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/686596/">Часть 5</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/688564/">Часть 6</a></p>
<p><strong>● </strong><a l:href="https://habr.com/ru/company/ruvds/blog/689346/">Часть 7</a></p>
<empty-line/>
<p><strong>Особая благодарность в подготовке электронной версии и перевода:</strong></p>
<empty-line/><empty-line/>
<p><strong>переводчик:</strong> <a l:href="https://habr.com/ru/users/Bright_Translate/"><strong>Bright_Translate</strong></a></p>
<empty-line/>
<p><strong>редактор:</strong> <a l:href="https://habr.com/users/JohurN/"><strong>JohurN</strong></a></p>
<empty-line/>
<p><strong>линуксоид и </strong><strong>руководитель спецпроектов RUVDS</strong><strong>:</strong> <a l:href="https://habr.com/users/dlinyj/"><strong>Dlinyj</strong></a></p>
<empty-line/>
<p>Если у вас возникнут какие-либо замечания по качеству перевода, либо вы найдёте какие-либо опечатки, пожалуйста сообщите нам по почте dlinyj@gmail.com</p>
<empty-line/><empty-line/>
</section>
</body>
<binary id="img_0" content-type="image/png">iVBORw0KGgoAAAANSUhEUgAAAq8AAAN5CAYAAAAmcdIbAACAAElEQVR4XuydBXgkx9W1Y8d/
mPOFmfHLl8ReM8d27JgZYnvNGDM7ZscxMzMzMzPbK9YKVlppV7xiZm39c2rcq9Ktnpnume7R
9Oi8z3MerzXNUHW66tatT6lPfUpRFEVRFEVRVK6rs6NdfUr+kaIoiqIoiqJyUTSvFEVRFEVR
VGRE80pRFEVRFEVFRh3ty2heKYqiKIqiqGiofVkbzStFURRFURQVDS1ra6V5pSiKoiiKoqKh
ttYWmleKoiiKoigqGmptaaZ5pSiKoiiKoqIhmleKoiiKoigqMmppbqJ5pSiKoiiKoqKh5qZG
mleKoiiKoigqGqJ5pSiKoiiKoiKjpsYGmleKoiiKoigqGmpsWErzSlEURVEURUVDNK8URVEU
RVFUZNSwdAnNK0VRFEVRFBUN0bxSFOVfn/+8/TeKoiiKyoKWLqmneQ1Nl1+uVHGxP2EduR2K
cnTIIUoVFcWflffft3+H/vQn+7mSSrRuMq22mlJPPqlUd7fSjIwo9dFHSu2zj72suc599ym1
ZIlSY2NKjY4qVV+v1N13K/XnP9vLp9If/6jUFVcoVV4eP47JSaU6OpR6+mml/v53e3no299W
6pRTlPrwQ6Xa2uLr9PYq9e67Sh16qL08RSXS3nvb71JhoVLvvKPUY48pddZZSv3+9/Z6jvDc
O+s9/LD9u6NTT525j898Jv73F16Y/tutt9rrmTr44Jnb+NWv4n93q5dwDm+9pdSjjyr1738r
9X//Z29P6qtfVeqcc+LrDw0ptXy5UoODSpWUKHXllUqtvrq9DkUFJJrXMPXEE/FK3g9YR26H
olB53XTTzGdleNheDtpyy5nLuZFo3UTadtu48UzEVVfZ6xx4oFLj43LJabC9Pfaw13PTyisr
deGFybc3NaXUGWfMXG+vveLmNhnPPqvUKqvY+6QoqeOPl0+PDT6Orr02/szK9fEB5VBWZv/u
6LrrppcDn/tc/O+33z79N3w8wkDKdR29/fb0sosWTf/dS72Ed+mZZ5T66U/t7UL4O7aZiu22
s9elqABE8xqmvBQSEppXSupHP4q3EkoSGdD58+WSNonWddPXv24bwKameOVpsvPO0+ugcjN/
x/5QGb700kwD2tcX377cp9Thh0+v44AKdmLC/tu668bXQSut/B2gBVhy2mn2PilKyot5dTjv
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
mi8abVkiTzNjELIk95PLGih6W55CYNC8ury4QYvmdfZY9uDVqjlWEaLFruHiI7WW/OcgbYC0
TttTLTpqS1V92CZalfutY92/bGu2QKunvlaXHrPiWtWfs9+Ka4Xn2LlO1YdsnLEJzURBtFCj
NQutuChk607fM/bxkZkpClpFf/sfbaRxX1C55zq9772gn5/GK46f+a6dsXf8+Tl1N7XoiM1X
PEPlO/1eLVh9Feu8s6HuVx6Whx8aQ1WF8euCj7lPrsvSC/8Ve7f2n363Ttoldm22WHFtFu72
J1Ww9uet486mlj1wtTyV0Oh993lr/1FXGM8YWtPlfnJZeLbDgubV5YIHLZrX2aN8l8xbIbKt
2aJi73nWseSqMjWvWB+t6tUHb6xKtvihtf1cUvFm39EmMNe7uxsvP8469lxVGMYiEejBkfuP
gmheM1MYzxjN6zQ0ry4XPGjRvM4eNK/emQvmFXF8fR+9pmpP2kkVbfxNa7u5KrTCVR20oep+
4wk9yCYXoXl1h+Y1NTSv3qB5nYbm1eWCBy2a19mD5tU7+W5eES/WfONZ8e7YeStb28x5rbay
Kljrczoud6K/V57erEPz6g7Na2poXr1B8zoNzavLBQ9aNK+zB82rd/LRvCJjBFpbUegjq4Pc
ThRVtsOvVfsTt+hMDtlIG+YVmld3aF5TQ/PqDZrXaWheXS540KJ5nT1oXr2Tb+YV6bQw0n3Z
w9ep8l3/19pGlIXBchjIBQObK9C8ukPzmhqaV28gG07xJrOXCcWrCtb4f6r4799TjVeeKE8h
MGheXS580KJ5nT1oXr2TT+YVCdmR7xLpzOS6+SKMSO9+9dGcycdJ8+oOzWtqkHqv/ux9tZzs
C8jJW3XIxvrDs3CDr1jHNxsqXPeLqmyH36iqA9ZTi478h6o9bnt9rKjj687Ya8U5QIMLP5an
mTFIPYec4bhGNUdvrSrnr6lNojzO2VDhOl+M1SGr6+NaesFhOg3eSGOtPIXAoHl1uQlBi+Z1
9uh4/BYd59h09clq6cVHqfpzD1Q1R22pynf6nXWfckWzRefTd6jmm+LXqiFmRDDCffGpu6vq
Q/6m4y3lcc6mkplX5NNEcnakQJPr5ZsqYpVX38ev58SMSH0fvapabj5HNV17anyCiVgFhlR0
yO2ba4PjsmleYcxabz9ftdzyH9V03XSeaH2NkDLr3AO0kK6t5thtVcWeq2qTJI8528qmeTVB
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
OZBa50Fua9Dp3uR5Ba2iDb6mOl+4Xx7CrDPnzOvEQJ9afMpu1g3Khhbu/mfdnZqrMSSZgHNC
N2jve8/rRM/y3MNS610X6SD2bIBzRCqVRUdtZR1H0BqsKpK7jwS4RiONtar2lF2tcwpaaN1F
F1oU3ydd+bQ3q7oz51vnFbSGYs9SFPI2JgKtoT1vhhuG4qjqwPX1u5fN50qXnUgnGPswbr3n
MlW61U+s45qh1VZW7Y/folvu2+69zP49BMWzMnRn7ZqkYkV988HLul6Vx+tFSKEVdTCQb+Ge
3qa8zVRdMQObS+XInDKvaOnoePI2VbbDb60bky0hfKD3/RfV1OiwPLxIgooFLSMIiUAraOG6
X7TOOUxl07yiq2bZA1dZxxCG0DOAwSpRA13UXS8+YJ1PWOovfDNWiUcvphNdld2vPGKdTxhq
uuZU/Y7mivFIh/GOVlVzTHayw1TMXyP2DD+oJvrDNWvLl0/FypRh3ROoY1v/mdqEYFpbxOc6
4Q3ZMq9Q49Unq9GWJbPeMo1zH66vVM03nhUPq3A5Vi+Cec3l0fReiA/eOtk6t1C0+iqq7f6r
cqYnZ06YV1QUmCKu5Y4LdGyTdVOyLHwpLnvk+lihVR2J9BwmU7GvfbReoxDDVHLtsfOoO2tf
Vbj+V6zzzIba7rlUVwBhg1YODBKqPmxT6xhC0byVZyWTQiY483CHOSuSVMWeq6re916IRFJt
B52zs7Y8q9ep+aazdUUXphkLE3wUdb/+uCra+BvWuYWlxqtO0s8zPo6DvG5o1UUrJgYKtd55
keeWQ4whwDUwY5izaV4hlEkoB/G+BXlNvIAyGL0VaAGs2HM169j8CmEDI0uq5G4ixdT4uB5U
J88tLCH8sena03QWgtkmr80rEizjCw2BzYuO2lIVbZS9gi+VEAi96IjNVevdl+rCAKm78EWT
S1+CKGRRcCOmFNex74OXdP48TDiA7Am5cD3bH7kh9JYAJ89iTRbCBWZo3qfVoqO3Uj1vP5Pz
0wuj9RMV/eKTww8XkCrf6Xcxo3Gynggk1wcn4Z0aqi5StSfvYp1H2Fry30P01KJo8YsiiLus
/8+B1nmFKUww03T1yfqeTQ72yUPyDIwXDCue0Y4nb9UzJZXv/Htrf4lUdcD6sfIX887PfL6z
bV6hyvlrqsYrT9S9bfqDKOTyF+8M6qCuF+7T07diJix5TGkpVr7WnbG3GlvWKHcZGfBcdTxx
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
Gl5vIv1ditt+ok1SzZr4nFFPgU/aev1gKR5Sbfgq+Jv/pgix31kKevY52KniqXwB2Pj67GJm
pD34exJg3dC2sTtCGrohiGrghjasXGc1ulU+r+GZa9iMqfxfVd3uqlq5Lq/rqoqorP8PLS0t
LS0trfLS8Kql9StiRf5HNarjvG1trHJ1wmjm0Hoaxv3sZd+a1lYCtTS/jxYoTfBwQbJs01Vj
CFfloZot0Nq1rgvyZL+XbPvK7eGe7rilnhtuk+MdcbTXXZm0tLS0tLSuUxpeK6mUvRE9Nv+f
S+XXJb5WjRr4mUbM1o/9TcRKcnqbvl+zJg47O+J2Ac/eDetgqG8z3Orvi7saeeJhdxesreuG
7S5O2Otgh2ed7HHG0Q4v2tTGa7Y2eFtEz9T3q1cz7KxEn8g+UwZ0hbqWlpaWltb1ScOr1m/q
xxYtFLxa3/93lLWVmLWFVUU2VtrSSktLS0tL68+Thlet31SxvX25+7S0tLS0tLS0/hfS8Kql
paWlpaWlpVVppOFVS0tLS0tLS0ur0kjD680s0zqKRVmUtlPS0tLS0tLS+ptLw6uWlpaWlpaW
llalkYZXLS0tLS0tLS2tSiMNr1paWlpaWlpaWpVGGl61tLS0tLS0tLQqjTS8amlpaWlpaWlp
VRr9+/XXNbxqaWlpaWlpaWlVDr3xbw2vWlpaWlpaWlpalUQaXrW0tLS0tLS0tCqNNLxqaWlp
aWlpaWlVGml41dLS0tLS0tLSqjTS8KqlpaWlpaWlpVVp9MYb/9bwqqWlpaWlpaWlVTl0VcOr
lpaWlpaWlpZWZZGGVy0tLS0tLS0trUojDa9aWlpaWlpaWlqVRhpetbS0tLS0tLS0Ko0UvD57
9AhMHT50CAf278fT+/Ziz1O78eSundjxxHZs27YVj2/Zgs2bNmLD+vVYt3YN1qxZjdWrVmHV
ypVYueIxPPbYcixfvgzLly3DsmVLsWzpUixdugRLl1CPYompR00t1tLS0tLS0tLSuqlVht0s
LEeuI98tW0otFfajluEx4cAVjz2GlStXYNWqlVizehXWCi+uX7cOGzduwJbNm7B16+N4Yvs2
7NyxA7t3P4m9e/dg/zNP49DBAzh65DCOHzuGUyefw9kzp3H+hefx0oUX8eorL5fo7bfeRBU+
YOr5c2fVk0+dPInnThzHsWPPyoEEag8fUgc9sP8ZPPP009gncMsX27vnKQW5T8mL735yl8Au
tVNp105qB3aa2kE9UaIdWlpaWlpaWlpaN71K+c3Cc8J1ZDzFehbuUwwoLEggfWr3buHDpxQn
7hNefPrpfQpQDx7Yj8OHDuLI4cN49uhRnDh+DCefO4HTp0/h3NkzeOH553HhxfN4+aULePXV
V3Dp4j/x2uXL+NeV10r0/nvv4v8ATfJBqbXgj+UAAAAASUVORK5CYII=</binary>
<binary id="img_1" content-type="image/png">iVBORw0KGgoAAAANSUhEUgAAAeEAAAK1CAYAAAD/vVZyAAAgAElEQVR4nOzde3xV9Z3v/1dC
CCHZJOGWcImScBOUSMRbRm1FwYKXAupMp9oq2GKnFz3Q05n5VTrzazwzZX4znTni2M6vc7QV
tRVHRwXGtjgGjffgBYMBQZCQaKJJuCSEJATI5fzxzQo7YYfc9t7fvdZ6Px8PHjHJzt6fhJZX
1u274hDxlnOAPGBcRnp6duKwYWm2BxL3OtnWVldbX18BHATeB6otjyQeE2d7AJEwumrWOed8
MycjY/L0SZPiJo8de2x0IHDC9lDiXkcaGpKqDh8OfPLFF+2fVFd/9snnn/8GE2ORsFCExROS
hg37xuXnn790/pw5cT9cuvTjtJSUVtsziXccPHo0cd2mTbOKdu5s2bZ37zNtbW3P255JvGGY
7QFEhmr48OH5V51//sof3HBD3fdvvLEsKTGx3fZM4i0pSUltC+bOrUmIi0s5fPTovIqDB/cB
NbbnEvdLsD2AyBCNOW/SpDsXXnTRyT+96qrPz/bA421tyafa2xOjNZh4z9euuebQ/urq1IMN
DXftrqz8W+CY7ZnE3RRhcbvL5kyZMvneG274MNQnD7W0TKg7cWLyqfb2UdEeTLzpqwsWxH9y
+PC0jkDglj179jxmex5xN0VYXG3KuHHnX3X++UcDycltwR9vh/jPGhtnNZ06lWFrNvGmlKSk
9txp0xIOt7ff+rWvfe1IfHz87wsKCnQIRAZFERY3GzYiMXHq2NTUlp6fKG9ouKClrW2sjaHE
+1JHjmxtaWwcFx8ffzEwHHjO9kziTvG2BxAZgrSk4cOT0pKTu50JXdvSMkkBlkhKSU5uj4Ph
x48fHw5cWFBQMMf2TOJOirC4WVxbR0d7e3v3PYF1J06ca2ke8Ym4jo6O9vb2jra2Nucyzy9b
HUhcSxEWT2lqbQ20tbcn2Z5DfCejoKAg3fYQ4j6KsHhKS1tbsu0ZxLfG2R5A3EcRFk9p1XXA
Yk/A9gDiPoqweEpcXJwuFREr2tra2vp+lEh3irCIiIglirCIiIglirCIiIglirCIiIglirBI
jNlfVZV037//+3Tn/YeefTbrSEODlpgV8SBFWCSGHGloSFj39NPZf3XbbeXOx75x3XXVP/rl
L2cpxCLeowiLBHl5+/aIrnrU1/P/fMOG7LtuvLFyTGpq13rYY1JTW+9YtKjyV5s2ZYX79SLN
9uv3hxtmFO9ShEWCPP/qqxMi+fwvvftur6sq7a+qSvqkqiowb+bMxp6fu3bevPo3Pvxw3P6q
qgEtyfnEiy8OONzhFOmf51AdaWhIKN61SxEWaxRhkU5HGhoSinfvjtjdl5zI9vb5dU8/nX3T
FVdU9/b5P1+woPKRF17od1Rf3r49vfH4cWu7sF/evj29uq4uptfx/q+33tJSk2KVjjGJr2zf
uzfw1s6daQDXX3754YqamqRr582r319VlbTuP/9zSnNLS8Ir27enAZybmXli2uTJXfcq3l9V
lfTHbdvGOl8b/LkjDQ0JOz75JAVg7vTpTQA7PvkkxXmO7Xv3Bv7mkUfOA+jt+UvLytJXf+1r
XceCe8qdOrXxP7Zu7VeEt+/dG/hfjz56XvLIka3O682dPr1pTGpq6/a9ewNHGxuHpQUCbfNm
zmzcvndvACB4C9z5fnaVlweumDPnaM+t8yMNDQkvvPXW2MpDh5IWX3bZ4Z6f3753b+Cfn3pq
Wqjv13l9gGvmzTsa/LO7Zt68oz1/ns7HQn2Pb+3cmXZBdnaj872BiX8cdDjf3/6qqqRPa2pG
OO87X//8a6+N+8Vzz03Lv+CCQz1/Rv35GYuEgyIsvrH2iSeyZ0+Z0njPLbdUOe9/sG9f+rXz
5pX8x8svT6C9PQ7g7V27RgN0QL0Tyedfe23c7oqKwJo77ig/0tCQ8KNf/nLWvJkz6++99dZK
gLpjxxLe3rVr9O9eemnK369cuWt3RUXgWHNzQuH772e++3/+z5tbtm0bl5KU1Hawri4p1PPv
r6pKamppSQiOck/zZs5srKipSdlfVZV0tsftr6pK2rJt2zggrvn48eHO652bmXliTGpqa2lZ
WeA/tm7NShk5svWiGTPqJ48f3/KL556bds8tt+xfvnhx9fa9ewP/8NvfTv/esmXl99xyS9Xa
J57IfvSPf5z80KpVHzvPv+7pp7Pv//a3PxmTmtq69oknsh969tkpj953367g1+/t+y0tKwsU
ffDBuHd27x7717ff/nFDU1PCDfn5hx554YWs515/fcJd119fVVpWFrgqN7f+D8XF436+YcOM
P/z85+8531/nz/+8eTNnHr331lsrX96+Pf2bf/d3eb/9278tGZOa2lq8a1f6Gx9+OM75/mZP
mdJ44bRpjT/+93+fddGMGfVr7rijfH9VVdLuiopAyogRbdWHD4/s+TMa5P/ERAZMu6PFN55/
7bWsq/Py6p3319xxR3lg5MhW579vvvrqaue/19xxR/m18+Z1PXbzm29O+O933skEc6LU39x5
5ye/2rRpmnOMdtrkyS1r7rij/Pzs7KMPPvPM9DV33FH+Z9dcU33nokUVznNeNGNG/fjRo1tC
PX9FTU1S9sSJZxwL7un87OyjFTU1Z93F68wyfvToluDXc8K9fPHi6qsuvPDQwbq6EbOnTGlc
vnhx9c1f+lLVVbm59QB/8/DDs2664opqZ741d9xRXvrJJ6OdE5j+UFw87uUPPsisO3Yswfn8
gc8/H/XYli0Tgl+/t+93+eLF1XcsWlQJ0NDUlHDvrbdWTps8uWXlTTdVvvz++xOeeeWVCcsX
L66eNnlyy7233lpZUVOTEnzy1M83bMgG4pxfgK6dN69+2qRJjZ0fZ80dd5RfdeGFh8qrq1Py
L7ig/uYvf/nQtMmTW2664opq5+8w+GfkhDn4ZyQSLYqwuMWQjy2OT09v+e4///MFj2/ZkunE
819+8IM9/fnae2+9tXzVn/3Zfud95x/rUEHMnTq1HsyWqxOKWHTw6NGkm7/85UNgwjVt8uSW
5197bVxFTU2KE2RHzqRJjc4JTN+47rrq7y5duj84WONHj26pOnhwwH9HVwa9jvN811166aGe
j9t14EDXsfTNb745ed7Mmd3mu2T27Pod+/endfuijo644F90zsnIaDl49GhMH6MW/9HuaHGD
PGAxUN35JwmYCgzorNa/v/vuPQ89+2z2Pz755CyAC7Kz63/8zW/uH5Oa2ucW6LyZMxsrqquT
7n3ggVmB5OTWUcnJve6ynDhunCu2ppJHjDjjrj+7KyoCYH65CP4FY/5FF3WFcUxqausFOTmN
9z744HmBpKS2UcnJrQcHeQJWqDPBQznW3JwA3S8nCv7v1OTk1qtycw8Hf01/9iyI2KYIixuU
APVAduf7FwJXdH6839JSUlofve++nWCO8W5+880Jf/PII+f94Z/+6f1Qj395+/Z0Z0vq3gce
mLX/888DD61evdPZYvvdSy9NGeT3c8bzR0PP1ztbpM4212Nbtkz4xbPPTv/H731vp/O4D/bt
6/MXonB8v+mBQCtA1vjxLT2f62Y4Ywt6oKL9dyKi3dHiFuVAETAMSAZ2AofP+hU9rHv6aSfi
3PzlLx969L77dh6sqxvZ2+OdXaDb9+4NvPzBB5l/vmBBZahjhtv37g04ZxgPRPD1qemBQL+2
Jg/W1SU5IerLhNGju816tLGxz1+6//zaa6sh9AIWzsd+8eyz0/PPP/9Qb7Fyjg33FI7rcefN
nNk4Pi3txDu7d5/xXM+/9tqQLzfSNcMSbYqwuMkVwJeACuBloH0gX1z80UfdFrs40tCQMD49
vStUUzIzW5yPB39dWkpKK5hdns7HHtuyZcL4tLQTRxsbE0rLygLOY5rOcl3u5PHjWw7W1Y1w
3g/epT1v5szGppaWhLMtTXmkoSGhqaUlob+7cGeee25jU0vLMOdrK3scsw2exTFt8uSWJVde
WfWrjRu7beUHRzklKak1EDT7/qqqpIN1dUnHmpsTgn++Pb/f3r6nUP99Nv/vXXftKXzvvQk9
v7bn9+d8745Qv4RMnzy5cV9lZcD5PmZPmaJd2BJVw/p+iEhMuBi4AagEngDOATIy0tImXJeX
1z5z8uQmgKbW1lHNra0hF9zY+PrrGceam+Nf//DD9B3796e8WVo6+jtLlnw6cezYk2COdVbW
1g5//MUXsz6prEyaN3NmQ87EiS1jUlNb29vb2154++0JtXV1w7Z99FHaiMTE9otmzqx/fMuW
c8/NzGyekZXV/KtNm7IONzQkNh4/nvBReXnypHHjWoIvd8mbPr3x/Y8/HvXH4uJxr3/4Yfqf
X3ttdfDn3961KzVzzJiWnIkTQx5TfnvXrtTqI0cSl33pS7X9+YHNyMpqfvGdd8aX7NuX8uH+
/aO+dcMNn48cMaL9sS1bJmzfuzd9eEJCxwd79waqDh1KzJs+vSs+Cy+55Ej1kSPDf7Vp07kf
VVSMfH3HjtGjkpNbb8jPPwJw7oQJjf/97rsZJfv2pVQePDji7V270n9wyy3lGwoLsz4/dCjx
rs7X6fn9rvrTP/3Uef2X33tv3MikpLY9FRXJ8fHx7Qe++CLpiRdfnDRs2LCOypqapINHjyaM
Gjmy9ecbNmQPGzaso/H48YSjTU3xedOnN+ZMnNgyPSur4ae/+c3MT6qqRry+Y8fo9z7+OPUv
v/71T8FcetYZ1rhPKiuTJo0b1/Jfb7017s0PPxwzMimp7YO9ewPx8fHtORMntsybObPhudde
m1Cyb1/K9r170+7p54l0nx86lPhBWVlHVnZ2WWJiYhtAR0fH7tdee61ffzcijjjbA4j0w1xg
GVAL/Bo4CUwAfjg7K2vcz7/1rRM3XnppLUBtS8ukQ8ePz7Q36uA9tmXLhPd2705/6Ic/DHnG
9r0PPDDr5quvrtYxS/ve3b078OuXXmq/fP78wkAgcBKgra3t2b/7u78rtT2buIt2R0usm4UJ
8CFgPSbAYM6S3mprqEhYvnhxdWMvu6SPNDQkNLa0JCjAIt6iCEssmwF8DXNm9HrgeI/Pvx8f
H3/GZTZudseiRZXOohPBfrVpU9a9t97a65KWIuJOirDEqinA14FjmAA32R0nOq6dN69+1pQp
jcFnGD//2mvjJo8f39LfE7JExD0UYYlFWcA3gRZMgEMu4O9Vyxcvrj4nI6Pr5Ky0QKB1+eLF
vd5dSUTcSxGWWJMJ3Am0YgJcZ3ccO4KP/eo4sIh3KcISS8YDKzr/ez1w0OIsIiIRpwhLrBiN
CXAC8DhQY3ccEZHIU4QlFqRhApwE/BazIIeIiOcpwmJbCibAo4CnMEtSioj4giIsNo3EBDgd
eBrYZ3ccEZHoUoTFlkRMgMcBG4GQSzWKiHiZIiw2DAO+gbkc6QVgh91xRETsUITFhpsxK2K9
BrxveRYREWsUYYm2LwNzgN2YewIPRQtAy8mTuiWnRNWJU6eGAYwYMcJTa5dL9CnCEk2zgWsx
lyD9Zxier6m5paW+oqYmEIbnEum3mrq64QmJiceGDx+uCMuQKMISLVnAn2LuiPQ7ICz/eB1q
aNjz6eHDI8PxXCL99cXhwwlxI0Yctj2HuJ8iLNGQjjkR6yRmNayetyQctGMtLW9/eOBA6/b9
+1PD9ZwiZ7OvsnJkxcGDp6bPmFFlexZxP0VYIm0k5oYMiZgt4CNhfv7d+7/4YutDmzefd7Sp
KSHMzy3SzbHjx4c9//rrY+IDgY8nTZrkq7t7SWTohBaJpGGYAGcCzwBlkXiRo83Nn9QdO3ZB
WU3NBTMmTWocnpQ0NhKvI/72WW1t4pOFhRl7amur511++fbExMT24M/Hx8e/UVRUdMzWfOJO
irBE0q3AdMxZ0JG8FOnE0ebmD480NY0p2b//gri4uAmnWlvjExISOkb2+IdSZCDqGhsTyj7/
POndPXtGPffGGym1LS0VF15yyftpaWkngh/X0dHR8tFHH/33Rx991GFrVnEn7b6TSLkGcynS
Tsz1wJFWXV5d/Y/l1dXF1S0t94xPTZ2WPHx4Snx8vA65yKC1t7e3N506deJ4W9vBCVlZ5VfN
nftZqMd1dHTsfuaZZ3SmtAyYIiyRMAe4GnMzhuej/Nqv3rh06c7m5ubV1dXV45ubm5Oi/Pqu
UVNTMyY+Pr5j/PjxdbZniVWjRo06PnPixPpRo0ad6O0x7e3tx+Pj41+J5lziHXG2BxDPmYI5
DlwHPAz0+o9XJBUUFExtb2+/LT4+friN13eDLVu2XJSQkNC6cOHCUtuzuFV7e/uJ+Pj4JwoK
CnT7TRkU7aqTcBoD3I4J7+NYCjBAQUFBWXx8/KPt7e26NaJESll8fPyvFWAZCu2OlnBJxmwB
xwPrgQa740BBQcHnwKM//vGPR48YMeKCjo6OifHx8Sm254oVx48fP2fYsGGngHLbs7hFe3t7
U0dHR+XJkyc/+sd//EddoiRDpt3REg7DgJXABOBJdF9gt/g2Zv3t39keRMSvtDtahioOsxzl
ROAlFGARkX5ThGWoFmJuzFACvGV5FhERV1GEZShmA1diVsLabHkWERHXUYRlsMYBt2DWgn4K
0MpUIiIDpAjLYCRiLkUCcyLWSYuziIi4liIsg/GnmGuCnwMOWZ5FRMS1FGEZqCuBmcA7wG7L
s4iIuJoiLAMxBXM29BfAFsuziIi4niIs/ZUCfB2zuMOT6EQsEZEhU4SlP+KB24AkzJnQunG5
iEgYKMLSH4uALGAr5vaEIiISBoqw9GU2cDmwF3jD8iwiIp6iCMvZBC/I8Z+WZxER8RxFWHrj
LMgRhxbkEBGJCEVYeuMsyLEJLcghIhIRirCEcgVmQY53gVLLs4iIeJYiLD1loQU5RESiQhGW
YCmY64FPYI4Dt9kdR0TE2xRhcTgLciSjBTlERKJCERbHNZhd0S+jBTlERKJCERYw8b0KKANe
tzyLiIhvKMKSCPwZ0Ag8Y3kWERFfUYTlBiANeBY4bnkWERFfUYT97TwgD9gGlFueRUTEdxRh
/xoFLMOshvWS5VlERHxJEfavW4ERmOPArZZnERHxJUXYny4HsoFXgBrLs4iI+JYi7D/jgOuA
SnR/YBERqxRhf4nHXI7UjtkN3WF3HBERf1OE/eVaIBP4I3DU8iwiIr6nCPtHFnAl8DHwgeVZ
REQERdgvRmB2QzcDGy3PIiIinRRhf3BWxXoOrYolIhIzFGHvOw+YC7wH7Lc8i4iIBFGEvc1Z
FasO2GJ5FokNSYP8nIhEgCLsbbdi/mF9Gq2KJZAPrAbmh/jc4s7P5UV1IhGfG2Z7AImYfOAS
4FVgp+VZJDZUdv5ZjFm0JRmIA2YBEzAn7e2xNp2IDynC3jQO+HPMkpTPWZ5FYks95peyfMy5
AuOAJmA95mYeIhJF2h3tPXGY3dAdmN3QWhVLeqrHbPUexVy2th5osTqRiE8l2B5Awu5SYCLw
IuaELJFQqoHngUYUYBFrFGFvCQALgVpgm+VZJLYNTx6VnBcXF3eyqaFJx4FFLFGEveUGYDhm
V2O75Vkkdg1PSk66c/6d838c1xHXsfW3W2lpaHnc9lAifqQTs7xjGmYr+B20NrScRVJy0reu
veva+279y1unTbtk2pi2E21zPt31aWPrqdZSdA6BSFQpwt4wHLgTOAU8BbTZHUdiVMLwpOF3
Lb578X3LfrRsWmZ2JqnjUpkwbcLYtlNt53+669NjCrFIdCnC3nAdMB2zG7ra8iwSmxKGJw1f
fv13rr9vyQ+XTMvMzuz6hEIsYo8i7H4ZmKUp9wNbLc8isWl4bwF2KMQidijC7hYHfBMYCTwB
nLA7jsSg4cOTht91/Xeu/3FvAXYoxCLRpwi72+XARZgt4E8szyKxxwnwX/cVYIdCLBJdirB7
BYDbgMOYY8H6h1KCDTjADoVYJHoUYfe6GcgEngQaLM8isWXQAXYoxCLRoQi70zRgAfAusN3y
LBJbhhxgh0IsEnmKsPsEXxO8AV0TLKeFLcAOhVgkshRh93GuCd6ErgmW08IeYIdCLBI5irC7
6JpgCSViAXYoxCKRoQi7h64JllAiHmCHQiwSfoqwezjXBL+MrgkWI2oBdijEIuGlCLuDrgmW
nqIeYIdCLBI+irA73ARMRNcEi2EtwA6FWCQ8FOHYNxG4EdiBuS5Y/M16gB0KscjQKcKx7+tA
MvA7zLXB4l8xE2CHQiwyNIpwbDsPuBJ4HdhreRaxK+YC7FCIRQZPEY5d8cDtQDvwdOdb8aeY
DbBDIRYZHEU4dl0CzAVeBCotzyL2xHyAHQqxyMApwrFpBOaSpHpgs+VZxB7XBNihEIsMjCIc
m67B3CnpeeCI5VnEjuHJackrF3170V+5JcAOhVik/xTh2DMK+FPgU8zqWOI/w5PTkld+5dtf
ue+rq76a7aYAOxRikf5RhGPPTcAEzMIczZZnkejrCvBN9950jhsD7FCIRfqmCMcWZ2GOEmC7
5Vkk+jwTYIdCLHJ2inBs+TrmLklPooU5/MZzAXYoxCK9U4RjR/DCHPsszyLR5dkAOxRikdAU
4dgQvDDHM2hhDj/xfIAdCrHImRTh2OAszLEFqLI8i0SPbwLsUIhFulOE7RuO2QquB/7L8iwS
Pb4LsEMhFjlNEbbPWZjjGUyIxft8G2CHQixiKMJ2OQtzlAGvWZ5FosP3AXYoxCKKsG03Yq4N
fgotzOEHCnAPCrH4nSJszxhgCfBB5x/xNgW4Fwqx+JkibM8NwDjMVvBJy7NIZCnAfVCIxa8U
YTvGAF/FLE250/IsElkKcD8pxOJHirAdi4EM4GnghOVZJHIU4AFSiMVvFOHoc44FlwAfWp5F
IkcBHiSFWPxEEY6+RUAm8B9oK9irFOAhUojFLxTh6EoDlmK2gHdYnkUiQwEOE4VY/EARjq5F
mOuCnwGOW55Fwk8BDjOFWLxOEY6eNGAZ5mzo7ZZnkfBTgCNEIRYvU4Sj5zpgEuaMaG0Fe4sC
HGEKsXiVIhwdo4CbgY+A9y3PIuGlAEeJQixepAhHx0IgC/hPtEa0lyjAUaYQi9cowpE3CrgF
2AO8a3kWCR8F2BKFWLxEEY68BZit4GfQVrBXJCrAdinE4hWKcGQlY+4XvBd4x/IsEh6JI1NH
fmfRykU/VoDtUojFCxThyLoWOBd4Fmi0PIsMnRPgv1aAY4NCLG6nCEdOMnArsB942/IsMnQK
cIxSiMXNFOHImQ9kY86I1lawuynAMU4hFrdShCMjCfgz4ADwluVZZGgUYJdQiMWNFOHIuBrI
AZ4DGizPIoOnALuMQixuowiH33DMVvCnwOuWZ5HBU4BdSiEWN1GEw+8SYDbwAlBneRYZHAXY
5RRicQtFOLziMNcFNwIvWp5FBkcB9giFWNxAEQ6v6cDlwCvA55ZnkYFTgD1GIZZYpwiH1w1A
CvA80G55FhkYBdijFGKJZYpw+IwGrscsT7nP8iwyMAqwxynEEqsU4fC5FpiMWZzjhOVZpP8U
YJ9QiCUWKcLhMQKzROVeYLvlWaT/FGCfUYgl1ijC4XEZMBP4PVBveRbpHwXYpxRiiSWK8NDF
YRbnaABesjyL9I8C7HMKscQKRXjoZgEXA1uBLyzPIn1TgAVQiCU2KMJDdyPmhg0b0WVJsU4B
lm4UYrFNER6a8cBXgGLMfYMldinAEpJCLDYpwkOzEJgAPAOctDyL9E4BlrNSiMUWRXjwRgI3
A3uAEsuzSO8UYOkXhVhsUIQHLx+zVvQLwFHLs0hoCrAMiEIs0aYID45zt6Q6zFnREnsUYBkU
hViiSREenAuAeZjrgmsszyJnUoBlSBRiiRZFeHC+CiRi7pak/2PGFgVYwkIhlmhQhAduArAA
eAs4YHkW6U4BlrBSiCXSFOGBC74s6ZTlWeQ0BVgiQiGWSFKEB2YEZp3oUmCH5VnkNAVYIkoh
lkhRhAdmLnAe8CLmzGixTwGWqFCIJRIU4YG5AYgH/mh7EAEUYIkyhVjCLcH2AC6SDpwDvIb+
TxcLFOAoqCmvobaituv93Ktzu32+sb6RAzu6n5+YMzeHpvqmbl8HkJKWwtS8qb1+Xe7VuZSV
lNF0tOmMOXLm5hBID5zx8dKiUnPVfg895+z5NWUlZQA01TexYMUCBvK/n6zzsrjxnhtnAPcV
PlpIS1PL40Bbv59AYl06Zq9nT6/2eD8bmBL0/g4GcT/5+IF+gY9d3Pl2u9UpBBTgPpUWlfL1
0V+neGPx0J+sAx5e9TBr5q/hyYInz/h0zYEaHl71MA+vepimutMBbaprYt3ydayZv4aaA2de
Tl9zoIafLf1ZyK/72dKfnf66Pn7lLX6+mDXz1/DwqofNY8/y+CcLniQlPYWlq5eydPVS8pfl
sypvVVeU+8sJ8cK7Ft6XlJJ0J9qr6DVxwA+BIuAxQv6qB8CDnZ+/aLAvpC3h/okD8oBPGcRv
OhJWMRHgJwue5PaC2628dr+FYX9NZnYmmdmZ5C/LJyM7gw33byB/WX7XFm0gPcDCFQsJpAdI
SU8hd35u18czszPZtG4TtRW1LFyxsNvzOl9XW15L7vzcrq+bmjeVqXlTycnLYeerO8/4up6c
r9v84Gbyl+V3vd+bzes2d71O8NvN6zazev3qgfxotEXsLnn0f43/ekx8nT9XA+UhHlfe+Wd1
L5/vF20J989UYBTwge1BfC4mAgwMeMsp2nLn5/JU/VPkL8sP23OuXr+alLQUHrzrwTM+l5Ke
ErbXiaQFKxZ0C3VjfSNNR5sGPb+2iF1jMWb38UA5v5k9GuJzyzD3kR90gEER7q+LgFZgl+1B
fCymArxt0zZrr29LID3ATzb+hLKSspC7pd3g7nV3d4vwhoIN5MzN4baC2wb9nAqxK5Rgopk0
iK97EJjf+fWO9M731w91MO2O7lsiMAsTYN0z2I6wBbimvIYN92+gtryWlQ+spKykjJ1FO5kz
f07Xrs/G+ka2rt9KSnoKteW1BEYHWLJqCQAPr36YrY+Ze3ZsuH8DAOOnjGfhioWUFpWy+cHN
NNU3sfKBlUzNm9rt9a5dfi0LVyw842OB9Brt9uAAACAASURBVAClRaUERge47ae3Ubi+kJcf
e7krDsUbi6ktr6Wpvoklq5f0eRJRqNd0Pr51/VYysjMAqC2vJSM7o89dvsFy5+eyZNWSM3ZL
u1FZSRmlRaWsLVob8qSvgdCu6Zi3BRPOFZhwtgzgaws6v+4BzO7peswW8roQj3ViXdT53+s5
vRs8u/N5yoPeL1eE+3Yh5pcV3TPYjhGB0YGVX/n2V/7qhu/fMOQt4MzsTFY+sJKV2SvZun4r
C1YsoLa8lg0FG1i4YiGN9Y385JqfsPKBlV1bTOtWrOs6Bnz3urvJX5bPmmvWcNtPu2895c7P
JSM7g5U5K2mqbzrj9eZcPafbx1blrWLr+q3cXnC7Od5asIHbfnobC1cs5EDJAcpKyti8bnPX
sefC9YWsvXktD35w5u7gUN/jqrxV1JafPkP5Z8t+xr+W/GvX+6VFpebs4gFyfjFYe/Na1n2w
bsgBs2Xzus1hCbAj67wsbvj+DTM62jvWbH1sa0dLU0s1ZnU9iQ3DgfOBvwN+jbkXfH/UY+L5
PCbI6zFB79mEFZg4z+/8mhJOx7i88+vmBz1+PjBfu6P7lgccY4j7/WVo2tvb6egIz5VhgfQA
OXk51JTXMDVvKrcX3M6DJSZsGwo20NHR0W2X5YIVC9j84OZ+PXeoXxKc1+v5sYzsDJrqm8id
n8vS1Ut5pPyRrs/nL8tn56s7WbBiQbfn7u+xaOf5gx3YcYCa8tNnKTu/NAxUID3A6vWrzRZ3
wYYBf32syMjOiMgvEInJie10MIzez6gVO4KXGR7obumNmEuUVmFCXNDj8+mYLeV1nD55txwT
Yue48tV0Py5dhLaE+zQWyML8sHRtsB0nGusaH37xkRfjgR/deM+NUybkhGfjInhXqvOPsbNb
uPTV01uITUebaKpvoqykLOy7X4NjHyoI4Tz2nTM3h5U5K7vORg7eVT1Qzm5p56zkaKspr+n3
z6axvhHo/vONxN9l1d4q/vBvf9hX+JvCf2lpbnkMcx6JxI5lQBnwFFA9iK8vAF7BhLXnVTJ5
mBCnYWLrqOv8HJiIH+D0WdebgPXaEj4759ov7Yq26+TxhuMPv/jIi//y+1/8vqL6wGD+/9M/
B3YcIGNKxunrTTvMIhNrX1kbkeOf0Tyr+F9L/pVVj64iY0oGhY8WsjJn5ZCuI76t4DYypmTw
4F0Pdu1+H4zB/Ay2rt/a78duXrc55C844fzZV+2t4oWHXthX+JvCf25pbnkUBTjWzMec27Oe
wQW4L05o43r8eQyzm9qZ4S6govPtB8AKbQn3Lg6Yh9mloGuD7WvpDDGEeYs4WM7cHBrrG/u8
3jRYf64ZDj42a0vxxmIWrljYtfW7ad0mHl798KC3ZJ2zpVddtIoN929g5QMrz3iMs1u9sb4x
ZAib6psG/MtN8cbiAf39hNqFH85fqEIEWHdXiz35mF3Kkfq3vCTobVEvj3HOpnbOqF4NFGhL
uHfTgWS0FRxLWiK9Rbxk9RLKd5x5+L9wfWG346nBQh1XDX5sY33jGUs42tBzq3fp6qX9/tre
fomYmjeV2356W6/HqhesWEBKWkrILe6a8ppBbY1uWrep348tKykLuZVeWlQaltXEFGDXKKL/
J2IN9vl30P3EK4dz/HhFj4+vA9IV4d7lYS5J2ml7EOlmSCFurG+k9NVSDuw4QG1FLaVFpV3H
DAEWrljInKvnsO6udV0fLy0qpba8tusYZE5eDilpKV1nFvcM1OVLL2dn0en/2Wxdv5WcuTkc
2HGA0ldLu2Y4WHHQfKzHDMHXIRdvKqamvMZcSvXqzm4f6+t7PFhxkNqK2q5Abn1sK4XrC7se
V7i+sNuJX6HUlNdQvKmY4k3FbH5wc8jY3l5wOzlzc0J8tdlaXrluJY+sfqTbmdjOSV1LVi/p
9njnsqGDFQcBKH21tOtP8aZi1lyzhp2v7uw60a20qLTr5+L8fJ0/G+7fwNqb14ac6+HVD/Oz
m3921u+9Lwqwqwz1N675nD7WO7fzv9N7PGYFZmvXCXE6JrTOlu9Suod4BbBOZ++FlgT8Fea+
wRstzyKhJY1MHXn3opWLBrRr2rlWNlioBfydy3cysjPIzM48Y/dn8PMsWb2k265W5zrj4Od3
rvV13j/bDIXrC7uFPXd+rrmRQo+P9bZLtuf36FwLXLi+sOsM68zszG7LTPam52VMvV1X7GzV
9na2cU15TdeSkSnpKV3rN/fU83vvjbP7vz+LhoSa2dlCHshu7WAKsO/0PBsaTFx77jZzrkUO
foyzC9y5RjiP04c5ixTh0C4FbsQsVVZheRbp3aBCLDIUCrCEk5ZXC+0mzGo3L9oeRM6qtfVE
64cVuypOtLe2nz9p5qT0wGh3Lhwh7qAAS7gpwmcaCywE3kZbwW6gEEtUKMASCYrwma4AzgWe
Q2tFu4VCLBGlAEukKMJnugk4BPjvNjnuphBLRCjAEkmKcHfjMaeeFwOVlmeRgVOIJawUYIk0
Rbi7S4Ec4L+AE5ZnkcFRiCUsFGCJBkW4u+uBBuAt24PIkCjEMiQKsESLInxaGnAd8A7wqeVZ
ZOgUYhkUBViiSRE+7WJgGvB74LjlWSQ8nBCfam9tn60QS1+cAL/0m5f+94nmE79BAZYIU4RP
W4Q5Dvyq7UEkrBRi6RcFWGxQhI0AsBh4H3PTZfEWhVjOKkSAtUaARIUibOQBM4A/Ao19PFbc
SSGWkBRgsUkRNq4D4oDCvh4orqYQSzcKsNimCMNIzB2TtgP7Lc8ikacQC6AAS2xQhOFCYBbw
35hrhMX7FGKfU4AlVijCsABIRLct9BuF2KcUYIklfo/wCOCrwA5gn+VZJPoUYp9RgCXW+D3C
FwDnY07Iqrc8i9ihEPuEAiyxyO8RvgZIAf4AdFieRexRiD1OAZZY5ecIDweWAruAPZZnEfsU
Yo9SgCWW+TnCs4Bc4GXgiOVZJDYoxB6jAEus83OEr8bcOekFtCtaTlOIPUIBFjfwa4SHAcuA
jzG7o0WCmRDvrGhvb2ufpRC7jxPgF3/z4oMnm0/+GgVYYpRfIzwVuAh4A6i1PIvEptbWk60f
VuysaFOI3SU4wKeaT/0ac3c0kZjk1whfApwLbAZaLc8iseuUQuwuIQLcYnsmkbPxa4S/grlb
UrHtQSTmKcQuoQCLG/kxwkmYewfvAMoszyLuoBDHOAVY3MqPEZ6FWSWrCKizPIu4h0IcoxRg
cTM/RvhPgPHA74F2y7OIuyjEMUYBFrfzY4RvBD4HSmwPIq6kEMcIBVi8wG8RHgt8GXgf+Mzy
LOJeCrFlCrB4hd8inAvMAF7CnB0tMlgKsSUKsHiJ3yL8JWAk8N+2BxFPUIijTAEWr/FThOOA
JcAnwG7Ls4h3KMRRogCLF/kpwucAlwJvA9WWZxFvUYgjTAEWr/JThC8CcoD/Ak5ZnkW8RyGO
EAVYvMxPEV6AuZPKm7YHEc9SiMNMARav80uEE4EbgJ2YY8IikeKEuKO9rf08hXjwugL86xcf
OnX81CMowOJBfonwdOBC4FXgiOVZxPucELcrxIOjAItf+CXClwGTMEtVtlmeRfzhpEI8OCEC
fNz2TCKR4pcILwIOYVbKEokWhXiAFGDxGz9EOAW4DtgOVFieRfxHIe4nBVj8yA8RvgBz+8JC
4JjlWcSfFOI+KMDiV36I8BVAGrDF9iDiawpxLxRg8TM/RPh6oBIotT2I+J5C3IMCLH7n9Qgn
A9cCO4BPLc8iAgpxFwVYxPsRng7MAV4H6i3PIuLwfYgVYBHD6xG+CHPjht8D7ZZnEQnm2xAr
wCKneT3CVwMngG22BxEJwXchVoBFuvNyhOMw60XvA/ZankWkN74JsQIsciYvR3gCcDnwLrp/
sMQ2z4dYARYJzcsRngXMBLYCzZZnEemLE2La29pneinEQQH+t1PHTz2MAizSxcsRvgwYDbxo
exCRfjrZerK1tPM2iJ4IcYgA6xdikSBejvBCzE0bdtgeRGQATnglxCEC3GR7JpFY49UIj8Dc
OakUOGB5FpGBcn2IFWCR/vFqhHOAC4E3gcOWZxEZDNeGWAEW6T+vRjgXE+IXgDbLs4gMlutC
rACLDIxXI3wV5jrht2wPIjJErgmxAiwycF6N8E2YY8G7bQ8iEgYxH2IFWGRwvBjhsZh7CL8P
VFmeRSRcYjbECrDI4HkxwjOB2cArwDHLs4iEU8yFWAEWGRovRvhizJKVW4AOy7OIhFvMhPiz
3Z/x+1/+XgEWGQIvRvga4Ciw3fYgIhFiPcSf7f6MP/zyD5+8+BsFWGQovBbhYcCNwEfAfsuz
iESStRAHBfiXCrDI0HgtwucA84C3gYOWZxGJtKiHWAEWCS+vRfg8YAbmzkm6U4v4QdRCrACL
hJ/XInwRkInunCT+cqL1ZGtp+c7yuI62jhmRCHFXgB958d9OtSjAIuHitQhfCbRgrhEW8ZMT
rSdbd5bvLCfcIe4W4BMKsEg4eS3Ci4BPgT22BxGxoCXcIQ4R4MbwjCoi4K0IB4CrgZ2YEIv4
UdhCrACLRJ6XIjwZyAOK0e0Lxd+GHGIFWCQ6vBThmZgzo1/GHBcW8bNBh1gBFokeL0VYZ0aL
dDfgECvAItHlpQhfibk2WGdGi5zW7xArwCLR56UI68xokdD6DLECLGKHVyLsnBldCnxmeRaR
WNRriBVgEXu8EuHgM6OPWJ5FJFYFh3jm5JmT0+qq6xRgEYu8EmGdGS3SPy2tJ1t3le8s72hv
a5+55609BwsfLfz/T7acfAQFWEQG6SZgje0hRFxkdEpayn0jUkb8T2CU7WFE/CrB9gBhMh7d
ulBkIOqajja9jdlzdMz2MCJ+FW97gDDJAGptDyHiMtM6/4iIJV7YEg4AI9GWsERfOjA36P0d
QH2Px8wHOoLerwDKIzyXiLiEF7aEx3e+1ZawRFs6cA3wQ6AIeD7EY+YD93d+/mYgO2rTiYhE
wWVAAZBmexDxrfnARswW7+peHrM+euP027eBb9geQsTPvLAlnAGcBI7aHkR8bR3wKvBTQm/t
ahe0iJzBCxEej3ZFS2xYBsQBj9oeRETcwQsnZo0BymwPIYI5KWsF5tjwaszW8dmkA8uB0Z1f
W47ZrS0iPuH2LeF4zNnR2hUtsWIjsAl4ALOUam/yMCdrbcKc07AOc2z5gUgPKCKxw+0RTsPs
/lOEJZaswPxv8my7pddhTtYKPla8GrgLE2MR8QEvRBgUYYktzm7pPMxWbk95mLt+lYT4XAm9
n2EtIh6jCItEhrNb+qecuVs6vY+v7evzIuIRXolwz1WKRGLBCswKWQM9W1r/exbxCS9EuBk4
ZXsQ8bXetlyDd0sHK8IscRnqxK08YnNhDxGJALdHOB3tiha7nMuMlhM6xkXAgyE+vgJz7Dc4
xOsxu7F1mZKIT8TZHmCI7gEOAU/ZHkR8KRsT02A9z3gGE2fnkqSeHw8+CauE6Ab425hbGf4u
iq8pIh7yE+B620OIuJTWjhaxzM27o5OB4Wh3tIiIuJSbI6wzo0VExNW8EGFtCYuIiCspwiIi
Ipa4PcLtQJPtQURERAbD7RGuBzpsDyIiIjIYbo+wdkWLiIhruT3COjNaRERcy60RjgcCaEtY
RERczK0RTsMsuakIi4iIa7k5wqAIi4iIi7k1woHOt4qwiIi4llsjPLLzbaPVKURERIbAzRHu
AE7YHkRERGSw3BzhZttDiIiIDIWbI3zc9hAiIiJDoQiLiIhYogiLiIhY4uYIt9geQkREZCjc
HGFtCYuIiKu5NcIpKMIiIuJyboxwImbdaEVYRERczY0RdlbLUoRFBi5pkJ8TkQhQhEX8Ix9Y
DSwO8bnFwI+BWVGdSMTnEmwPMAiKsMjgFAPVwDIgvfNjw4Hvdv73eqDcwlwivuXmLWFdoiQy
cOXArzARvgi4uPPjCrCIBW6OsLaERQanBXgKcyvQo5gA65daEQvcvDtaN3DwjxRgvO0hPOhN
zJ3IJtgexINq0IaC9INbI3wCcytD8YepV1w8+77J48dOsj2ISF8+/aL2s2079v4vYJ/tWST2
uTXC+g3TXzpmnDNx5v/81s0XpwaSbc8i0qvD9Q38y2+ef2vbjr22RxGXUITFDeIAsjLHMiZ9
lO1ZRHqVmDDM9gjiMm49MUsRFhER11OERURELHFjhBOBU7aHEBERGSo3RngY0GZ7CBERkaFS
hEVERCxRhEVERCxRhEVERCxRhEVERCxxY4TjUYRFRMQD3BZhZ4UvRVhERFzPbRF21oRThEVE
xPUUYREREUvcFmFn3narU4iIiISB2yKsLWEREfEMRVgkhtQ3NFKyuwyA8soa6hsaLU8kIpGk
CIvEkNVrHyF7cgYA2VmZrHtss0Is4mGKsEiMKHjoSVbcvID01EDXx1YvX8KyH/zM4lQiEkmK
sEgU1Dc0UvDQk71+vryyhvKqWuZfntvt4+mpAVbcvID1zxUO6PWKtpVStK10ULOGQ8nuMquv
3x8bC4tjfkbxPkVYJAqK3tl51s8X/GIDK25eEPJzyxbms+6xzQN6vfKqmgE9PtzKq2qtvn5/
KMASCxRhkSg425ZsfUMjRe+UnrEV7EhPDZA3eyobC4v7/XoDjXa4rXtsk9XX70t9QyObtm6z
PYZI1zKQbqEIy5Csf66Qis8PUvROKa88vpb1zxVSf6yJ8spaVtyygLzZU7s9vmR3GUXvmC2m
8spaVi9fQnZWJuWVNTy28eWux1196RzmX57b9fzOx9JTU7j/FxvYtHUbRxubuf8XGwD46T23
dX1t0Ts7yZuVc9a5sydnULStlGUL88/6uKJtpdz/yw3s2HOAxzZu5dV3d3a9njNzye4yli64
nOzJmWwsLCY7K4PVy5d2Pce6xzaRPiqF8qpacrIyWR60hV7f0Mj657d2/TxGpwW6fy+dr//q
OzvPeH0wx70rPq81P6/Lctm4tZjySvM6q5Yvob6hkY2FxZRX1ZKemnLGMXKg8/M1XTMU3Hsb
6amBbt+f83pF75RSXlnLRedP7fo+NhYWc/8vNlBeVdM145RJ41lxy8Kz/mxFIkERFl9ZcctC
1j22iaJtpax/rpBlC/NJTw2wsbCYa+5cQ927T3U9dmNhMQUPPUnRE2u7/pGff+caih5fS3ZW
JsuXXcuK+9axY88BVt35VcBstRb8YgPr1txN3uwc0lMDPP/LnxB33le5+tI53YLlKNlddkb8
e5p/WS4Fv+j9mHLX4y7PZf7lucSd91WWL1vQbevamfnR5wqpa2hk9fKlpKem8MO1j3RFeP4d
97FsYX5XkFb/7GE++KiMdT+527y/9hHmXzan2+fvum8dj/7D6j5fH06faJYWSKFk94Gu5132
/b+nrvMs8IJ7b+967pvvWcsrj6/t+nrn727jv/0NYKI//441lGz6167v74H1m5gyKYO82Tms
Xr6U+oZG8patIm1UCssW5nf96W1GkWhy2+5oZ15FWAYtb9bp4DlbWcsW5lPf0NTtOOHqtQ+z
evmSrsdkZ2WSNyuHgs6t2eysTDb+8iekjUrp2jrcWFhMycYHu+LeH851wX2pqDrYr8edTXZW
JtmTM6hvaGLZwnwK7r2dA1sfAcxegvKq2m5bxStuWcCDj5++TCp4SxjMz239c1v7fRlVemqg
awvYCTBA3uyp3N/juPiyhfnd/j7KK2v44dpHuiINJvr1x5q6dvdnZ2WSNzuH8qqarl8U0lMD
ZE/O6PfPWSSa3LolrGUrvSkbSAL2BH0sHRgbiRc729Zn0bZSKqpqOXqsmVffOR2C0WkBDlSe
PukpPTXAxl/+hIuWrWLHngPdot1f9ceauq4N7k325Iywnmw1/7LuW8gA65/fyujUQLfv11Gy
+wDzL8/t2gKtb2hkx54DxMV1/3x/hfp+00aldM0SihP/o8eauv+dpAbOOBGsrz0LIrHCbRF2
4htndQqJlHRgMSbEdL4dC1RE4sXO9g91/bEmADrooKPj9MeXL1tAemrKGc/z03tu48HHN/PA
fSsHNYvzer0J99nGPb8HgPqGzu+5o/vHX3l8LXmzzTHrkt1l3P+LDXR0dLDiloXMv2xO2GZy
XqMvPed74L6Vff4SIxKr3BZhZzf0sLM+StyqpPNPOjAR+DoQAKJ+vY3zj3rerKl9buHVNzRS
39DE0gX5ZxzD7E3wceC8WVO7Ang2c/s4eetsrwV9bx06Ye7t+61vaOSaO9ew6s4l3XYJO8or
a0JuyZZX1lB/rGnIW6d9zTcU/f0ZiYSb244JK8L+cBy4pvPtG0BrtAfImz2VKZMzQl4WFHz5
TX1DI6vXPsK6n9zNujUrqTvayOqfPXzG1wQH1KwJfTq66akpfUa4/lhTyK3X/qhvaOpX5Ffc
vIAdew6ccXy3aFspJbvL2FhYTH1DU7fjtsHHbIOPFaeNSqFkT+ca2FW1/Xr9vixbkE/aqJQz
/k7qGxoHvJhJT+VVtQqwWKEIS6xJAL4JjAaeAIb+r3cPzrHV4H/MnZgEH3fd+MufsHFr91WV
1j9XyPzLcjuvMy3mmjt/QvooE8f01EDXiUwP9rhOd/5luezYc8C81jul3Xa9LluY3xWs3pTs
Lut2HLcvSxdc3vX9lewp69p6LK+soaLqYNcswVbcspClC/L54T880hXi8soaSvaYrXbn9Z1L
tpzrm6dMzjjjl4RlC/Mp2W1eo7yqpuv7rW9o5NV3d3L0WHO32JdX1bJjzwHKg463O6/jbKVm
Z2Wybs1K1j22qetxzolizqVb5ZU17NhzgIrPT+++r29oNMf2393Z7TXnzsrp+rnrpC2xxW3H
Vs8FvgU8Bpz5r4i4XTzwDSAHeBwox+ySzli+7No7//d9Ky8ekz5qSC/gnAHs6BkWMLuinTNr
nX/kyytryc7KYNmCfLKzMs2ykEFf4+ye7fn8zsfrGxq7FtDImz31jOt9s6/9NiUbH+z1pK75
d9zXedlT/7bWzDKZ5izuZQvzmX95LuWVNd22VsFs/fbchVy0rZT1z281l1iNSul2/Wx5ZQ3r
HttMempKZ5jnUF5Vy8bCYpYtzO+ar7fvt+fSnStuXhBypqJ3Ss/4ewr+RcKZIXtyRteZ6L19
fz0/5vydOM+TnZXB/Mtyw7Il/HnNYf7yn37z1oYXXlsB7BvyE4rnuS3Ck4G7gd8Cn1ieRcLv
VmAO8AzwUefHZgF3LV927YJwRDhWFTz0ZLf4ByuvrGHFfesoeuIfLEwmA6EIy0Bpd7TEisVA
LrCJ0wEGc7lSbK+BGAarly85Y4vNsf75rRTcc+aJUCLifoqwxIKrgHzgFczZ0T0di+440efc
Lann7lrnWKVWdRLxJkVYbJsGLATeA161PItVK25ZSN7sqV3hddZRDnU5kIh4g64TFpvSgT/D
nID1e8uzxASzfObpM3gVYBFvc9uWsHO9qCLsfsOA2zB/p08DHWd/uH84Z0gPdPlLEXEft0VY
W8Le8RUgA/gPoNnyLCIiVijCYsN5wOXAy8BnlmcREbHGrRF227FsOS0dcz1wOWZJShER33Jb
hJ27KGlL2J2c48An0XFgERHXRRjMiTyKsDstRseBRUS6uDHCbSjCbnQ+cCk6Diwi0kURlmhI
Bpai48AiIt0owhINX+l8+5/oOLCISBc3RljHhN1lEpAHFAGNfTxWRMRX3BhhbQm7RzxmN/Qh
YJvlWUREYo4iLJF0KZCJuRVhex+PFRHxHTdG+CQwwvYQ0qdk4FrgQ3Q2tIhISG6M8HFgpO0h
pE+LOt/+t9UpRERimCIskXAOMBedjCUiclZuXINZEY5tkTgZqwNg24d7GZmUGKanFAm/Y03H
bY8gLuPGCDcDSUAcuuY0Fl0OjAN+TfhOxop77b1db+/cV7EzTM8nEjEH6xqO2p5BJJIuBQow
J/5IbBkO/D/ALbYHkX75NvAN20OI+JlbjwmDdknHoosxeylesj2IiIgbKMISLvHAlcAu4Jjl
WUREXEERlnDJBUYBr9keRETELdwcYR0Tjh1xwJeBMqDW8iwiIq7h5ghrSzh2zADGAm/ZHkRE
xE3cGOEWzKVJinDsuBKzBfyJ7UFERNzEjREGc62wIhwbJgFTgDdsDyIi4jZujfBxdEw4VnwZ
cza0FtIQERkgN0dYW8L2jQXOwxwL1q0KRUQGSBGWobgEOAW8Z3sQERE3UoRlsOKAC4E9mBCL
iMgAuTXCzeiYsG05QArwoe1BRETcyq0RPg6MwGyNiR25mL+HMtuDiIi4lZsjDNoatmUYcAFQ
ik7IEhEZNLdHWMeF7TgPSES7okVEhsTtEQ5YncK/coEGoNL2ICIibubWCDu3yku3OoU/JQIz
gRLbg4iIuJ1bI1zX+TbN6hT+NAdzTPgD24OIiLidWyN8CrNLWhGOvlzgC07/IiQiIoPk1ggD
HEW7o6MtEcjGnBUtIiJD5OYI16Mt4WjLxlybvdf2ICIiXuDmCB8FRtsewmeyMYcBDtkeRETE
C9wc4XrM/Cm2B/GRbOCA7SFERLzC7REGHReOlkRgIlBhexAREa9wc4SPdr7VceHocI4HK8Ii
ImHi5gg7W8KKcHRkAyeBGtuDiIh4hZsj3Iy5XlgRjg7neHCH7UFERLzCzREGszWsY8KRp+PB
IiIR4PYIH0VbwtGg48EiIhHg9ghrwY7oyAZagc9tDyIi4iVuj/BRIBkYbnsQj5sIVKPjwSIi
YeX2COta4egYAxy2PYSIiNd4JcLaJR05CZif7xHbg4iIeI3bI6wFOyJvTOdbbQmLiISZ2yN8
DGhHu6MjyYmwtoRFRMLM7RHuQJcpRZoTYd05SUQkzNweYdBlSpE2BmjCLFkpIiJh5IUIHwHG
2h7Cw8ai48EiIhHhhQjXAgHM9cISfmPQ8WCvmADkneXzeej8CpGo8kqEAcZbncKbnMuTtCXs
DenAYuC7dI/thM6PzQeSLMwl4lvDbA8QBqeAKzFLKmpZxfBKBfKBDzErZom7HQLeALIwMU7o
/HM5UA6sBxqtTSfiQ17YEm7C3NYw4HBWLAAAIABJREFUw/YgHpTY+VYnZXnLRmAPcBHwJ53/
vdHqRCI+lWB7gDCpRRGOhBGdb09YnUIiYSPmxhz1KMAi1ngpwnNsD+FBzpawIuxNb6C9HCJW
eSnCycAozCpaXpQOzA16fwen1852zKf7nY5CPWYgtCXsXTPHZo39JsDhysMPAgcszyPiS144
JgxwsPOt18+QjgN+CBQBj4b4fDpwP7AJc7xvqJwIa2vJW2aOmTzme9f/xfXLF9296M5x54z7
PjDF9lAifuSFs6MBjgNfAr4AKi3PEiktmDNYZ2Eiuxqzpbsn6DF7MIFuAf6/zrdDMQWYAbwK
tA7xuSQ2TB8zecz3b7rnpuU33XPT6BmXzBjZ3tY+64tPvhje3ND8MadviiIiUeCVCLcBF2N2
m35seZZIm48J7DXAXwD/TvfY1nc+pigMrzUNyAG2huG5xL7pYyaP+e5N99x0143fv3F0cmoy
I0aOYEruFCfEiQqxSHR5ZXc0mF3SfjpDegVm93So3dLhkojZFd3R1wMl5jkB/pYTYMeoMaO4
8Qc3jll096JvjTtn3L3AufbGFPEXr2wJA0wEpgOv2x4kwpyt3HrMFvBqoAIoCfGYYHmcXinp
651v93B2szHLVr415KnFpl4D7NAWsYgdXopwKnA+JkZDPRYay4IDW4zZLb0c+A9OnwndM8Ir
MLuwv87p48Y/xoT5bLut5wApwDthml2ir88AOxRikejzUoSHAfOA/Xj7hgM9A1sEfA+z9OBj
IR6TDvwRc1b1nh5f90fMSV69LUl5ASbC74ZjcIm6fgfYoRCLRJeXItyCOUO6BvjM8iyR1DPC
zm7p72L+sSzu8ZjFmC3h79F9D0ELcFfn2962hmcA4zqfU9xlwAF2KMQi0eOlE7NOYv6h8NPJ
WY51mMuIfopZijCYc+u6UIt2lGOC3ZuTnF41S9xj0AF26GQtkejwUoTB32tIL8OcLf18j487
J2yFuk/s1Zz9mPApFGG3GXKAHQqxSOR5LcIH8f6qWRA6qPWY3c49b9pehDl7elmPjztbzGdb
vP8k3lna1A9ywhVgh0IsElleOiYMZu3o84FSzCpaXpKOOflqNSagNZx5QpVze7pqTm/htmC2
hgswx3arOX2y1n3AlrO85kTMceG3MQuiSOzKGZM15vs33XPTt8MVYEeIY8S7gYawvYCIj3kt
wvGYlbMOYG5g7iUTgJsxK4KdwCxfGWpX8hZMaIMDXQ48hdkangXkY9aY7mtVrYzOx29D60fH
MhPgH4Q/wI5uId7/RWLzUYVYJBy8FuFm4CqgDhMeL6nHRDP4TygthL7kqAWzJVzS+bY/d1ca
h9mz8B7e27PgFREPsCMoxLMVYpHw8FqEO4DzMNe27rA8ixekA7nAdqDJ8ixypqgF2KEQi4SX
1yIMkAnMxNywXIZmFOZErw/RP7SxJuoBdijEIuHjxQiPxGy9fYS23oYqBXOMfRdmF7/EBmsB
dijEIuHhxQifwpx49EXnHxm8eOBPMEuB1lieRQzrAXYoxCJD58UItwCXYc7m9fq9hSPtBOZE
t0N470Q3N4qZADsUYpGh8WKEAc7BHBvWjQeGLhdzjfBu24P4XMwF2KEQiwyeVyPsnNWrRSaG
bjqQhjlDWuyI2QA7FGKRwfFqhOMxZ/UeQCcUDdVkYBo629yWmA+wQyEWGTivRrgJc1vDOsy6
yTJ4Y4DZmFWzWi3P4jc5mVMz/8cN373hrlgPsCNEiHcCjbbnEolVXo1wOyYcSZh1pGXwRgJz
MceEj1mexU9yMqdm/o/F31m88sbv35jmhgA7gkNcvb96ePPR5l0oxCIheTXCYNZa1qId4ZGP
OTu61vYgPtEV4Bu+d0PATQF2BIX4fIVYpHdejnAyMAdv3lEpmlqAL2MCrF37kXdu5tTM1W4O
sEMhFumblyPcirle+HO00MRQXYj5eeoypcg6d+LUiasXfWfR3W4PsEMhFjk7L0e4GbPa03Fg
n+VZ3G4GkIouU4qkcydOnbj6K9/5imcC7FCIRXrn5QgDTMHcju9924O43HjMiW5vYO5UJeHl
2QA7FGKR0Lwe4TGY48JvYc6YlsGJBy7C7FHQdZ/h5fkAOxRikTN5PcIJmMtryujfTewltGOc
vu76U8uzeIlvAuxQiEW683qEmzHxOITiMRTtmMu9Aph7C8vQ+S7ADoVY5DSvR7gNuAAYDuy0
PIvbjQNmAW/aHsQDfBtgh0IsYng9wgCTMGsfKx5Dk4BZj3sfWjlrKHwfYIdCLOKPCCdhrnPV
oh1D04jZtX8E+MzyLG6lAPcQIsSlmLXfRXzBDxFuBK4EDgNVlmdxsza0HvdQKMC9CBHinSjE
4hN+iPAp4HzMjQh0XHhoMoDz0K79gVKA+6AQi1/5IcJgrhc+HxMPLTYxeImYXft70XHh/lKA
+0khFj/yS4SdxSb2A0ctz+JmDZhd+42YuyrJ2SnAA6QQi9/4JcINwFWYrTfFY/DagMlADrDN
8iyxTgEeJIVY/MQvEW7HhGMcugnBUMUB89Au6bPJmjh14g8V4MFTiMUv/BJhgFGYJSy3YW7L
J4NTD1yB+RnutzxLLHIC/B0FeGgUYvEDP0W4FbgEc5nSIcuzuFkbMBFze8O3Lc8SaxTgMFOI
xev8FOFGIB8T472WZ/GCi4AKdGMMhwIcIQqxeJmfIgxmCy4HKLY9iMvVA3/S+d8f2xwkRijA
EaYQi1f5LcJJmOPCH6IlLIeiHcjE3NDhbfx97bUCHCUhQrwDc6c0EdfyW4SbMVtwB4HPLc/i
du2YGzp8gX+PsSvAUdYjxIkKsbid3yJ8AsgFRgC7LM/idnWYY+zDgY8sz2KDAmxJUIgvUIjF
7fwWYTDXCp8PvGF7EJfrAMZilrF8Dzhpd5yoUoAtU4jFK/wY4WGY48L7MStpyeDVA5diglxm
eZZoUYBjhEIsXuDHCDvrH2sJy6FrAs7BnKD1LuYaYi9TgGOMQixu58cItwHTgdHAB5Zn8YJG
4GLM2eafWZ4lkhTgGKUQi5v5McIAaZgTtN7G+1tvkVYHzOb0TR28eLmSAhzjFGJxK79GuA2z
9aYlLMPjBGYFrTqg2vIs4aYAu4RCLG7k1wgfw9yE4CSwz/IsXnAQc2elycA7lmcJp4kTp078
kQLsHgqxuI1fIwwwAchGS1iGSzvmrPMq4IjlWcJh4qTpk370lbu/8hcKsLsoxOImfo5wHGaX
tO6LGx61mMuVxgAllmcZqomTpk/60XUrr1OAXUohFrfwc4TrMZcqncA/17hGUjtmJbK5mF38
bv3FRgH2iBAh/gCtGS8xxs8RbgcmAVPRLulw+b/t3XtUk3e+LvAngBgkYrhfK1epWqxoL6It
lXqZOp2x4rTTqXac2tO67ewzbZlzZs6p7s6U3nTt1e5TnO7ZZ+xliuVU2+l2q3U6tRUVreOg
tYhC1YJAUFAIiAGTECSE88ePYIAACSR5c3k+a7mqubzvN4Hmye/6qiG2soyEZ7aGGcBexjKI
1bXqCbp2XTkYxORGfDmEAfH65wA4B14WzRG6AQRCbGXZBM+aec4A9lLmIO4x9mQwiMnd+HoI
m7uk9eDuWY5yCeKLTRrEntImacuxCQPYyzGIyV35egj3QGy7mACx7SKNnwmiV2EOACOAemnL
GRUD2EcwiMkd+XoIA+JSfHMBVIKzJx2lGaIlPBNibNhdr7DEAPYxDGJyNwxhoB1i4w4tgIsS
1+JNLgO4G8BkiDF3d8MA9lEMYnInDGExmSgZYvOObyWuxZtoAYQAyARwAe512UgGsI9jEJO7
YAgLEyG6pMsBGCSuxZtcgtjAYyrc5wsOA5gAMIjJPTCEhQ6ILul2AA0S1+JNjBA9DXMgNu+4
Im05DGAaiEFMUmMICzcgJhJFgtcYdrQrEBO0pkMsWZLq0pEMYLKKQUxSYgjfFAQxflkG953N
64l6cXNf6VAAZyWogQFMI2IQk1QYwjddBzAfYgOPRolr8TbtABQQX3La4dprDkfHpcX9hgFM
o7ESxGXgHBFyMobwTQaILlMlgNMS1+KNaiHe39shWsOuaGVEx02L+83Sp5c+wwAmWwwIYpV6
gk6jOwUGMTkRQ3igSRCTiL6BmFBEjmOCCOK7AKRCjL07c0tLEcBPMYDJPv1B3M0gJudjCA+k
h9hgog3Sz+T1Rp0Q64fnQnzhqXLSeRjANC4MYnIVhvBAegAZELs8nZG4Fm91BUAUxHWHm+H4
Ky0xgMkhGMTkCgzhoRQQAVEK6ZbTeLsLEF92ZkF82ely0HEZwORQDGJyNobwUAaIcctrYJe0
s/RA7NN9F4BEiJ3Kesd5TAYwOQWDmJyJITyUFqKVFgFu3OFMWtzcTSsAYtLWWDGAyakYxOQs
DGHrJkCEw2nwfzRnugSxr/RsiLFh9RiOwQAml2AQkzMwhK1rg9hLuhtAncS1eLvvIdYPzwFQ
D7GZh60YwORSDGJyNJnUBbix1QBiAfwfjH+8kkY2GcA/AQgE8C5smzHNAB5FRUkFkjOToVAq
xnWMysOV/f9e/vzyAcdrVjXj4LaDA56z6IlFUKvUA54HAJGJkViydsmwz1v10ioUFxajpb5l
SB2LnliE6KToIbdvz98OmWzox9iql1ZZfT1ajRYHCg9Ap9EBANQqNaKTo4d9/HCut13H53/8
vK34g+L/aK5r/jeInfaI7MYQHt5MAI8CKAJQI3EtviACwNMQ+3a/AzFmPBzJA7hZ1Ww1FNzF
noI9eO/X7+Hpt57GirwV4z5ewdoClO4uxaz7Z+Ffdv3LkPtfy30N0UnRWFewbsDtz2U+h7rT
ddhxbceQLwNajRYFawuQkpmC1fmrbX7eYKW7S/H6ytfx0PMPDTm/tdexKn9V/89Oq9FiVeiq
Mb1Pg4L4DbjXNbPJQ/hJXYAb+x6im2mO1IX4iFaILzyTAKyBuMazNZIHMAB8VvCZJOe11eK1
i7HqpVXIys1yyPGikqKwKn8VSneXYk/BniH3r8hbYfVcwcpgALAapAqlAimZKZiVM8uu5w33
WPN/R3Jg24EBPzvz8evK7R91mhw2GT/67z8KW/Lkkn+OSYn5nwBC7D4I+TyG8PB6ICZmTYfo
JiXnawTwMcQlJVdj6JwFtwhgQLS+3JlCqcDq/NUOba2vyFuBjIUZ2PHyDjSrmh12XFfacmoL
VuXf7Ho2v46MnIwxHc8cxIvXLv4Vg5jGgiE8slMQy2dul7oQH3IBwG6I9cMrLW6PcHUAN6ua
rYbNnoI9UNePZSK3e6goqUBtuVgRptWM1Os/VF5hHtALbHlyizNKc7qUzJQBreuCtQVY9dKq
/rHqsWAQ03gwhEfW1PcnU+pCfMwZAPsh1msvggjg/+WIAK4tr8Vzmc9huWw5SneXYnv+dhSs
LcDG+zf2P6aipAIbcjagrryu/+/msCpYW4ADhQcAABtyNmBDzga8m/cuAKC4sLj/2BUlFf3n
25CzActly7E9f7vV27bnb8drua/h+TnPAwDezXsXjykfw4acDagtr8Wegj0o3V2KDTkbUFxY
bNNrHHxOc33FhcUIVgZDp9HhtdzX7O5Wj06KRl5hHipKKqx2S3uS4sJiZOVmDRmPHgsGMY1V
gNQFeIBTAH4IMXHI0fsc0/D+DiAYQGZYXFjO/Wvu/6UjWsApmSn4Q/kf8FTSUyguLEZeYR4q
Syr7u5dry2ux8f6NAyYEqVVqbFq5CZsObeoPoI33b8Tmks0Djr1k7RIsWbsEy2XLB5xvc8lm
PJX01JDbNuRswIHCA9hUsgkp5Sn9AbuuYB2SM5Oxd8te1JbXDpgwVPBkwaitNvPxn8t8bsDt
O/J34H3V+/3/jkqK6v9CYY+s3CzMWzEPO17egVk5s5CSmWL3MdxBZUmlaNk7yOSwyfjRP/8o
DDI8+1nBZ4brV68XwDWX7CQPxpbw6E5DjA9zgpbrfQXgP9outx1v/L6xciyTZ4YTlRQFhVIB
hVKBrNys/g/j7fnbkbEwY0CXZVZuFipKKuzuuh18PmuSM5MRnRSNrNwsvLj7xf7bo5OiUVte
O2Cyk7kFa6vBE5XU9eoB47nRSdFWJ0XZwtO7pYHhfybjUf1NNerP1J+5fvX6N2AAkw0YwqMz
QFxyLxNc0iUFA4DPSz4q2bTvnX2lZ4+eddiBrX0IV5ZUIjopGhUlFf1/dBodMhZmQK1y/Djw
aK3I8azxHez5D57Hnrf24Onkp/F08tP9LdmxUCgVyCvMQ2157YAub1expVvezNoXqIqSijG/
9uGc/NtJ7P/z/sNHPz26CYDtBZJPY3e0bU4BmAEgDUC1xLX4qr0lH5UAwEYAWTPvnem0E0Ul
RQ35gB7c9WzJ3dcMm5m7y0t3l4ox3bf2QHtNO+ra2uFYdksHK4OtfqGITooesmnHYPa2SJtV
zXb1CFgLXEe3gk/+7SQOFB4wB/BXDj04eTW2hG1TDUAHTtCS2t6Sj0o2ffGnLxzaIraUkZPR
P6nKklajHbY72pZxVUd2pY+VeSJVVm4W1hWsw6aSTWMaE7aUV5iH4CnB2PHyDqv3m5f+DLek
SafR2f0FpqKkwq5xaGs/z+ikaId9cWIA03gwhG3TC3G5vekA5BLX4uscEsTDtaRW569GXXnd
kNCwnEVsHms1h/LgsdeoxKj+JUAABvx9vPWNx+CZ0CmZKTa3CId7DeZu6eHqXbJ2CZJnJ2NH
/tCQHkuXcLOqGe/9+j2bHz9ct/X2/O0DZsSPFQOYxosXcLBdB4AsiAsMXJa4Fl9XpapQqY03
jMnKKGVC5NRIm5/YrGrGxy9/jNI9pdC366Fp1vRP0gKA0JhQJExPwLYXtkEmk0HXrsOBwgPI
ys3qbzmFxoSitrxWdLP2zRKwbJkFK4Ox70/7kDAjAXWn61BbXgudRgfVaVX/+fZu2YvSPaXQ
NGuG1FBcWIyd/7oT15quQd+uxwT5BFSUVODgtoNoON8Adb0awcrgYVty5tf49Sdf9z8/JTMF
BwoPoOF8AwKDAqFWqfFZwWdYnb8aoTGhw75fFSUV2PHyDnz9ydeoPFyJXvQOaYUmTE+ATqND
wvQEqzVlP5aNL/70BVSnVVDGKHGt6Rr2bd0HrUY7ZKZ3cWExDm47iLIvy9Bt6IZMJkPl4UpU
Hq7EgW0HsOXJLeg2dA+YSHd8z3E0nG/o/3maH//er9/Dvq37EJUUNeQ82/O3o668Do+88Miw
r300DGByBE40ss/TEL0H70hdCAEAluc8nrPxh8/80CljxOZuzOFaa+bWobWu0WZVM9QqNaKS
ovpnOus0unFfUGE8tBotFErFqK/LWWrLa1G6uxTBymCPXtoEMIDJcRjC9rkTwI8B/Du4Zthd
ODWIiQZjAJMjsTvaPq0A5gMwgVdWchdj7pomshcDmByNIWyfHoids2YAOCZxLXQTg5icjgFM
zsAQtp8ewN0ArgLw3F38vQ+DmJyGAUzOwhC2XzuAWwHcAuBbiWuhgRjE5HAMYHImhvDY9AC4
C+Kyex0S10IDMYjJYRjA5GwM4bFphQjhYADO2bqJxoNBTOPGACZXYAiPjQlAIMSSpW8B3JC2
HLKCQUxjxgAmV2EIj53lciXpNwYmaxjEZDcGMLkSQ3jsbgAIBzALwHGIMCb3wyAmmzGAydUY
wuOjgdhPWgPgisS10PAYxDQqBjBJgSE8PloAqQCSAXwjcS00MgYxDYsBTFJhCI9fN8RM6XqI
FjG5LwYxDcEAJikxhMevBWKW9BQAlRLXQqNjEFM/BjBJjSHsGP4QQVwBoFPiWmh0DGJiAJNb
YAg7RgvEBC0ZxC5a5P4YxD6MAUzugiHsGEYASgC3g8uVPAmD2AcxgMmdMIQdpw1i8w4dgEaJ
ayHbMYh9CAOY3A1D2HH0ABIhliydkLgWsg+D2AcwgMkdMYQdywBxreHLENcbJs/BIPZiDGBy
Vwxhx2qDGBeOAHBa4lrIfgxiL8QAJnfGEHY8GcTmHd9BdFGTZ2EQexEGMLk7hrDjmZcrTQBQ
JXEtNDYMYi/AACZPwBB2vB4ACgBzAZwCrzXsqRjEHowBTJ6CIewcrRCtYX9w8w5PxiD2QAxg
8iQMYecwQOwlnQngW4iLPJBnYhB7EAYweRqGsPM0Q2ze4QegRuJaaHwYxB6AAUyeiCHsPAYA
oWBr2FswiN0YA5g8FUPYucwzpQGgVspCyCEYxG6IAUyejCHsXJ0AwiBaw99AXOiBPBuD2I0w
gMnTMYSdrwVibBgA6qQshByGQewGGMDkDRjCztcJsY3lbLA17E2qVBWqK8YbxlQGsetZBHA+
gANS10M0Vgxh11BDtIZNAFQS10KOU80gdj2LAN4I4Gup6yEaD4awa3QCiIQYGz4OsasWeQcG
sQsNCuBjUtdDNF4MYddpBTAPIoDrJa6FHItB7AIMYPJGDGHX0QGIgrjU4QmwNextGMROxAAm
b8UQdi3zntJGsDXsjRjETsAAJm/GEHYtHYAYsDXszRjEDsQAJm/HEHY98y5aNwBclLgWcg4G
sQMwgMkXMIRdTwcgFkAGRGvYJG055CQM4nFgAJOvYAhL4yrEumEDgEsS10LOwyAeAwYw+RKG
sDS0EK3hWWBr2NsxiO3AACZfwxCWjrk13AmgQeJayLkYxDZgAJMvYghLRwsgHqI1/A04U9rb
MYhHwAAmX8UQllYzRGtYBl5hyRcwiK1gAJMvYwhLSwcgFMAdAMoBdElbDrkAg9gCA5h8HUNY
epch9pSeDOCcxLWQazCIwQAmAhjC7qAL4ucwD8D3EGPF5P18OogZwEQCQ9g9XAYwF0ACgFMS
10Ku45NBzAAmuokh7B56IDbuuBtAE8SFHsg3+FQQM4CJBmIIu48mADMBpAE4CaBX2nLIhXwi
iBnAREMxhN1LK8SSJT2ARolrIdfy6iBmABNZxxB2LxqIceHbIVrD3MDDt3hlEDOAiYbHEHY/
jQAWAPADUCtxLeR6XhXEDGCikTGE3U8ngBAAdwI4AzFhi3yLVwQxA5hodAxh99QIMVN6CoCz
EtdC0vDoIGYAE9mGIeyeuiH2k+YGHr7NI4OYAUxkO4aw+2oEkAlgKriBhy/zqCBmABPZhyHs
vkwQS5XmAVADaJG2HJKQRwQxA5jIfgxh99YM4FYA0yGuOcwNPHyXWwcxA5hobBjC7k8NsWTJ
AKBB4lpIWm4ZxAxgorFjCLu/DgAxAOZAtIa5gYdvc6sgZgATjQ9D2DNcAZAFYAKAGolrIem5
RRCf2HsCBz88yAAmGgeGsGfoBDAJYu3wdxATtsi3SRrEJ/aewKGiQwxgonFiCHuOBgB3gEuW
6CZJgpgBTOQ4DGHPYYQYH86C2LzjsrTlkJtwaRAzgIkciyHsWdQQV1nKBFAO4Ia05ZCbcEkQ
M4CJHI8h7HlUEK3hUHBfabrJqUHMACZyDoaw5+mC2E1rPsQ4cZu05ZAbcUoQM4CJnIch7Jka
AcwAcBuAkxChTAQ4OIgZwETOxRD2TL0QQTwf4mdYK2055GYcEsQMYCLnYwh7rusQa4fnATgH
QCdtOeRmxhXEDGAi12AIe7aLAOYCSAZQJnEt5H7GFMQMYCLXYQh7th6IiVnzIXbRapS2HHJD
dgUxA5jItRjCnq8V4gIPd0DspMW1wzSYTUHMACZyPYawd1BBjA1HQOwtTTTYiEHMACaSBkPY
O9zo+8O1wzSSalWF6pLxhnGaZRAzgImkwxD2HpcBpAOYBa4dpuHVqCpUKuMNY/qUiCkJl85e
wsFtvBwhEZEjRAH4PYBlUhdCbm9xzuM5/7j3p/eWAFggdTFERN5iKYCXAMRJXQi5vSVgABNJ
yk/qAsjhSiA28sgFf740skSINeZEJBF+SHufbgCfQXRNz5O4FiIiGkGA1AWQU1wAUAFgMYDv
wdnSjpYPsX+3pW0QS8XMcgAstPj3YYheCiIi8gFBAH4L4J/AHg9nyIUI4l4AScM8phBAed9j
3dFTAB6XuggiX8YPZ+/VCWAXxAStHIlr8Ua7Abzc9/eR3t+cvscSEQ3BEPZuFwCcAJAN4BaJ
a/FGBQDqAbwFQDnovlyIVrDG1UURkedgCHu/rwBcBfAIgECJa/E2GgB5EAGcb3G7EiKEC6Qo
iog8B3fM8n4miNbaAgCTISZqkeOcBzAHwBMQk69UAF6AGA9uGvTYtX1/YiDCOxHA8b77Mvue
Jwcwve/veX3HcZa5AIwQk/iIiMiJsiFaa9OlLsQLJUG0ik9BhKm1FrC5e9qS5aStwfcp4fzZ
1JyYRUTkIjKID93/DSBY4lq8UR7ETOlyDB0fBm52XVvKx82gVUHsdGbJ2bOqGcJERC40BcAG
AD+XuhAv1YuBY8NmmX33fQARtOY/h3BzbfFa3FzydAjA884uFgxhIiKXmw0RFHdLXYgXGi6E
c/ruG22pWBJEGBdCtJw/cGh1QzGEiSTG2dG+5zTEZKIfAIiQuBZfYW7tWtvUw9x1nd/3uEKI
IM7p+6+1rm0i8hIMYd+0B2Izj5+CvwOuoAKwBWIG9WDmceLBgVsO8YWJ64yJvBiXKPkmI4Ar
AO6F+B2olbYcj5cLYD2ALIggNQBox8AA3QexlOkx3Jy8lQcxk9oA0RJWQvRSmCdxlWDorGlH
4hIlIonJpC6AJPUARHD8GcAliWvxZNbGelUYeEEHs8y+x5dj4BKkzL7b1vb9u2SY5zvSUxBf
AD5y8nmIiMgKfwC/AvBrABMlroVcjxOziCTG8UDf1gPgUwAKAA9KXAsRkc9hCFMzgAMQS5e4
mxYRkQsxhAkA/gEx/rgCYn9pIiJyAYYwAWIjiZ0Qvw+Pgr8XREQuwQ9bMrsO4L8grju8VOJa
iIh8AkOYLH0P4GsA8wHMlLgWIiKvxxCmwQ5CjA+vBBApcS1ERF6NIUyD9QL4C8S2lqsATJC2
HCIi78UQJmv0AD6GuPThSolrISLyWgxhGs5lAF9AjA3Pl7gWIiKvxBCmkZwEcAZitvQtEtdC
ROR1GMI0ms8AtAD4GcT2lkT1xSfWAAATd0lEQVRE5CAMYRqNEcAOAAEQQczfGSIiB+EHKtlC
A3GhhwRwIw8iIodhCJOtasCNPIiIHIohTPY4BBHG3MiDiMgBGMJkj16Ibmlu5EFE5AAMYbKX
AdzIg4jIIRjCNBaXAfwN3MiDiGhcGMI0Vt+CG3kQEY0LQ5jGgxt5EBGNA0OYxsMI4KO+v68G
J2oREdmFIUzj1QGgCGLJ0k8ByKQth0YQAyBzmPvkffcpXVcOEflLXQB5BR2AZgALAUyEWEtM
7icCwDKIsG0AkA7Rm9EC4BmIHdHOA9BKVSCRr2EIk6NcBdAF4H6IUL4sbTlkhQZAKUTYLoHY
DzwAwDyI8C0EA5jIpRjC5EgNAIIhWsQNAK5JWw4N4zxEq/gBAEkASgDslrQiIh/FECZHuwCx
ZGkBgCqIVjG5n/MQ4/jnITZfISIJcBINOUMggKcgWsXvQEzecpUgAGkQLb1IAJNceG5PY35v
9JJW4d60AFohxs2rAdyQthzyNgxhchYFxGSfTgDvwjUfXreET5nyi7SYmOmTg4IUt0RE+IVP
ntzrgvOSl2ppb5c1trWZruv12gtXrlRevX79AwBqqesi78EQJmeKhmgRX4JYT2xy4rnunjl1
6lP3zJiRuHrhwuo7p03TKOTyHieej3xER2dnQOn586HbDx1KOfb993XVly+/A6Bc6rrIO3BM
mJzJPEt6IcQFH7530nlSMlNS/sej994b8tLq1RXp8fG6wIAAtoDJISZOmGBKjY3VL5w1S63t
7Ey8ev16Rkt7exmA61LXRp6PIUzOdg1izPE+iDWpFx18/IkZiYkv5MyaNfXVn/+8Qh4Y6MzW
NvmwoMBA0/zp01vPXrp0q6GrK6Glo+MwxOU9icYsQOoCyCd8AyAMwGIAbQDOOvDYs6ZGRqY+
v3z52QB//yEfiF09PfKWzs74LpNpcrfJNMnU2xvowHOTj/GTyW489sADxoaOjoWtN27c2dzc
fFzqmsizMYTJVb4CEA7gJxDdeJcccdCo0NDpd6SmdqfExnYOvk/d2RnbajDc6ojzEAGAqbc3
MCo8PHBmYmK4SaF49s558/SvvvpqhdR1kefi3tHkKr0APoWYWboaDtqjWBkUlJkQETFkiU2T
Xj+VAUzOEhkaauzW6+P8/f0f/t3vfneX1PWQ52IIkyt1A/h/ff9dA7GmdzyUEwICQuLCwga0
gq92dUW1dXWljPPYRMMKmzzZ2NXVpTAYDAEymezBF198kV/4aEwYwuRqeoirLikgWsTjGRLx
BwCZTDZgLLjNYLhlHMckGlWAn58Jvb0wGo1+fn5+soCAgHlS10SeiSFMUmgBsANAPMQYscN0
9fTIu02myY48JtFoTCZTcn5+vlzqOsjzMIRJKioAewHMBPCgow6qNxoVjjoWka38/PxkENdr
JrILZ0eTlE4BmAxgEcRlEA+M94DdXIJE0uEXQLIbQ5ikdgSAHEA2xD7Tx6Qth2hsenp6uA0w
2Y0hTO7gKwATAfwAYletE9KWQ0TkGgxhchd/hfh9fBCia/q0tOUQETkfQ5jcRS+A3RAt4lwA
PQAqJa2IiMjJODua3EkvgL8AuACxdGmatOUQETkXQ5jcjQnAxxBLmB4D4DM7X7V1dAS8vXNn
gvnfm4qKkqSsh4icjyFM7qgHwHYAVyB21UoY+eHe4aX33097fOnSJvO/l82b12oZykTkfRjC
5K6MAD6EuODDLwDEufLkNY2NLt39aFNRUdLKhQubwkJCjObb5qana6/r9QEHy8rsvtiFq+t3
t/PbwhNqJO/HECZ3dgMiiNshgjjaVSf+5OBBl+1+1NbREXD0zJmIRXPnagbf98yKFQ1v7tiR
Zu8xXVm/Na99+KHdNbtSW0dHgNTvERHAECb3ZwBQCEAHYC3ENYmd7uiZMxGuOA8A/GnPnoSf
LV7cYO2+sJAQY2pcnHbbvn02B0ZZVZWkOzfVNDbKtZ2dbr3yYu+xYy77+RKNhCFMnkAHEcQ3
III41BEHrWlslFsLrF1HjkTUNzcHj/Z8R4XdVydOxCxfsKB1uPtXLlzYdPLcOZu7pF98993p
461ptK7ake5/YevWcZ9/NG0dHWMO+baOjoAPPv880ZH1EI2VW39bJbJwHSKI/xtEEL831gOV
VVUpPj10KGbpXXe1AsCGrVvTLjQ2Kj595ZXyt3fuTPiitDQGuDk7OT4y0vDEsmX9E6a27dsX
c76+XnH3jBmav1dUKC+3tsp/u2qVKiwkxFjT2Ch/7cMP006cOxf++NKl9ZMnTTICQNXFiwoA
yHv0UVVqfLzBfCxzmFmOBQ+WGB1tKD17dtSWm/ncLRqN/FR1tdJc/88WLWpKjY83PLl5c0Zl
ba0yKTZWu3rJkoYT584p/1FZGf7+Cy+cTo2PN7R1dAS8+fHHiYqgoJ4ZiYnaF7Zunf7L3FyV
uZu8raMj4I0dO5KmJyZqQyZNMr724YdpD91zT9PK++5rtTy/6soVRbBcbhx8/k1FRUm7jhxJ
0Hd1+Re9+OK3FbW1isaWFvmp6mrljxcsaFq+YEHrR/v3xwDAkdOnI+akp1/b+POf11u+xrd3
7kyounhRsXLhwqaiL79MuOPWW6/96ic/aQSAJzdvzjhx7lz4zKSk9l/m5qq+q6tTXNfrA46e
ORPx2rp15+emp2sPlpUpi778MkFnMEywfI82rlmjGu39JXIGf6kLILKDAUAVgDsAZACoiZoy
ZeHSzExTeny8DgB0RuNkvdE4Ypf1c1u2zNy8fn3VzKQkfXJsrGHJnXe2fVFaGpGbna2eN3Nm
R2xEhP6L0tKYj/PzT2fPnq3JTEvTmp+7qagoqayqSvl2Xt75GYmJ+nkzZ3b4+fmZfvPHP858
/Ac/uBwWEmLMzc5Wl5w6FVpRU6N8fd26qpw5czQPzp/f2tXdjef/8IfbF99xh9ocuuUXLijO
1tcrHr3//qbh6g0LCTFu+c//TF61eHFj0MSJppEel5udrd5/8mTYnGnTNBvXrFFlz56tMZ8r
Nztb3dre7ldRU6OcmZzckZudrf7Hd9+FLrnzztawkBDjL15//fbE6OjOjWvWqGYkJurvSE/X
PPPmm5mP5ORcDpo40fTeX/8ad7SiIvyNX/6yekZion5WSkrHujfemDP/ttuuxoaH37A8f3BQ
kPHtvLzzlufPnj1bE6lU6g+WlUVNS0i4/sSyZU3Zs2drIqZMMWwqKrrVTybrefbhhxvmzZzZ
cUd6umbjO+9kLLv77mbz8zcVFSUdP3s27IONGyuTY2MNudnZ6vw///nWSXL5jRmJifrc7Gx1
g1o94fuLFycvnDPn6mOLF6uzZ8/W1Dc3B35x/HhUbna22vy8we+Rrb+AZpdbWwNP1db2JiQl
1QYGBvYAQG9v77kjR46o7T0W+TZ2R5OnuQrRIg4GsMpkMtn9RVLX2Rnw5scfJ1p2aa554AGr
Y7KWahob5bu+/jr+oXvuGRCYi+bO1egNhoDBy4nmZ2S0WrZwV953X2uwXG60nLT0XV2dTV3a
kyZO7Cm/cMEh3d8t7e0Tn1i2rCk1Pt7w6SuvlKfGxxt2HTkScValmvLMihX970NqfLwhUqk0
mFunCZGRhujQ0K4B90+Z0vX3igqbu8qnKBRGALh31qwBwac3GAISIiP7ewjMvQX1zc393d67
jhxJ+PGCBQPe+3tvv711e3Fx//ve1/MgGzzJrfnatYm21kjkSuyOJk/UAqAIYntLu/1s8eKG
f9+5M23P0aMJiTEx2sy0NM1vHnusfrTn1Tc3y/UGQ4A5SCxFhoYayqqqlAD6Q8zcFW1pfkZG
a/G33/bP8r6u19v0/2BSbKx29EfZZmZSUvvg287V1ysA0TK3vD01Lk4bEhxsBMSXiJX33de6
bd++mA6dLsBcu62vYcBxLbrkzay9r2YHy8qU+q4u/w6dbsiSrbT4+AHvTWRo6JBj1zc18TKD
5JYYwuSpGgF87OfnN9veJz6xbFnT8gULWg+XlytPnDunPFZREflMQ4PiL6+8YvWiETWNjfLU
+HjDJbV6xMlKtswInjxpklFvMPQ/Lj4y0nCqunrUmlVXrow5RMz12/LYwS1Iy3+XVVUp1r/5
5uxfPPBA/eNLlzaFhYQYT1VXj9oKbuvoCBhpzNsetyUnay1rsrasayzseY+IHInd0eRzNmzd
mhYWEmJced99rZvXr7/wX6+/frLuypXJw834Na8nnZWSMmxrtOXaNfmcadNGDYRT1dXKu2fM
uGr+9y1RUTZ98Ou7uvwtx6btYct62Pi+rmBrs47Nt61/443MrBkzrj778MMN5lDV9X3xqGls
lA/3/jmiGz0xOtoAANa+CI1nprQZ1wyTVBjC5HOKT56MsfzgDgsJMUYqlQZzS0jZ1y1qDhVz
t/Lc9HTt3TNmXN11+PCAD+yyqiqFzmAIsBxPBYDy6uopgx93VqWaYjn+nBgdbRitlVvT2Cif
NHFij62tyZjQUMOV1tb+sLLWLT7YE8uWNSVGR+vM47+WNZvX1Oq7uvzTp07t/yLQ1tERYF7K
Vd/cLDeP3w7+MlL63Xd27/g1WGp8vOGhe+5p/PzYsQEbtrR1dAT8ac+ecW3tWdPYKM+67TaH
tKiJ7MXZ0eTJJkVNmbLE3tnR7+7dO/VCQ4M8JjzcMHHCBNP7n38eO/fWW9vNLc3Y8PAbJ8+f
n1zd0BAkk8l6WzSawHkzZ3YAwH2zZ7eVnDoVVl5TE9xtNMpO19QEv7F9+7S3nn22MiUurr9V
++mhQzGKoKCe42fPhiTHxuoPl5cr/+/u3UnPP/JIzYNZWW3mx4WFhBi3798f99C99zYNN/O5
/MIFRVNbW2BudrZNM2/lEycaPz10KGFqTIz2r8eORTyYldUaFhJi3FRUlHS0oiL8cmvrpNb2
dr9uo1GWHBvbX/MPs7LUf9y1K0l97Zp/gL9/7/5vvgktq6qa8uzDDzcAQLtWKzv47bdRM5KS
Oq5cvRr41iefJP100aLGL44fj9Z1dvo/vHChOmjiRFNcRIRhR3FxwtSYGO2R06eV5vNv27cv
Zsf+/fEtGo28saUlQCaT9dZduSIv+vLL+MbW1kld3d2QBwb21F25In9379747y9eDLna3h7Q
rtP5Z6alaZfceWdbWVXV5D1ffx0VEx5uOFdfP6noyy/jnn/kkYtBEyeaNhUVJX114kR0S3u7
vLW93S8uPLxr77FjEV8cPx7drtUGtut0iAsP7woLCTFO8Pc3bt+/f+rUmBjtlydORPx4wYLW
kWaeD8bZ0eQoMqkLIBqH8NumTt38r2vXGn90111qAFAbDHGtnZ3pIz2prKpKYV4zCojWqLXx
QPP91sYdaxob5fXNzXKlQmGcm54+pJv4p7//feacadM0z6xY0WDujh1u/HLD1q1p0xMTtZZr
ke253xpzfZavbfCEpuFed1lVlUKj1QZYu998XMvXU1ZVpUiKiTFYttTbOjoCyi9cUFgew3xc
y/MDA2dAW7tt8HtsrQZrry8zLU2ramqSW54zMy1Na67TfBzL22z1zblzivf37zfNy8kpVigU
NwCgp6dn56uvvlphz3GIODGLfI75A320ST0j3Z8aH281wAYLCwkxjnae365apVr/5psZ1kK2
raMj4PSFC8rN69dfGO1co9Vn6yQma18qRjqutcdbe93DHdfa+zjSezvce2/t9YWFhNj1Wohc
jWPCRE5iOS47krCQEOOcadM0u44cGbIr1kf798esW76cuzkReSmGMJED1TQ2yjds3ZoGAE3X
rsnN2yKOZuOaNaoT584pLSeMlVVVKa7r9QHmbSGJyPuwO5rIgVLj4w32dh2bbV6//sLbO3cm
mCdC7Tt+PIJ7GhN5N7aEidyIOYABXlSAyBcwhImIiCTCECYiIpIIQ5iIiEgiDGEiIiKJMISJ
iIgkwhAmIiKSCEOYiIhIIgxhIiIiiTCEyZP1AEBPby+vBkYuZTSZ/AAgICDA5ssfElnDECZP
punq7tZdamkJlroQ8i0tGs0EP39/g1wut+sSiESDMYTJo7XrdDUNra0Kqesg39Lc1jbBXy6/
KnUd5PkYwuTRWjo6aitUKv/zly6xNUwucUmtDqxTq01BCkW71LWQ52MIk6crrVSpqv/4+ecz
jD09HBsmpzL29Mj2HD0a1arTXU1PT78idT3k+fylLoBonDrb9fqGGz09szU6Xdzs1FSdwWSK
lLoo8j6dXV1+u44ciTxZV3d92qxZJ6Kjo7WW9/v5+Z0oKSnRSFUfeSaGMHmDlqZr1xpaNZpb
z1+8mBYeGjpZERRkCvD375W6MPJ8nV1dfucvXpz0yaFDkWcaGjRxqaknU1JSBowHm0ymXplM
9mVJSQknapFd2H1H3kQ5SS5/eM6MGb+ICAmJjFYq/ZXBwQxiGrNrWq2sSaPpae/s1PlNmtRw
5113nVMoFDesPLQ2Pz//Q5cXSB4vQOoCiBxIozcY3g+/5ZbT8qCgdTWtrVM6W1rkUhdFnis4
OLgzMiFBkxoV1aFUKjuHe1x3d/cBV9ZF3oMtYfJKL7300r0ymWyJ1HWQT/hrfn7+SamLIM/E
MWHySocPH76YnZ19XSaTJctkMv6ek8P19vYaTCbTnldeeaVc6lrIc7ElTF4tPz8/sKen5zZ/
f//bTCZTrJ+fH9cT05iZTCYdgAY/P7/vLl++fO6dd97plrom8mz/H423extCanBSAAAAAElF
TkSuQmCC</binary>
</FictionBook>